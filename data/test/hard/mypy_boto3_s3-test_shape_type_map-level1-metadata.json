{
  "dir_path": "/app/mypy_boto3_s3",
  "package_name": "mypy_boto3_s3",
  "sample_name": "mypy_boto3_s3-test_shape_type_map",
  "src_dir": "examples/",
  "test_dir": "tests/",
  "test_file": "tests/type_maps/test_shape_type_map.py",
  "test_code": "from mypy_boto3_builder.service_name import ServiceNameCatalog\nfrom mypy_boto3_builder.type_annotations.type import Type\nfrom mypy_boto3_builder.type_maps.shape_type_map import (\n    TableAttributeValueTypeDef,\n    UniversalAttributeValueTypeDef,\n    get_output_shape_type_stub,\n    get_shape_type_stub,\n)\n\n\ndef test_get_shape_type_stub() -> None:\n    assert get_shape_type_stub(ServiceNameCatalog.dynamodb, \"Client\", \"boolean\") is Type.bool\n    assert (\n        get_shape_type_stub(ServiceNameCatalog.dynamodb, \"Client\", \"AttributeValueTypeDef\")\n        is UniversalAttributeValueTypeDef\n    )\n    assert (\n        get_shape_type_stub(ServiceNameCatalog.dynamodb, \"Table\", \"AttributeValueTypeDef\")\n        is TableAttributeValueTypeDef\n    )\n    assert (\n        get_shape_type_stub(\n            ServiceNameCatalog.ec2,\n            \"Client\",\n            \"ClientBatchGetItemRequestItemsKeysTypeDef\",\n        )\n        is None\n    )\n    assert (\n        get_shape_type_stub(\n            ServiceNameCatalog.dynamodb,\n            \"Client\",\n            \"ClientBatchGetItemRequestItems\",\n        )\n        is None\n    )\n\n\ndef test_get_output_shape_type_stub() -> None:\n    assert (\n        get_output_shape_type_stub(\n            ServiceNameCatalog.dynamodb,\n            \"Client\",\n            \"timestamp\",\n        )\n        is Type.datetime\n    )\n    assert (\n        get_output_shape_type_stub(\n            ServiceNameCatalog.ec2,\n            \"Client\",\n            \"ClientBatchGetItemRequestItemsKeysTypeDef\",\n        )\n        is None\n    )\n    assert (\n        get_output_shape_type_stub(\n            ServiceNameCatalog.dynamodb,\n            \"Client\",\n            \"ClientBatchGetItemRequestItems\",\n        )\n        is None\n    )\n",
  "GT_file_code": {
    "mypy_boto3_builder/type_maps/shape_type_map.py": "\"\"\"\nString to type annotation map to replace overriden botocore shapes.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\n\nfrom collections.abc import Mapping\nfrom typing import Final\n\nfrom mypy_boto3_builder.constants import ALL, SERVICE_RESOURCE\nfrom mypy_boto3_builder.service_name import ServiceName, ServiceNameCatalog\nfrom mypy_boto3_builder.type_annotations.fake_annotation import FakeAnnotation\nfrom mypy_boto3_builder.type_annotations.type import Type\nfrom mypy_boto3_builder.type_maps.named_unions import (\n    AttributeValueTypeDef,\n    BlobTypeDef,\n    PolicyDocumentTypeDef,\n    StreamingBodyType,\n    TableAttributeValueTypeDef,\n    TimestampTypeDef,\n    UniversalAttributeValueTypeDef,\n)\nfrom mypy_boto3_builder.type_maps.typed_dicts import GetTemplateOutputTypeDef\nfrom mypy_boto3_builder.utils.lookup_dict import LookupDict\n\nShapeTypeMap = Mapping[ServiceName, Mapping[str, Mapping[str, FakeAnnotation]]]\n\n# Mapping overriding TypeDefs for botocore shapes.\n# ServiceName -> TypedDict name -> Shape name -> Type annotation\n# Missing value is parsed from botocore shapes.\nSHAPE_TYPE_MAP: Final[ShapeTypeMap] = {\n    ServiceNameCatalog.all: {\n        ALL: {\n            \"integer\": Type.int,\n            \"long\": Type.int,\n            \"boolean\": Type.bool,\n            \"double\": Type.float,\n            \"float\": Type.float,\n            \"timestamp\": TimestampTypeDef,\n            \"blob\": BlobTypeDef,\n            \"blob_streaming\": BlobTypeDef,\n        },\n    },\n    ServiceNameCatalog.dynamodb: {\n        ALL: {\n            \"AttributeValueTypeDef\": UniversalAttributeValueTypeDef,\n            \"ConditionExpressionTypeDef\": Type.bool,\n        },\n        SERVICE_RESOURCE: {\n            \"AttributeValueTypeDef\": TableAttributeValueTypeDef,\n        },\n        \"Table\": {\n            \"AttributeValueTypeDef\": TableAttributeValueTypeDef,\n        },\n    },\n}\n\n_SHAPE_TYPE_MAP_LOOKUP: LookupDict[FakeAnnotation] = LookupDict(\n    {ServiceNameCatalog.to_str(k): v for k, v in SHAPE_TYPE_MAP.items()},\n)\n\nOUTPUT_SHAPE_TYPE_MAP: ShapeTypeMap = {\n    ServiceNameCatalog.all: {\n        ALL: {\n            \"timestamp\": Type.datetime,\n            \"blob\": Type.bytes,\n            \"blob_streaming\": StreamingBodyType,\n        },\n    },\n    ServiceNameCatalog.iam: {\n        ALL: {\n            \"policyDocumentType\": PolicyDocumentTypeDef,\n        },\n    },\n    ServiceNameCatalog.dynamodb: {\n        ALL: {\n            \"AttributeValueTypeDef\": AttributeValueTypeDef,\n        },\n        SERVICE_RESOURCE: {\n            \"AttributeValueTypeDef\": TableAttributeValueTypeDef,\n        },\n        \"Table\": {\n            \"AttributeValueTypeDef\": TableAttributeValueTypeDef,\n        },\n    },\n    # FIXME: botocore processes TemplateBody with json_decode_template_body\n    ServiceNameCatalog.cloudformation: {\n        ALL: {\n            \"GetTemplateOutputTypeDef\": GetTemplateOutputTypeDef,\n        },\n    },\n}\n\n_OUTPUT_SHAPE_TYPE_MAP_LOOKUP: LookupDict[FakeAnnotation] = LookupDict(\n    {ServiceNameCatalog.to_str(k): v for k, v in OUTPUT_SHAPE_TYPE_MAP.items()},\n)\n\n\ndef get_shape_type_stub(\n    service_name: ServiceName,\n    resource_name: str,\n    shape_name: str,\n) -> FakeAnnotation | None:\n    \"\"\"\n    Get stub type for input botocore shape.\n\n    Arguments:\n        service_name -- Service name\n        resource_name -- Resource name\n        shape_name -- Target Shape name\n\n    Returns:\n        Type annotation or None.\n    \"\"\"\n    return _SHAPE_TYPE_MAP_LOOKUP.get(service_name.name, resource_name, shape_name)\n\n\ndef get_output_shape_type_stub(\n    service_name: ServiceName,\n    resource_name: str,\n    shape_name: str,\n) -> FakeAnnotation | None:\n    \"\"\"\n    Get stub type for output botocore shape.\n\n    Arguments:\n        shape_type_map -- Map to lookup\n        service_name -- Service name\n        resource_name -- Resource name\n        shape_name -- Target Shape name\n\n    Returns:\n        Type annotation or None.\n    \"\"\"\n    type_annotation = _OUTPUT_SHAPE_TYPE_MAP_LOOKUP.get(\n        service_name.name,\n        resource_name,\n        shape_name,\n    )\n    if type_annotation:\n        return type_annotation\n\n    return get_shape_type_stub(service_name, resource_name, shape_name)\n"
  },
  "GT_src_dict": {
    "mypy_boto3_builder/type_maps/shape_type_map.py": {
      "get_shape_type_stub": {
        "code": "def get_shape_type_stub(service_name: ServiceName, resource_name: str, shape_name: str) -> FakeAnnotation | None:\n    \"\"\"Retrieve the type annotation for a given input shape defined in botocore.\n\nParameters:\n    service_name (ServiceName): The name of the AWS service for which the shape is defined.\n    resource_name (str): The name of the resource associated with the shape.\n    shape_name (str): The name of the target shape whose type is to be retrieved.\n\nReturns:\n    FakeAnnotation | None: The corresponding type annotation if found; otherwise, None.\n\nThis function interacts with the _SHAPE_TYPE_MAP_LOOKUP, which is a LookupDict mapping service names to their respective shape type annotations. It utilizes the names of the service, resource, and shape to fetch the correct type annotation from the predefined mapping. The mappings are established in the SHAPE_TYPE_MAP constant, which outlines the structure of botocore shapes and their associated type definitions.\"\"\"\n    '\\n    Get stub type for input botocore shape.\\n\\n    Arguments:\\n        service_name -- Service name\\n        resource_name -- Resource name\\n        shape_name -- Target Shape name\\n\\n    Returns:\\n        Type annotation or None.\\n    '\n    return _SHAPE_TYPE_MAP_LOOKUP.get(service_name.name, resource_name, shape_name)",
        "docstring": "Retrieve the type annotation for a given input shape defined in botocore.\n\nParameters:\n    service_name (ServiceName): The name of the AWS service for which the shape is defined.\n    resource_name (str): The name of the resource associated with the shape.\n    shape_name (str): The name of the target shape whose type is to be retrieved.\n\nReturns:\n    FakeAnnotation | None: The corresponding type annotation if found; otherwise, None.\n\nThis function interacts with the _SHAPE_TYPE_MAP_LOOKUP, which is a LookupDict mapping service names to their respective shape type annotations. It utilizes the names of the service, resource, and shape to fetch the correct type annotation from the predefined mapping. The mappings are established in the SHAPE_TYPE_MAP constant, which outlines the structure of botocore shapes and their associated type definitions.",
        "signature": "def get_shape_type_stub(service_name: ServiceName, resource_name: str, shape_name: str) -> FakeAnnotation | None:",
        "type": "Function",
        "class_signature": null
      },
      "get_output_shape_type_stub": {
        "code": "def get_output_shape_type_stub(service_name: ServiceName, resource_name: str, shape_name: str) -> FakeAnnotation | None:\n    \"\"\"Retrieve the stub type annotation for a specified output shape in botocore.\n\nThis function queries the `_OUTPUT_SHAPE_TYPE_MAP_LOOKUP` to find the appropriate type annotation based on the service name, resource name, and shape name. If no type annotation is found, it falls back to the `get_shape_type_stub` function to attempt to retrieve the input shape type.\n\nParameters:\n    service_name (ServiceName): The name of the service whose output shape is being queried.\n    resource_name (str): The resource name related to the output shape.\n    shape_name (str): The name of the target shape for which the type annotation is sought.\n\nReturns:\n    FakeAnnotation | None: The type annotation corresponding to the specified output shape, or None if no match is found.\n\nDependencies:\n    Utilizes the `_OUTPUT_SHAPE_TYPE_MAP_LOOKUP`, which is a `LookupDict` mapping service names to their output shape types, defined globally in the code. This function also interacts with `get_shape_type_stub`, allowing it to provide fallback behavior when no output type is found.\"\"\"\n    '\\n    Get stub type for output botocore shape.\\n\\n    Arguments:\\n        shape_type_map -- Map to lookup\\n        service_name -- Service name\\n        resource_name -- Resource name\\n        shape_name -- Target Shape name\\n\\n    Returns:\\n        Type annotation or None.\\n    '\n    type_annotation = _OUTPUT_SHAPE_TYPE_MAP_LOOKUP.get(service_name.name, resource_name, shape_name)\n    if type_annotation:\n        return type_annotation\n    return get_shape_type_stub(service_name, resource_name, shape_name)",
        "docstring": "Retrieve the stub type annotation for a specified output shape in botocore.\n\nThis function queries the `_OUTPUT_SHAPE_TYPE_MAP_LOOKUP` to find the appropriate type annotation based on the service name, resource name, and shape name. If no type annotation is found, it falls back to the `get_shape_type_stub` function to attempt to retrieve the input shape type.\n\nParameters:\n    service_name (ServiceName): The name of the service whose output shape is being queried.\n    resource_name (str): The resource name related to the output shape.\n    shape_name (str): The name of the target shape for which the type annotation is sought.\n\nReturns:\n    FakeAnnotation | None: The type annotation corresponding to the specified output shape, or None if no match is found.\n\nDependencies:\n    Utilizes the `_OUTPUT_SHAPE_TYPE_MAP_LOOKUP`, which is a `LookupDict` mapping service names to their output shape types, defined globally in the code. This function also interacts with `get_shape_type_stub`, allowing it to provide fallback behavior when no output type is found.",
        "signature": "def get_output_shape_type_stub(service_name: ServiceName, resource_name: str, shape_name: str) -> FakeAnnotation | None:",
        "type": "Function",
        "class_signature": null
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: mypy_boto3_s3-test_shape_type_map\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 mypy_boto3_builder/\n    \u2514\u2500\u2500 type_maps/\n        \u2514\u2500\u2500 shape_type_map.py\n            \u251c\u2500\u2500 get_output_shape_type_stub\n            \u2514\u2500\u2500 get_shape_type_stub\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module provides functionality for type resolution and mapping within service-specific contexts, focusing on the integration of AWS SDK type definitions with code generation or type inference utilities. It enables the extraction and categorization of shape and attribute types for APIs like DynamoDB and EC2, supporting both input structures and output data types. By leveraging mappings such as service-specific definitions (e.g., `AttributeValueTypeDef`) and universal type annotations, it ensures accurate representation of service interaction models. This solves the problem of inconsistent or incomplete type handling in SDK development, improving the reliability, maintainability, and type safety of generated code for developers.\n\n## FILE 1: mypy_boto3_builder/type_maps/shape_type_map.py\n\n- FUNCTION NAME: get_output_shape_type_stub\n  - SIGNATURE: def get_output_shape_type_stub(service_name: ServiceName, resource_name: str, shape_name: str) -> FakeAnnotation | None:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the stub type annotation for a specified output shape in botocore.\n\nThis function queries the `_OUTPUT_SHAPE_TYPE_MAP_LOOKUP` to find the appropriate type annotation based on the service name, resource name, and shape name. If no type annotation is found, it falls back to the `get_shape_type_stub` function to attempt to retrieve the input shape type.\n\nParameters:\n    service_name (ServiceName): The name of the service whose output shape is being queried.\n    resource_name (str): The resource name related to the output shape.\n    shape_name (str): The name of the target shape for which the type annotation is sought.\n\nReturns:\n    FakeAnnotation | None: The type annotation corresponding to the specified output shape, or None if no match is found.\n\nDependencies:\n    Utilizes the `_OUTPUT_SHAPE_TYPE_MAP_LOOKUP`, which is a `LookupDict` mapping service names to their output shape types, defined globally in the code. This function also interacts with `get_shape_type_stub`, allowing it to provide fallback behavior when no output type is found.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get\n    - mypy_boto3_builder/type_maps/shape_type_map.py:get_shape_type_stub\n\n- FUNCTION NAME: get_shape_type_stub\n  - SIGNATURE: def get_shape_type_stub(service_name: ServiceName, resource_name: str, shape_name: str) -> FakeAnnotation | None:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve the type annotation for a given input shape defined in botocore.\n\nParameters:\n    service_name (ServiceName): The name of the AWS service for which the shape is defined.\n    resource_name (str): The name of the resource associated with the shape.\n    shape_name (str): The name of the target shape whose type is to be retrieved.\n\nReturns:\n    FakeAnnotation | None: The corresponding type annotation if found; otherwise, None.\n\nThis function interacts with the _SHAPE_TYPE_MAP_LOOKUP, which is a LookupDict mapping service names to their respective shape type annotations. It utilizes the names of the service, resource, and shape to fetch the correct type annotation from the predefined mapping. The mappings are established in the SHAPE_TYPE_MAP constant, which outlines the structure of botocore shapes and their associated type definitions.\n\"\"\"\n```\n  - DEPENDENCIES:\n    - mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "mypy_boto3_builder/type_maps/shape_type_map.py": "\"\"\"\nString to type annotation map to replace overriden botocore shapes.\n\nCopyright 2024 Vlad Emelianov\n\"\"\"\nfrom collections.abc import Mapping\nfrom typing import Final\nfrom mypy_boto3_builder.constants import ALL, SERVICE_RESOURCE\nfrom mypy_boto3_builder.service_name import ServiceName, ServiceNameCatalog\nfrom mypy_boto3_builder.type_annotations.fake_annotation import FakeAnnotation\nfrom mypy_boto3_builder.type_annotations.type import Type\nfrom mypy_boto3_builder.type_maps.named_unions import AttributeValueTypeDef, BlobTypeDef, PolicyDocumentTypeDef, StreamingBodyType, TableAttributeValueTypeDef, TimestampTypeDef, UniversalAttributeValueTypeDef\nfrom mypy_boto3_builder.type_maps.typed_dicts import GetTemplateOutputTypeDef\nfrom mypy_boto3_builder.utils.lookup_dict import LookupDict\nShapeTypeMap = Mapping[ServiceName, Mapping[str, Mapping[str, FakeAnnotation]]]\nSHAPE_TYPE_MAP: Final[ShapeTypeMap] = {ServiceNameCatalog.all: {ALL: {'integer': Type.int, 'long': Type.int, 'boolean': Type.bool, 'double': Type.float, 'float': Type.float, 'timestamp': TimestampTypeDef, 'blob': BlobTypeDef, 'blob_streaming': BlobTypeDef}}, ServiceNameCatalog.dynamodb: {ALL: {'AttributeValueTypeDef': UniversalAttributeValueTypeDef, 'ConditionExpressionTypeDef': Type.bool}, SERVICE_RESOURCE: {'AttributeValueTypeDef': TableAttributeValueTypeDef}, 'Table': {'AttributeValueTypeDef': TableAttributeValueTypeDef}}}\n_SHAPE_TYPE_MAP_LOOKUP: LookupDict[FakeAnnotation] = LookupDict({ServiceNameCatalog.to_str(k): v for k, v in SHAPE_TYPE_MAP.items()})\nOUTPUT_SHAPE_TYPE_MAP: ShapeTypeMap = {ServiceNameCatalog.all: {ALL: {'timestamp': Type.datetime, 'blob': Type.bytes, 'blob_streaming': StreamingBodyType}}, ServiceNameCatalog.iam: {ALL: {'policyDocumentType': PolicyDocumentTypeDef}}, ServiceNameCatalog.dynamodb: {ALL: {'AttributeValueTypeDef': AttributeValueTypeDef}, SERVICE_RESOURCE: {'AttributeValueTypeDef': TableAttributeValueTypeDef}, 'Table': {'AttributeValueTypeDef': TableAttributeValueTypeDef}}, ServiceNameCatalog.cloudformation: {ALL: {'GetTemplateOutputTypeDef': GetTemplateOutputTypeDef}}}\n_OUTPUT_SHAPE_TYPE_MAP_LOOKUP: LookupDict[FakeAnnotation] = LookupDict({ServiceNameCatalog.to_str(k): v for k, v in OUTPUT_SHAPE_TYPE_MAP.items()})"
  },
  "call_tree": {
    "tests/type_maps/test_shape_type_map.py:test_get_shape_type_stub": {
      "mypy_boto3_builder/type_maps/shape_type_map.py:get_shape_type_stub": {
        "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get": {
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_lookup": {
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_generate_lookup": {},
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_generate_products": {
              "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_join_product": {}
            }
          },
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_iterate_lookup_keys": {}
        }
      }
    },
    "tests/type_maps/test_shape_type_map.py:test_get_output_shape_type_stub": {
      "mypy_boto3_builder/type_maps/shape_type_map.py:get_output_shape_type_stub": {
        "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get": {
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_lookup": {
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_generate_lookup": {},
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_generate_products": {
              "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_join_product": {}
            }
          },
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_iterate_lookup_keys": {}
        },
        "mypy_boto3_builder/type_maps/shape_type_map.py:get_shape_type_stub": {
          "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:get": {
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_lookup": {},
            "mypy_boto3_builder/utils/lookup_dict.py:LookupDict:_iterate_lookup_keys": {}
          }
        }
      }
    }
  }
}