{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-plandefinition_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/plandefinition_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import plandefinition\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass PlanDefinitionTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        return plandefinition.PlanDefinition(js)\n    \n    def testPlanDefinition1(self):\n        inst = self.instantiate_from(\"plandefinition-example-kdn5-simplified.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PlanDefinition instance\")\n        self.implPlanDefinition1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        inst2 = plandefinition.PlanDefinition(js)\n        self.implPlanDefinition1(inst2)\n    \n    def implPlanDefinition1(self, inst):\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].definitionCanonical, \"#1111\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger, 1)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger, 8)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].id, \"action-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].textEquivalent, \"Gemcitabine 1250 mg/m\u00b2 IV over 30 minutes on days 1 and 8\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].definitionCanonical, \"#2222\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger, 1)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].id, \"action-2\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId, \"action-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship, \"concurrent-with-start\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].textEquivalent, \"CARBOplatin AUC 5 IV over 30 minutes on Day 1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].id, \"cycle-definition-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].textEquivalent, \"21-day cycle for 6 cycles\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.count, 6)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.duration, 21)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.durationUnit, \"d\")\n        self.assertEqual(inst.action[0].action[0].action[0].groupingBehavior, \"sentence-group\")\n        self.assertEqual(inst.action[0].action[0].action[0].selectionBehavior, \"exactly-one\")\n        self.assertEqual(inst.action[0].action[0].selectionBehavior, \"all\")\n        self.assertEqual(inst.action[0].selectionBehavior, \"exactly-one\")\n        self.assertEqual(inst.approvalDate.date, FHIRDate(\"2016-07-27\").date)\n        self.assertEqual(inst.approvalDate.as_json(), \"2016-07-27\")\n        self.assertEqual(inst.author[0].name, \"Lee Surprenant\")\n        self.assertEqual(inst.contained[0].id, \"1111\")\n        self.assertEqual(inst.contained[1].id, \"2222\")\n        self.assertEqual(inst.copyright, \"All rights reserved.\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"KDN5\")\n        self.assertEqual(inst.identifier[0].system, \"http://example.org/ordertemplates\")\n        self.assertEqual(inst.identifier[0].value, \"KDN5\")\n        self.assertEqual(inst.lastReviewDate.date, FHIRDate(\"2016-07-27\").date)\n        self.assertEqual(inst.lastReviewDate.as_json(), \"2016-07-27\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.publisher, \"National Comprehensive Cancer Network, Inc.\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"NCCN Guidelines for Kidney Cancer. V.2.2016\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"derived-from\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"http://www.example.org/professionals/physician_gls/PDF/kidney.pdf\")\n        self.assertEqual(inst.relatedArtifact[1].citation, \"Oudard S, et al. J Urol. 2007;177(5):1698-702\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"citation\")\n        self.assertEqual(inst.relatedArtifact[1].url, \"http://www.ncbi.nlm.nih.gov/pubmed/17437788\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"additional\")\n        self.assertEqual(inst.title, \"Gemcitabine/CARBOplatin\")\n        self.assertEqual(inst.type.text, \"Chemotherapy Order Template\")\n        self.assertEqual(inst.useContext[0].code.code, \"treamentSetting-or-diseaseStatus\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://example.org/fhir/CodeSystem/indications\")\n        self.assertEqual(inst.useContext[0].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/usagecontext-group\")\n        self.assertEqual(inst.useContext[0].extension[0].valueString, \"A\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.text, \"Metastatic\")\n        self.assertEqual(inst.useContext[1].code.code, \"disease-or-histology\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://example.org/fhir/CodeSystem/indications\")\n        self.assertEqual(inst.useContext[1].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/usagecontext-group\")\n        self.assertEqual(inst.useContext[1].extension[0].valueString, \"A\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.text, \"Collecting Duct/Medullary Subtypes\")\n        self.assertEqual(inst.useContext[2].code.code, \"focus\")\n        self.assertEqual(inst.useContext[2].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[2].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/usagecontext-group\")\n        self.assertEqual(inst.useContext[2].extension[0].valueString, \"A\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.text, \"Kidney Cancer\")\n        self.assertEqual(inst.useContext[3].code.code, \"treatmentSetting-or-diseaseStatus\")\n        self.assertEqual(inst.useContext[3].code.system, \"http://example.org/fhir/CodeSystem/indications\")\n        self.assertEqual(inst.useContext[3].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/usagecontext-group\")\n        self.assertEqual(inst.useContext[3].extension[0].valueString, \"B\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.text, \"Relapsed\")\n        self.assertEqual(inst.useContext[4].code.code, \"disease-or-histology\")\n        self.assertEqual(inst.useContext[4].code.system, \"http://example.org/fhir/CodeSystem/indications\")\n        self.assertEqual(inst.useContext[4].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/usagecontext-group\")\n        self.assertEqual(inst.useContext[4].extension[0].valueString, \"B\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.text, \"Collecting Duct/Medullary Subtypes\")\n        self.assertEqual(inst.useContext[5].code.code, \"focus\")\n        self.assertEqual(inst.useContext[5].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[5].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/usagecontext-group\")\n        self.assertEqual(inst.useContext[5].extension[0].valueString, \"B\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.text, \"Kidney Cancer \u2013 Collecting Duct/Medullary Subtypes - Metastatic\")\n        self.assertEqual(inst.version, \"1\")\n    \n    def testPlanDefinition2(self):\n        inst = self.instantiate_from(\"plandefinition-predecessor-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PlanDefinition instance\")\n        self.implPlanDefinition2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        inst2 = plandefinition.PlanDefinition(js)\n        self.implPlanDefinition2(inst2)\n    \n    def implPlanDefinition2(self, inst):\n        self.assertEqual(inst.action[0].action[0].condition[0].expression.expression, \"Should Administer Zika Virus Exposure Assessment\")\n        self.assertEqual(inst.action[0].action[0].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].action[0].definitionCanonical, \"ActivityDefinition/administer-zika-virus-exposure-assessment\")\n        self.assertEqual(inst.action[0].action[1].condition[0].expression.expression, \"Should Order Serum + Urine rRT-PCR Test\")\n        self.assertEqual(inst.action[0].action[1].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].action[1].definitionCanonical, \"ActivityDefinition/order-serum-urine-rrt-pcr-test\")\n        self.assertEqual(inst.action[0].action[2].condition[0].expression.expression, \"Should Order Serum Zika Virus IgM + Dengue Virus IgM\")\n        self.assertEqual(inst.action[0].action[2].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[2].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].action[2].definitionCanonical, \"ActivityDefinition/order-serum-zika-dengue-virus-igm\")\n        self.assertEqual(inst.action[0].action[3].condition[0].expression.expression, \"Should Consider IgM Antibody Testing\")\n        self.assertEqual(inst.action[0].action[3].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[3].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].action[3].definitionCanonical, \"ActivityDefinition/consider-igm-antibody-testing\")\n        self.assertEqual(inst.action[0].action[4].action[0].definitionCanonical, \"ActivityDefinition/provide-mosquito-prevention-advice\")\n        self.assertEqual(inst.action[0].action[4].action[1].definitionCanonical, \"ActivityDefinition/provide-contraception-advice\")\n        self.assertEqual(inst.action[0].action[4].condition[0].expression.expression, \"Should Provide Mosquito Prevention and Contraception Advice\")\n        self.assertEqual(inst.action[0].action[4].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[4].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].condition[0].expression.expression, \"Is Patient Pregnant\")\n        self.assertEqual(inst.action[0].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].title, \"Zika Virus Assessment\")\n        self.assertEqual(inst.action[0].trigger[0].name, \"patient-view\")\n        self.assertEqual(inst.action[0].trigger[0].type, \"named-event\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2016-11-14\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2016-11-14\")\n        self.assertEqual(inst.description, \"Zika Virus Management intervention describing the CDC Guidelines for Zika Virus Reporting and Management.\")\n        self.assertEqual(inst.id, \"zika-virus-intervention-initial\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"zika-virus-intervention\")\n        self.assertEqual(inst.library[0], \"Library/zika-virus-intervention-logic\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"derived-from\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"PlanDefinition/zika-virus-intervention\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"successor\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Example Zika Virus Intervention\")\n        self.assertEqual(inst.topic[0].text, \"Zika Virus Management\")\n        self.assertEqual(inst.url, \"http://example.org/PlanDefinition/zika-virus-intervention\")\n        self.assertEqual(inst.version, \"1.0.0\")\n    \n    def testPlanDefinition3(self):\n        inst = self.instantiate_from(\"plandefinition-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PlanDefinition instance\")\n        self.implPlanDefinition3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        inst2 = plandefinition.PlanDefinition(js)\n        self.implPlanDefinition3(inst2)\n    \n    def implPlanDefinition3(self, inst):\n        self.assertEqual(inst.action[0].action[0].action[0].definitionCanonical, \"#referralToMentalHealthCare\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.expression, \"Now()\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path, \"timing.event\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.expression, \"Code '261QM0850X' from SuicideRiskLogic.\\\"NUCC Provider Taxonomy\\\" display 'Adult Mental Health'\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path, \"specialty\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.expression, \"SuicideRiskLogic.ServiceRequestFulfillmentTime\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path, \"occurrenceDateTime\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.expression, \"SuicideRiskLogic.Patient\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path, \"subject\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.expression, \"SuicideRiskLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path, \"requester.agent\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.expression, \"SuicideRiskLogic.RiskAssessmentScore\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path, \"reasonCode\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.expression, \"SuicideRiskLogic.RiskAssessment\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path, \"reasonReference\")\n        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent, \"Refer to outpatient mental health program for evaluation and treatment of mental health conditions now\")\n        self.assertEqual(inst.action[0].action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[0].selectionBehavior, \"any\")\n        self.assertEqual(inst.action[0].action[0].title, \"Consults and Referrals\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].definitionCanonical, \"#citalopramPrescription\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression.expression, \"'draft'\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].path, \"status\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression.expression, \"SuicideRiskLogic.Patient\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].path, \"patient\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression.expression, \"SuicideRiskLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].path, \"prescriber\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression.expression, \"SuicideRiskLogic.RiskAssessmentScore\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].path, \"reasonCode\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression.expression, \"SuicideRiskLogic.RiskAssessment\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].path, \"reasonReference\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].textEquivalent, \"citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[1].textEquivalent, \"escitalopram 10 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[2].textEquivalent, \"fluoxetine 20 mg capsule 1 capsule oral 1 time daily now (30 tablet; 3 refills)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[3].textEquivalent, \"paroxetine 20 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[4].textEquivalent, \"sertraline 50 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.contentType, \"text/html\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.title, \"National Library of Medicine. DailyMed website. CITALOPRAM- citalopram hydrobromide tablet, film coated.\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.url, \"http://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=6daeb45c-451d-b135-bf8f-2d6dff4b6b01\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].type, \"citation\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].selectionBehavior, \"at-most-one\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[0].title, \"Selective Serotonin Reuptake Inhibitors (Choose a mazimum of one or document reasons for exception)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[1].textEquivalent, \"Dopamine Norepinephrine Reuptake Inhibitors (Choose a maximum of one or document reasons for exception)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[2].textEquivalent, \"Serotonin Norepinephrine Reuptake Inhibitors (Choose a maximum of one or doument reasons for exception)\")\n        self.assertEqual(inst.action[0].action[1].action[0].action[3].textEquivalent, \"Norepinephrine-Serotonin Modulators (Choose a maximum of one or document reasons for exception)\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.contentType, \"text/html\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].url, \"http://hl7.org/fhir/StructureDefinition/cqf-qualityOfEvidence\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].code, \"high\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].system, \"http://terminology.hl7.org/CodeSystem/evidence-quality\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.text, \"High Quality\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.title, \"Practice Guideline for the Treatment of Patients with Major Depressive Disorder\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.url, \"http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf\")\n        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].type, \"citation\")\n        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior, \"at-most-one\")\n        self.assertEqual(inst.action[0].action[1].action[0].title, \"First-Line Antidepressants\")\n        self.assertEqual(inst.action[0].action[1].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[1].selectionBehavior, \"at-most-one\")\n        self.assertEqual(inst.action[0].action[1].title, \"Medications\")\n        self.assertEqual(inst.action[0].title, \"Suicide Risk Assessment and Outpatient Management\")\n        self.assertEqual(inst.approvalDate.date, FHIRDate(\"2016-03-12\").date)\n        self.assertEqual(inst.approvalDate.as_json(), \"2016-03-12\")\n        self.assertEqual(inst.author[0].name, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.author[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.author[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.author[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.author[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.author[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"phone\")\n        self.assertEqual(inst.contact[0].telecom[0].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"415-362-4007\")\n        self.assertEqual(inst.contact[0].telecom[1].system, \"email\")\n        self.assertEqual(inst.contact[0].telecom[1].use, \"work\")\n        self.assertEqual(inst.contact[0].telecom[1].value, \"info@motivemi.com\")\n        self.assertEqual(inst.contained[0].id, \"referralToMentalHealthCare\")\n        self.assertEqual(inst.contained[1].id, \"citalopramPrescription\")\n        self.assertEqual(inst.contained[2].id, \"citalopramMedication\")\n        self.assertEqual(inst.contained[3].id, \"citalopramSubstance\")\n        self.assertEqual(inst.copyright, \"\u00a9 Copyright 2016 Motive Medical Intelligence. All rights reserved.\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2015-08-15\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2015-08-15\")\n        self.assertEqual(inst.description, \"Orders to be applied to a patient characterized as low suicide risk.\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2017-12-31\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2017-12-31\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2016-01-01\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2016-01-01\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.id, \"low-suicide-risk-order-set\")\n        self.assertEqual(inst.identifier[0].system, \"http://motivemi.com/artifacts\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"mmi:low-suicide-risk-order-set\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.lastReviewDate.date, FHIRDate(\"2016-08-15\").date)\n        self.assertEqual(inst.lastReviewDate.as_json(), \"2016-08-15\")\n        self.assertEqual(inst.library[0], \"Library/suiciderisk-orderset-logic\")\n        self.assertEqual(inst.name, \"LowSuicideRiskOrderSet\")\n        self.assertEqual(inst.publisher, \"Motive Medical Intelligence\")\n        self.assertEqual(inst.purpose, \"This order set helps ensure consistent application of appropriate orders for the care of low suicide risk patients.\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"Practice Guideline for the Treatment of Patients with Major Depressive Disorder\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"derived-from\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"ActivityDefinition/referralPrimaryCareMentalHealth\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[2].resource, \"ActivityDefinition/citalopramPrescription\")\n        self.assertEqual(inst.relatedArtifact[2].type, \"composed-of\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Low Suicide Risk Order Set\")\n        self.assertEqual(inst.topic[0].text, \"Suicide risk assessment\")\n        self.assertEqual(inst.url, \"http://motivemi.com/artifacts/PlanDefinition/low-suicide-risk-order-set\")\n        self.assertEqual(inst.usage, \"This order set should be applied after assessing a patient for suicide risk, when the findings of that assessment indicate the patient has low suicide risk.\")\n        self.assertEqual(inst.useContext[0].code.code, \"age\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"D000328\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Adult\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"https://meshb.nlm.nih.gov\")\n        self.assertEqual(inst.useContext[1].code.code, \"focus\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, \"87512008\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, \"Mild major depression\")\n        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[2].code.code, \"focus\")\n        self.assertEqual(inst.useContext[2].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code, \"40379007\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display, \"Major depression, recurrent, mild\")\n        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[3].code.code, \"focus\")\n        self.assertEqual(inst.useContext[3].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code, \"394687007\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display, \"Low suicide risk\")\n        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[4].code.code, \"focus\")\n        self.assertEqual(inst.useContext[4].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code, \"225337009\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display, \"Suicide risk assessment\")\n        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[5].code.code, \"user\")\n        self.assertEqual(inst.useContext[5].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code, \"309343006\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display, \"Physician\")\n        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.useContext[6].code.code, \"venue\")\n        self.assertEqual(inst.useContext[6].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code, \"440655000\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display, \"Outpatient environment\")\n        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.version, \"1.0.0\")\n    \n    def testPlanDefinition4(self):\n        inst = self.instantiate_from(\"plandefinition-options-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PlanDefinition instance\")\n        self.implPlanDefinition4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        inst2 = plandefinition.PlanDefinition(js)\n        self.implPlanDefinition4(inst2)\n    \n    def implPlanDefinition4(self, inst):\n        self.assertEqual(inst.action[0].action[0].definitionCanonical, \"#activitydefinition-medicationrequest-1\")\n        self.assertEqual(inst.action[0].action[0].id, \"medication-action-1\")\n        self.assertEqual(inst.action[0].action[0].title, \"Administer Medication 1\")\n        self.assertEqual(inst.action[0].action[1].definitionCanonical, \"#activitydefinition-medicationrequest-2\")\n        self.assertEqual(inst.action[0].action[1].id, \"medication-action-2\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].actionId, \"medication-action-1\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.unit, \"h\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.value, 1)\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].relationship, \"after-end\")\n        self.assertEqual(inst.action[0].action[1].title, \"Administer Medication 2\")\n        self.assertEqual(inst.action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].selectionBehavior, \"all\")\n        self.assertEqual(inst.contained[0].id, \"activitydefinition-medicationrequest-1\")\n        self.assertEqual(inst.contained[1].id, \"activitydefinition-medicationrequest-2\")\n        self.assertEqual(inst.id, \"options-example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">[Put rendering here]</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"This example illustrates relationships between actions.\")\n    \n    def testPlanDefinition5(self):\n        inst = self.instantiate_from(\"plandefinition-example-cardiology-os.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PlanDefinition instance\")\n        self.implPlanDefinition5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        inst2 = plandefinition.PlanDefinition(js)\n        self.implPlanDefinition5(inst2)\n    \n    def implPlanDefinition5(self, inst):\n        self.assertEqual(inst.action[0].action[0].action[0].definitionCanonical, \"#referralToCardiologyConsult\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.expression, \"Now()\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path, \"timing.event\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.expression, \"Code '261QM0850X' from CardiologyChestPainLogic.\\\"NUCC Provider Taxonomy\\\" display 'Adult Mental Health'\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path, \"specialty\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.expression, \"CardiologyChestPainLogic.ServiceRequestFulfillmentTime\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path, \"occurrenceDateTime\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.expression, \"CardiologyChestPainLogic.Patient\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path, \"subject\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.expression, \"CardiologyChestPainLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path, \"requester.agent\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.expression, \"CardiologyChestPainLogic.CardiologyReferralReason\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path, \"reasonCode\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.expression, \"CardiologyChestPainLogic.RiskAssessment\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path, \"reasonReference\")\n        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent, \"Referral to cardiology to evaluate chest pain (routine)\")\n        self.assertEqual(inst.action[0].action[0].action[1].definitionCanonical, \"#CollectReferralReason\")\n        self.assertEqual(inst.action[0].action[0].action[1].title, \"Reason for cardiology consultation\")\n        self.assertEqual(inst.action[0].action[0].action[2].definitionCanonical, \"#CardiologyConsultationGoal\")\n        self.assertEqual(inst.action[0].action[0].action[2].title, \"Goal of cardiology consultation\")\n        self.assertEqual(inst.action[0].action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[0].selectionBehavior, \"any\")\n        self.assertEqual(inst.action[0].action[0].title, \"Consults and Referrals\")\n        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior, \"at-most-one\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].definitionCanonical, \"#metoprololTartrate25Prescription\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].expression.expression, \"'draft'\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[0].path, \"status\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].expression.expression, \"CardiologyChestPainLogic.Patient\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[1].path, \"patient\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].expression.expression, \"CardiologyChestPainLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].dynamicValue[2].path, \"prescriber\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[0].textEquivalent, \"metoprolol tartrate 25 mg tablet 1 tablet oral 2 time daily\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].definitionCanonical, \"#metoprololTartrate50Prescription\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].expression.expression, \"'draft'\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[0].path, \"status\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].expression.expression, \"CardiologyChestPainLogic.Patient\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[1].path, \"patient\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].expression.expression, \"CardiologyChestPainLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].dynamicValue[2].path, \"prescriber\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[1].textEquivalent, \"metoprolol tartrate 50 mg tablet 1 tablet oral 2 time daily\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].definitionCanonical, \"#amlodipinePrescription\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].expression.expression, \"'draft'\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[0].path, \"status\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].expression.expression, \"CardiologyChestPainLogic.Patient\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[1].path, \"patient\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].expression.expression, \"CardiologyChestPainLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].dynamicValue[2].path, \"prescriber\")\n        self.assertEqual(inst.action[0].action[1].action[1].action[2].textEquivalent, \"amlodipine 5  tablet 1 tablet oral  daily\")\n        self.assertEqual(inst.action[0].action[1].action[1].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[1].action[1].selectionBehavior, \"at-most-one\")\n        self.assertEqual(inst.action[0].action[1].action[1].title, \"Antianginal Therapy\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].definitionCanonical, \"#nitroglycerinPrescription\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].expression.expression, \"'draft'\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[0].path, \"status\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].expression.expression, \"CardiologyChestPainLogic.Patient\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[1].path, \"patient\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].expression.expression, \"CardiologyChestPainLogic.Practitioner\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].dynamicValue[2].path, \"prescriber\")\n        self.assertEqual(inst.action[0].action[1].action[2].action[0].textEquivalent, \"nitroglycerin 0.4 mg tablet sub-lingual every 5 minutes as needed for chest pain; maximum 3 tablets\")\n        self.assertEqual(inst.action[0].action[1].action[2].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].action[1].action[2].selectionBehavior, \"at-most-one\")\n        self.assertEqual(inst.action[0].action[1].action[2].title, \"Nitroglycerin\")\n        self.assertEqual(inst.action[0].action[1].description, \"Consider the following medications for stable patients to be initiated prior to the cardiology consultation.\")\n        self.assertEqual(inst.action[0].action[1].title, \"Medications\")\n        self.assertEqual(inst.author[0].name, \"Bruce Bray MD\")\n        self.assertEqual(inst.author[1].name, \"Scott Wall MD\")\n        self.assertEqual(inst.author[2].name, \"Aiden Abidov MD, PhD\")\n        self.assertEqual(inst.contained[0].id, \"cardiology-chestPain-logic\")\n        self.assertEqual(inst.contained[1].id, \"referralToCardiologyConsult\")\n        self.assertEqual(inst.contained[2].id, \"metoprololTartrate25Prescription\")\n        self.assertEqual(inst.contained[3].id, \"metoprololTartrate25Medication\")\n        self.assertEqual(inst.contained[4].id, \"metoprololTartrate25Substance\")\n        self.assertEqual(inst.contained[5].id, \"metoprololTartrate50Prescription\")\n        self.assertEqual(inst.contained[6].id, \"metoprololTartrate50Medication\")\n        self.assertEqual(inst.contained[7].id, \"metoprololTartrate50Substance\")\n        self.assertEqual(inst.contained[8].id, \"nitroglycerinPrescription\")\n        self.assertEqual(inst.contained[9].id, \"nitroglycerinMedication\")\n        self.assertEqual(inst.copyright, \"\u00a9 Copyright Cognitive Medical Systems, Inc. 9444 Waples Street Suite 300 San Diego, CA 92121\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-08-29\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-08-29\")\n        self.assertEqual(inst.id, \"example-cardiology-os\")\n        self.assertEqual(inst.identifier[0].system, \"urn:va.gov:kbs:knart:artifact:r1\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"bb7ccea6-9744-4743-854a-bcffd87191f6\")\n        self.assertEqual(inst.identifier[1].system, \"urn:va.gov:kbs:contract:VA118-16-D-1008:to:VA-118-16-F-1008-0007\")\n        self.assertEqual(inst.identifier[1].value, \"CLIN0004AG\")\n        self.assertEqual(inst.identifier[2].system, \"urn:cognitivemedicine.com:lab:jira\")\n        self.assertEqual(inst.identifier[2].value, \"KP-914\")\n        self.assertEqual(inst.library[0], \"#cardiology-chestPain-logic\")\n        self.assertEqual(inst.name, \"ChestPainCoronaryArteryDiseaseOrderSetKNART\")\n        self.assertEqual(inst.publisher, \"Department of Veterans Affairs\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"Cardiology: Chest Pain (CP) / Coronary Artery Disease (CAD) Clinical Content White Paper\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"derived-from\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"NEED-A-URL-HERE\")\n        self.assertEqual(inst.relatedArtifact[1].display, \"Outcome CVD (coronary death, myocardial infarction, coronary insufficiency, angina, ischemic stroke, hemorrhagic stroke, transient ischemic attack, peripheral artery disease, heart failure)\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[1].url, \"https://www.framinghamheartstudy.org/risk-functions/cardiovascular-disease/10-year-risk.php\")\n        self.assertEqual(inst.relatedArtifact[2].display, \"General cardiovascular risk profile for use in primary care: the Framingham Heart Study\")\n        self.assertEqual(inst.relatedArtifact[2].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[2].url, \"https://www.framinghamheartstudy.org/risk-functions/cardiovascular-disease/10-year-risk.php\")\n        self.assertEqual(inst.relatedArtifact[3].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[3].url, \"NEED-A-URL-HERE\")\n        self.assertEqual(inst.relatedArtifact[4].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[4].url, \"NEED-A-URL-HERE\")\n        self.assertEqual(inst.relatedArtifact[5].display, \"LABEL: ASPIRIN 81 MG- aspirin tablet, coated\")\n        self.assertEqual(inst.relatedArtifact[5].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[5].url, \"https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=b4064039-2345-4227-b83d-54dc13a838d3\")\n        self.assertEqual(inst.relatedArtifact[6].display, \"LABEL: CLOPIDOGREL- clopidogrel bisulfate tablet, film coated\")\n        self.assertEqual(inst.relatedArtifact[6].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[6].url, \"https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=7fe85155-bc00-406b-b097-e8aece187a8a\")\n        self.assertEqual(inst.relatedArtifact[7].display, \"LABEL: LIPITOR- atorvastatin calcium tablet, film coated\")\n        self.assertEqual(inst.relatedArtifact[7].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[7].url, \"https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=7fe85155-bc00-406b-b097-e8aece187a8a\")\n        self.assertEqual(inst.relatedArtifact[8].display, \"LABEL: METOPROLOL SUCCINATE EXTENDED-RELEASE - metoprolol succinate tablet, film coated, extended release\")\n        self.assertEqual(inst.relatedArtifact[8].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[8].url, \"https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=2d948600-35d8-4490-983b-918bdce488c8\")\n        self.assertEqual(inst.relatedArtifact[9].display, \"LABEL: NITROGLYCERIN- nitroglycerin tablet\")\n        self.assertEqual(inst.relatedArtifact[9].type, \"justification\")\n        self.assertEqual(inst.relatedArtifact[9].url, \"https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=67bf2a15-b115-47ac-ae28-ce2dafd6b5c9\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Chest Pain (CP) - Coronary Artery Disease (CAD) Order Set KNART\")\n        self.assertEqual(inst.type.coding[0].code, \"order-set\")\n        self.assertEqual(inst.type.coding[0].display, \"Order Set\")\n        self.assertEqual(inst.type.coding[0].system, \"http://terminology.hl7.org/CodeSystem/plan-definition-type\")\n        self.assertEqual(inst.url, \"http://va.gov/kas/orderset/B5-Cardiology-ChestPainCAD-OS\")\n        self.assertEqual(inst.useContext[0].code.code, \"focus\")\n        self.assertEqual(inst.useContext[0].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"look up value\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"appropriate snomed condition\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.version, \"0.1\")\n    \n    def testPlanDefinition6(self):\n        inst = self.instantiate_from(\"plandefinition-protocol-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a PlanDefinition instance\")\n        self.implPlanDefinition6(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"PlanDefinition\", js[\"resourceType\"])\n        inst2 = plandefinition.PlanDefinition(js)\n        self.implPlanDefinition6(inst2)\n    \n    def implPlanDefinition6(self, inst):\n        self.assertEqual(inst.action[0].cardinalityBehavior, \"single\")\n        self.assertEqual(inst.action[0].condition[0].expression.expression, \"exists ([Condition: Obesity]) or not exists ([Observation: BMI] O where O.effectiveDateTime 2 years or less before Today())\")\n        self.assertEqual(inst.action[0].condition[0].expression.language, \"text/cql\")\n        self.assertEqual(inst.action[0].condition[0].kind, \"applicability\")\n        self.assertEqual(inst.action[0].definitionCanonical, \"#procedure\")\n        self.assertEqual(inst.action[0].description, \"Measure, Weight, Height, Waist, Circumference; Calculate BMI\")\n        self.assertEqual(inst.action[0].goalId[0], \"reduce-bmi-ratio\")\n        self.assertEqual(inst.action[0].requiredBehavior, \"must-unless-documented\")\n        self.assertEqual(inst.action[0].title, \"Measure BMI\")\n        self.assertEqual(inst.author[0].name, \"National Heart, Lung, and Blood Institute\")\n        self.assertEqual(inst.author[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.author[0].telecom[0].value, \"https://www.nhlbi.nih.gov/health-pro/guidelines\")\n        self.assertEqual(inst.contained[0].id, \"procedure\")\n        self.assertEqual(inst.goal[0].addresses[0].coding[0].code, \"414916001\")\n        self.assertEqual(inst.goal[0].addresses[0].coding[0].display, \"Obesity (disorder)\")\n        self.assertEqual(inst.goal[0].addresses[0].coding[0].system, \"http://snomed.info/sct\")\n        self.assertEqual(inst.goal[0].category.text, \"Treatment\")\n        self.assertEqual(inst.goal[0].description.text, \"Reduce BMI to below 25\")\n        self.assertEqual(inst.goal[0].documentation[0].display, \"Evaluation and Treatment Strategy\")\n        self.assertEqual(inst.goal[0].documentation[0].type, \"justification\")\n        self.assertEqual(inst.goal[0].documentation[0].url, \"https://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/42.htm\")\n        self.assertEqual(inst.goal[0].id, \"reduce-bmi-ratio\")\n        self.assertEqual(inst.goal[0].priority.text, \"medium-priority\")\n        self.assertEqual(inst.goal[0].start.text, \"When the patient's BMI Ratio is at or above 25\")\n        self.assertEqual(inst.goal[0].target[0].detailRange.high.unit, \"kg/m2\")\n        self.assertEqual(inst.goal[0].target[0].detailRange.high.value, 24.9)\n        self.assertEqual(inst.goal[0].target[0].due.unit, \"a\")\n        self.assertEqual(inst.goal[0].target[0].due.value, 1)\n        self.assertEqual(inst.goal[0].target[0].measure.coding[0].code, \"39156-5\")\n        self.assertEqual(inst.goal[0].target[0].measure.coding[0].display, \"Body mass index (BMI) [Ratio]\")\n        self.assertEqual(inst.goal[0].target[0].measure.coding[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.id, \"protocol-example\")\n        self.assertEqual(inst.identifier[0].system, \"http://acme.org\")\n        self.assertEqual(inst.identifier[0].value, \"example-1\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.purpose, \"Example of A medical algorithm for assessment and treatment of overweight and obesity\")\n        self.assertEqual(inst.relatedArtifact[0].display, \"Overweight and Obesity Treatment Guidelines\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"derived-from\")\n        self.assertEqual(inst.relatedArtifact[0].url, \"http://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/algorthm/algorthm.htm\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Obesity Assessment Protocol\")\n        self.assertEqual(inst.type.coding[0].code, \"clinical-protocol\")\n        self.assertEqual(inst.useContext[0].code.code, \"focus\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, \"414916001\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, \"Obesity (disorder)\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, \"http://snomed.info/sct\")\n\n",
  "GT_file_code": {
    "fhirclient/models/plandefinition.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/PlanDefinition).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass PlanDefinition(domainresource.DomainResource):\n    \"\"\" The definition of a plan for a series of actions, independent of any\n    specific patient or context.\n    \n    This resource allows for the definition of various types of plans as a\n    sharable, consumable, and executable artifact. The resource is general\n    enough to support the description of a broad range of clinical artifacts\n    such as clinical decision support rules, order sets and protocols.\n    \"\"\"\n    \n    resource_type = \"PlanDefinition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" Action defined by the plan.\n        List of `PlanDefinitionAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the plan definition was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the plan definition.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the plan definition is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.goal = None\n        \"\"\" What the plan is trying to accomplish.\n        List of `PlanDefinitionGoal` items (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the plan definition.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for plan definition (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the plan definition was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.library = None\n        \"\"\" Logic used by the plan definition.\n        List of `str` items. \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this plan definition (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this plan definition is defined.\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations.\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subjectCodeableConcept = None\n        \"\"\" Type of individual the plan definition is focused on.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subjectReference = None\n        \"\"\" Type of individual the plan definition is focused on.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate title of the plan definition.\n        Type `str`. \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this plan definition (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" E.g. Education, Treatment, Assessment.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" order-set | clinical-protocol | eca-rule | workflow-definition.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this plan definition, represented as a URI\n        (globally unique).\n        Type `str`. \"\"\"\n        \n        self.usage = None\n        \"\"\" Describes the clinical usage of the plan.\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the plan definition.\n        Type `str`. \"\"\"\n        \n        super(PlanDefinition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinition, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", PlanDefinitionAction, True, None, False),\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"goal\", \"goal\", PlanDefinitionGoal, True, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"library\", \"library\", str, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subjectCodeableConcept\", \"subjectCodeableConcept\", codeableconcept.CodeableConcept, False, \"subject\", False),\n            (\"subjectReference\", \"subjectReference\", fhirreference.FHIRReference, False, \"subject\", False),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"usage\", \"usage\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass PlanDefinitionAction(backboneelement.BackboneElement):\n    \"\"\" Action defined by the plan.\n    \n    An action or group of actions to be taken as part of the plan.\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" A sub-action.\n        List of `PlanDefinitionAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.cardinalityBehavior = None\n        \"\"\" single | multiple.\n        Type `str`. \"\"\"\n        \n        self.code = None\n        \"\"\" Code representing the meaning of the action or sub-actions.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.condition = None\n        \"\"\" Whether or not the action is applicable.\n        List of `PlanDefinitionActionCondition` items (represented as `dict` in JSON). \"\"\"\n        \n        self.definitionCanonical = None\n        \"\"\" Description of the activity to be performed.\n        Type `str`. \"\"\"\n        \n        self.definitionUri = None\n        \"\"\" Description of the activity to be performed.\n        Type `str`. \"\"\"\n        \n        self.description = None\n        \"\"\" Brief description of the action.\n        Type `str`. \"\"\"\n        \n        self.documentation = None\n        \"\"\" Supporting documentation for the intended performer of the action.\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.dynamicValue = None\n        \"\"\" Dynamic aspects of the definition.\n        List of `PlanDefinitionActionDynamicValue` items (represented as `dict` in JSON). \"\"\"\n        \n        self.goalId = None\n        \"\"\" What goals this action supports.\n        List of `str` items. \"\"\"\n        \n        self.groupingBehavior = None\n        \"\"\" visual-group | logical-group | sentence-group.\n        Type `str`. \"\"\"\n        \n        self.input = None\n        \"\"\" Input data requirements.\n        List of `DataRequirement` items (represented as `dict` in JSON). \"\"\"\n        \n        self.output = None\n        \"\"\" Output data definition.\n        List of `DataRequirement` items (represented as `dict` in JSON). \"\"\"\n        \n        self.participant = None\n        \"\"\" Who should participate in the action.\n        List of `PlanDefinitionActionParticipant` items (represented as `dict` in JSON). \"\"\"\n        \n        self.precheckBehavior = None\n        \"\"\" yes | no.\n        Type `str`. \"\"\"\n        \n        self.prefix = None\n        \"\"\" User-visible prefix for the action (e.g. 1. or A.).\n        Type `str`. \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.reason = None\n        \"\"\" Why the action should be performed.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.relatedAction = None\n        \"\"\" Relationship to another action.\n        List of `PlanDefinitionActionRelatedAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requiredBehavior = None\n        \"\"\" must | could | must-unless-documented.\n        Type `str`. \"\"\"\n        \n        self.selectionBehavior = None\n        \"\"\" any | all | all-or-none | exactly-one | at-most-one | one-or-more.\n        Type `str`. \"\"\"\n        \n        self.subjectCodeableConcept = None\n        \"\"\" Type of individual the action is focused on.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subjectReference = None\n        \"\"\" Type of individual the action is focused on.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.textEquivalent = None\n        \"\"\" Static text equivalent of the action, used if the dynamic aspects\n        cannot be interpreted by the receiving system.\n        Type `str`. \"\"\"\n        \n        self.timingAge = None\n        \"\"\" When the action should take place.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingDateTime = None\n        \"\"\" When the action should take place.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timingDuration = None\n        \"\"\" When the action should take place.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingPeriod = None\n        \"\"\" When the action should take place.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingRange = None\n        \"\"\" When the action should take place.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingTiming = None\n        \"\"\" When the action should take place.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" User-visible title.\n        Type `str`. \"\"\"\n        \n        self.transform = None\n        \"\"\" Transform to apply the template.\n        Type `str`. \"\"\"\n        \n        self.trigger = None\n        \"\"\" When the action should be triggered.\n        List of `TriggerDefinition` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" create | update | remove | fire-event.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(PlanDefinitionAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionAction, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", PlanDefinitionAction, True, None, False),\n            (\"cardinalityBehavior\", \"cardinalityBehavior\", str, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"condition\", \"condition\", PlanDefinitionActionCondition, True, None, False),\n            (\"definitionCanonical\", \"definitionCanonical\", str, False, \"definition\", False),\n            (\"definitionUri\", \"definitionUri\", str, False, \"definition\", False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"documentation\", \"documentation\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"dynamicValue\", \"dynamicValue\", PlanDefinitionActionDynamicValue, True, None, False),\n            (\"goalId\", \"goalId\", str, True, None, False),\n            (\"groupingBehavior\", \"groupingBehavior\", str, False, None, False),\n            (\"input\", \"input\", datarequirement.DataRequirement, True, None, False),\n            (\"output\", \"output\", datarequirement.DataRequirement, True, None, False),\n            (\"participant\", \"participant\", PlanDefinitionActionParticipant, True, None, False),\n            (\"precheckBehavior\", \"precheckBehavior\", str, False, None, False),\n            (\"prefix\", \"prefix\", str, False, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"reason\", \"reason\", codeableconcept.CodeableConcept, True, None, False),\n            (\"relatedAction\", \"relatedAction\", PlanDefinitionActionRelatedAction, True, None, False),\n            (\"requiredBehavior\", \"requiredBehavior\", str, False, None, False),\n            (\"selectionBehavior\", \"selectionBehavior\", str, False, None, False),\n            (\"subjectCodeableConcept\", \"subjectCodeableConcept\", codeableconcept.CodeableConcept, False, \"subject\", False),\n            (\"subjectReference\", \"subjectReference\", fhirreference.FHIRReference, False, \"subject\", False),\n            (\"textEquivalent\", \"textEquivalent\", str, False, None, False),\n            (\"timingAge\", \"timingAge\", age.Age, False, \"timing\", False),\n            (\"timingDateTime\", \"timingDateTime\", fhirdatetime.FHIRDateTime, False, \"timing\", False),\n            (\"timingDuration\", \"timingDuration\", duration.Duration, False, \"timing\", False),\n            (\"timingPeriod\", \"timingPeriod\", period.Period, False, \"timing\", False),\n            (\"timingRange\", \"timingRange\", range.Range, False, \"timing\", False),\n            (\"timingTiming\", \"timingTiming\", timing.Timing, False, \"timing\", False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"transform\", \"transform\", str, False, None, False),\n            (\"trigger\", \"trigger\", triggerdefinition.TriggerDefinition, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass PlanDefinitionActionCondition(backboneelement.BackboneElement):\n    \"\"\" Whether or not the action is applicable.\n    \n    An expression that describes applicability criteria or start/stop\n    conditions for the action.\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionActionCondition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.expression = None\n        \"\"\" Boolean-valued expression.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.kind = None\n        \"\"\" applicability | start | stop.\n        Type `str`. \"\"\"\n        \n        super(PlanDefinitionActionCondition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionActionCondition, self).elementProperties()\n        js.extend([\n            (\"expression\", \"expression\", expression.Expression, False, None, False),\n            (\"kind\", \"kind\", str, False, None, True),\n        ])\n        return js\n\n\nclass PlanDefinitionActionDynamicValue(backboneelement.BackboneElement):\n    \"\"\" Dynamic aspects of the definition.\n    \n    Customizations that should be applied to the statically defined resource.\n    For example, if the dosage of a medication must be computed based on the\n    patient's weight, a customization would be used to specify an expression\n    that calculated the weight, and the path on the resource that would contain\n    the result.\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionActionDynamicValue\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.expression = None\n        \"\"\" An expression that provides the dynamic value for the customization.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.path = None\n        \"\"\" The path to the element to be set dynamically.\n        Type `str`. \"\"\"\n        \n        super(PlanDefinitionActionDynamicValue, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionActionDynamicValue, self).elementProperties()\n        js.extend([\n            (\"expression\", \"expression\", expression.Expression, False, None, False),\n            (\"path\", \"path\", str, False, None, False),\n        ])\n        return js\n\n\nclass PlanDefinitionActionParticipant(backboneelement.BackboneElement):\n    \"\"\" Who should participate in the action.\n    \n    Indicates who should participate in performing the action described.\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionActionParticipant\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.role = None\n        \"\"\" E.g. Nurse, Surgeon, Parent.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" patient | practitioner | related-person | device.\n        Type `str`. \"\"\"\n        \n        super(PlanDefinitionActionParticipant, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionActionParticipant, self).elementProperties()\n        js.extend([\n            (\"role\", \"role\", codeableconcept.CodeableConcept, False, None, False),\n            (\"type\", \"type\", str, False, None, True),\n        ])\n        return js\n\n\nclass PlanDefinitionActionRelatedAction(backboneelement.BackboneElement):\n    \"\"\" Relationship to another action.\n    \n    A relationship to another action such as \"before\" or \"30-60 minutes after\n    start of\".\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionActionRelatedAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actionId = None\n        \"\"\" What action is this related to.\n        Type `str`. \"\"\"\n        \n        self.offsetDuration = None\n        \"\"\" Time offset for the relationship.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.offsetRange = None\n        \"\"\" Time offset for the relationship.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationship = None\n        \"\"\" before-start | before | before-end | concurrent-with-start |\n        concurrent | concurrent-with-end | after-start | after | after-end.\n        Type `str`. \"\"\"\n        \n        super(PlanDefinitionActionRelatedAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionActionRelatedAction, self).elementProperties()\n        js.extend([\n            (\"actionId\", \"actionId\", str, False, None, True),\n            (\"offsetDuration\", \"offsetDuration\", duration.Duration, False, \"offset\", False),\n            (\"offsetRange\", \"offsetRange\", range.Range, False, \"offset\", False),\n            (\"relationship\", \"relationship\", str, False, None, True),\n        ])\n        return js\n\n\nclass PlanDefinitionGoal(backboneelement.BackboneElement):\n    \"\"\" What the plan is trying to accomplish.\n    \n    Goals that describe what the activities within the plan are intended to\n    achieve. For example, weight loss, restoring an activity of daily living,\n    obtaining herd immunity via immunization, meeting a process improvement\n    objective, etc.\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionGoal\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.addresses = None\n        \"\"\" What does the goal address.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.category = None\n        \"\"\" E.g. Treatment, dietary, behavioral.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Code or text describing the goal.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.documentation = None\n        \"\"\" Supporting documentation for the goal.\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" high-priority | medium-priority | low-priority.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.start = None\n        \"\"\" When goal pursuit begins.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.target = None\n        \"\"\" Target outcome for the goal.\n        List of `PlanDefinitionGoalTarget` items (represented as `dict` in JSON). \"\"\"\n        \n        super(PlanDefinitionGoal, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionGoal, self).elementProperties()\n        js.extend([\n            (\"addresses\", \"addresses\", codeableconcept.CodeableConcept, True, None, False),\n            (\"category\", \"category\", codeableconcept.CodeableConcept, False, None, False),\n            (\"description\", \"description\", codeableconcept.CodeableConcept, False, None, True),\n            (\"documentation\", \"documentation\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"priority\", \"priority\", codeableconcept.CodeableConcept, False, None, False),\n            (\"start\", \"start\", codeableconcept.CodeableConcept, False, None, False),\n            (\"target\", \"target\", PlanDefinitionGoalTarget, True, None, False),\n        ])\n        return js\n\n\nclass PlanDefinitionGoalTarget(backboneelement.BackboneElement):\n    \"\"\" Target outcome for the goal.\n    \n    Indicates what should be done and within what timeframe.\n    \"\"\"\n    \n    resource_type = \"PlanDefinitionGoalTarget\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.detailCodeableConcept = None\n        \"\"\" The target value to be achieved.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailQuantity = None\n        \"\"\" The target value to be achieved.\n        Type `Quantity` (represented as `dict` in JSON). \"\"\"\n        \n        self.detailRange = None\n        \"\"\" The target value to be achieved.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.due = None\n        \"\"\" Reach goal within.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.measure = None\n        \"\"\" The parameter whose value is to be tracked.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(PlanDefinitionGoalTarget, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(PlanDefinitionGoalTarget, self).elementProperties()\n        js.extend([\n            (\"detailCodeableConcept\", \"detailCodeableConcept\", codeableconcept.CodeableConcept, False, \"detail\", False),\n            (\"detailQuantity\", \"detailQuantity\", quantity.Quantity, False, \"detail\", False),\n            (\"detailRange\", \"detailRange\", range.Range, False, \"detail\", False),\n            (\"due\", \"due\", duration.Duration, False, None, False),\n            (\"measure\", \"measure\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nfrom . import age\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/plandefinition.py": {
      "PlanDefinition.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a PlanDefinition instance.\n\n        This constructor sets up the attributes necessary for a plan definition resource, including \n        properties like action, approvalDate, author, and more, which are designed to outline a series \n        of actions independent of any specific patient or context. The parameters include a JSON \n        dictionary for initialization and a strict mode to control error handling for invalid variables.\n\n        :param jsondict: Optional JSON dictionary for initializing the instance's properties.\n        :param strict: If set to True (the default), raises a TypeError for any invalid property \n                       values; otherwise, it will accept them without raising an error.\n\n        Attributes:\n            action: Specifies actions defined by the plan as a list of PlanDefinitionAction items.\n            approvalDate: Indicates when the plan was approved, stored as a FHIRDate.\n            author: Holds details of the content author(s), represented as a list of ContactDetail.\n            contact: Contains publisher contact details, also represented as a list of ContactDetail.\n            copyright: Describes usage and publishing restrictions.\n            date: Records when the plan was last changed, stored as a FHIRDateTime.\n            description: Provides a natural language description of the plan.\n            editor, endorser, reviewer: Lists of individuals or organizations involved in editing, endorsing, \n            or reviewing this plan, represented as lists of ContactDetail.\n            effectivePeriod, goal, identifier, jurisdiction, lastReviewDate, library, name, publisher,\n            purpose, relatedArtifact, status, subjectCodeableConcept, subjectReference, subtitle, title,\n            topic, type, url, usage, useContext, version: Other properties relevant to the plan definition \n            as defined in the FHIR specification.\n\n        This class inherits from DomainResource, emphasizing the resource's role in defining various types \n        of clinical procedures and protocols.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.action = None\n        ' Action defined by the plan.\\n        List of `PlanDefinitionAction` items (represented as `dict` in JSON). '\n        self.approvalDate = None\n        ' When the plan definition was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.description = None\n        ' Natural language description of the plan definition.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the plan definition is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.goal = None\n        ' What the plan is trying to accomplish.\\n        List of `PlanDefinitionGoal` items (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Additional identifier for the plan definition.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for plan definition (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the plan definition was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.library = None\n        ' Logic used by the plan definition.\\n        List of `str` items. '\n        self.name = None\n        ' Name for this plan definition (computer friendly).\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this plan definition is defined.\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations.\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subjectCodeableConcept = None\n        ' Type of individual the plan definition is focused on.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subjectReference = None\n        ' Type of individual the plan definition is focused on.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subtitle = None\n        ' Subordinate title of the plan definition.\\n        Type `str`. '\n        self.title = None\n        ' Name for this plan definition (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' E.g. Education, Treatment, Assessment.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' order-set | clinical-protocol | eca-rule | workflow-definition.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.url = None\n        ' Canonical identifier for this plan definition, represented as a URI\\n        (globally unique).\\n        Type `str`. '\n        self.usage = None\n        ' Describes the clinical usage of the plan.\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the plan definition.\\n        Type `str`. '\n        super(PlanDefinition, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a PlanDefinition instance.\n\nThis constructor sets up the attributes necessary for a plan definition resource, including \nproperties like action, approvalDate, author, and more, which are designed to outline a series \nof actions independent of any specific patient or context. The parameters include a JSON \ndictionary for initialization and a strict mode to control error handling for invalid variables.\n\n:param jsondict: Optional JSON dictionary for initializing the instance's properties.\n:param strict: If set to True (the default), raises a TypeError for any invalid property \n               values; otherwise, it will accept them without raising an error.\n\nAttributes:\n    action: Specifies actions defined by the plan as a list of PlanDefinitionAction items.\n    approvalDate: Indicates when the plan was approved, stored as a FHIRDate.\n    author: Holds details of the content author(s), represented as a list of ContactDetail.\n    contact: Contains publisher contact details, also represented as a list of ContactDetail.\n    copyright: Describes usage and publishing restrictions.\n    date: Records when the plan was last changed, stored as a FHIRDateTime.\n    description: Provides a natural language description of the plan.\n    editor, endorser, reviewer: Lists of individuals or organizations involved in editing, endorsing, \n    or reviewing this plan, represented as lists of ContactDetail.\n    effectivePeriod, goal, identifier, jurisdiction, lastReviewDate, library, name, publisher,\n    purpose, relatedArtifact, status, subjectCodeableConcept, subjectReference, subtitle, title,\n    topic, type, url, usage, useContext, version: Other properties relevant to the plan definition \n    as defined in the FHIR specification.\n\nThis class inherits from DomainResource, emphasizing the resource's role in defining various types \nof clinical procedures and protocols.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class PlanDefinition(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a FHIRDate instance with an optional JSON-compatible date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in FHIR format (e.g., \"2024-01-01\") or None. If provided, the string is validated against a regular expression defined in the class and then parsed into a Python date representation.\n  \nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected FHIR date format as validated by the _REGEX constant.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation of the JSON value. It is initialized to None if jsonval is not provided or not valid.\n- origval (Union[str, None]): Retains the original JSON string used for initialization, allowing access to the unmodified input.\n\nConstants:\n- _REGEX: A regular expression pattern compiled to ensure that the provided date string conforms to the FHIR date format. This pattern is critical for validation before parsing the date.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initialize a FHIRDate instance with an optional JSON-compatible date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in FHIR format (e.g., \"2024-01-01\") or None. If provided, the string is validated against a regular expression defined in the class and then parsed into a Python date representation.\n  \nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected FHIR date format as validated by the _REGEX constant.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation of the JSON value. It is initialized to None if jsonval is not provided or not valid.\n- origval (Union[str, None]): Retains the original JSON string used for initialization, allowing access to the unmodified input.\n\nConstants:\n- _REGEX: A regular expression pattern compiled to ensure that the provided date string conforms to the FHIR date format. This pattern is critical for validation before parsing the date.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of the FHIRDate class. If the original value (`origval`) was provided during initialization, it will be returned; otherwise, it will return the ISO 8601 string representation of the date (via the `isostring` property). This provides a means to retrieve the exact input used when creating the instance, or a standardized version if the original was not available.\n\nAttributes:\n- `origval`: Stores the original JSON string used for initialization. If `None`, the method falls back to returning the `isostring`.\n\nReturn:\n- Union[str, None]: Either the original JSON string or the ISO 8601 string representation of the date.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of the FHIRDate class. If the original value (`origval`) was provided during initialization, it will be returned; otherwise, it will return the ISO 8601 string representation of the date (via the `isostring` property). This provides a means to retrieve the exact input used when creating the instance, or a standardized version if the original was not available.\n\nAttributes:\n- `origval`: Stores the original JSON string used for initialization. If `None`, the method falls back to returning the `isostring`.\n\nReturn:\n- Union[str, None]: Either the original JSON string or the ISO 8601 string representation of the date.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initialize a new instance of FHIRDateTime.\n\nThis constructor accepts an optional JSON value representing a FHIR datetime. It initializes\nthe `datetime` attribute to `None` and calls the superclass constructor from FHIRDate to handle\nthe JSON value. \n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime, or None. This value\n  is passed to the superclass for parsing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute will hold the parsed datetime\n  value, initialized to None. It will be populated based on the provided jsonval in the superclass\n  initialization.\n\nDependencies:\n- The class inherits from FHIRDate, which manages the JSON input validation and parsing.\n- The `datetime` module is used for managing datetime objects.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initialize a new instance of FHIRDateTime.\n\nThis constructor accepts an optional JSON value representing a FHIR datetime. It initializes\nthe `datetime` attribute to `None` and calls the superclass constructor from FHIRDate to handle\nthe JSON value. \n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime, or None. This value\n  is passed to the superclass for parsing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute will hold the parsed datetime\n  value, initialized to None. It will be populated based on the provided jsonval in the superclass\n  initialization.\n\nDependencies:\n- The class inherits from FHIRDate, which manages the JSON input validation and parsing.\n- The `datetime` module is used for managing datetime objects.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Returns the JSON representation of the FHIRAbstractResource instance. This method overrides the base class's `as_json` method to include the `resourceType` attribute specific to the FHIRAbstractResource class. \n\nNo parameters are accepted. The method returns a dictionary containing the JSON representation of the resource, including the `resourceType`, which is defined as a class attribute (`resource_type`) set to 'FHIRAbstractResource'. This ensures that any serialization of the resource will include its type, which is essential for correctly identifying the resource in FHIR communications.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Returns the JSON representation of the FHIRAbstractResource instance. This method overrides the base class's `as_json` method to include the `resourceType` attribute specific to the FHIRAbstractResource class. \n\nNo parameters are accepted. The method returns a dictionary containing the JSON representation of the resource, including the `resourceType`, which is defined as a class attribute (`resource_type`) set to 'FHIRAbstractResource'. This ensures that any serialization of the resource will include its type, which is essential for correctly identifying the resource in FHIR communications.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/plandefinition_test.py:PlanDefinitionTests:testPlanDefinition1": {
      "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
        "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/plandefinition_test.py:PlanDefinitionTests:implPlanDefinition1": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/plandefinition_test.py:PlanDefinitionTests:testPlanDefinition2": {
      "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
        "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/plandefinition_test.py:PlanDefinitionTests:implPlanDefinition2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/plandefinition_test.py:PlanDefinitionTests:testPlanDefinition3": {
      "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
        "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/plandefinition_test.py:PlanDefinitionTests:implPlanDefinition3": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {},
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/plandefinition_test.py:PlanDefinitionTests:testPlanDefinition4": {
      "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
        "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/plandefinition_test.py:PlanDefinitionTests:implPlanDefinition4": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/plandefinition_test.py:PlanDefinitionTests:testPlanDefinition5": {
      "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
        "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/plandefinition_test.py:PlanDefinitionTests:implPlanDefinition5": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {},
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/plandefinition_test.py:PlanDefinitionTests:testPlanDefinition6": {
      "tests/models/plandefinition_test.py:PlanDefinitionTests:instantiate_from": {
        "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/plandefinition_test.py:PlanDefinitionTests:implPlanDefinition6": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/plandefinition.py:PlanDefinition:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/plandefinition.py:PlanDefinition:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-plandefinition_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 plandefinition.py\n            \u2514\u2500\u2500 PlanDefinition.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe PlanDefinition Test Module is designed to validate the structure, content, and functionality of FHIR PlanDefinition resources against the HL7 FHIR 4.0.1 specification. It ensures that PlanDefinition instances, which define actionable healthcare plans such as care pathways, protocols, or order sets, conform to required standards and provide the expected logical groupings, actions, conditions, and interdependencies. By programmatically testing compliance with the FHIR standard, the module helps healthcare developers confirm the accuracy and reliability of decision support tools, treatment protocols, and clinical order sets. This ensures consistency and integrity in workflows, enabling accurate representation of complex clinical scenarios in healthcare systems.\n\n## FILE 1: fhirclient/models/plandefinition.py\n\n- CLASS METHOD: PlanDefinition.__init__\n  - CLASS SIGNATURE: class PlanDefinition(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a PlanDefinition instance.\n\nThis constructor sets up the attributes necessary for a plan definition resource, including \nproperties like action, approvalDate, author, and more, which are designed to outline a series \nof actions independent of any specific patient or context. The parameters include a JSON \ndictionary for initialization and a strict mode to control error handling for invalid variables.\n\n:param jsondict: Optional JSON dictionary for initializing the instance's properties.\n:param strict: If set to True (the default), raises a TypeError for any invalid property \n               values; otherwise, it will accept them without raising an error.\n\nAttributes:\n    action: Specifies actions defined by the plan as a list of PlanDefinitionAction items.\n    approvalDate: Indicates when the plan was approved, stored as a FHIRDate.\n    author: Holds details of the content author(s), represented as a list of ContactDetail.\n    contact: Contains publisher contact details, also represented as a list of ContactDetail.\n    copyright: Describes usage and publishing restrictions.\n    date: Records when the plan was last changed, stored as a FHIRDateTime.\n    description: Provides a natural language description of the plan.\n    editor, endorser, reviewer: Lists of individuals or organizations involved in editing, endorsing, \n    or reviewing this plan, represented as lists of ContactDetail.\n    effectivePeriod, goal, identifier, jurisdiction, lastReviewDate, library, name, publisher,\n    purpose, relatedArtifact, status, subjectCodeableConcept, subjectReference, subtitle, title,\n    topic, type, url, usage, useContext, version: Other properties relevant to the plan definition \n    as defined in the FHIR specification.\n\nThis class inherits from DomainResource, emphasizing the resource's role in defining various types \nof clinical procedures and protocols.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a FHIRDate instance with an optional JSON-compatible date string.\n\nParameters:\n- jsonval (Union[str, None]): A string representing a date in FHIR format (e.g., \"2024-01-01\") or None. If provided, the string is validated against a regular expression defined in the class and then parsed into a Python date representation.\n  \nRaises:\n- TypeError: If jsonval is not a string when provided.\n- ValueError: If jsonval does not match the expected FHIR date format as validated by the _REGEX constant.\n\nAttributes:\n- date (Union[datetime.date, datetime.datetime, datetime.time, None]): Stores the parsed date representation of the JSON value. It is initialized to None if jsonval is not provided or not valid.\n- origval (Union[str, None]): Retains the original JSON string used for initialization, allowing access to the unmodified input.\n\nConstants:\n- _REGEX: A regular expression pattern compiled to ensure that the provided date string conforms to the FHIR date format. This pattern is critical for validation before parsing the date.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of the FHIRDate class. If the original value (`origval`) was provided during initialization, it will be returned; otherwise, it will return the ISO 8601 string representation of the date (via the `isostring` property). This provides a means to retrieve the exact input used when creating the instance, or a standardized version if the original was not available.\n\nAttributes:\n- `origval`: Stores the original JSON string used for initialization. If `None`, the method falls back to returning the `isostring`.\n\nReturn:\n- Union[str, None]: Either the original JSON string or the ISO 8601 string representation of the date.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a new instance of FHIRDateTime.\n\nThis constructor accepts an optional JSON value representing a FHIR datetime. It initializes\nthe `datetime` attribute to `None` and calls the superclass constructor from FHIRDate to handle\nthe JSON value. \n\nParameters:\n- jsonval (Union[str, None]): A string representation of a FHIR datetime, or None. This value\n  is passed to the superclass for parsing.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): This attribute will hold the parsed datetime\n  value, initialized to None. It will be populated based on the provided jsonval in the superclass\n  initialization.\n\nDependencies:\n- The class inherits from FHIRDate, which manages the JSON input validation and parsing.\n- The `datetime` module is used for managing datetime objects.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the JSON representation of the FHIRAbstractResource instance. This method overrides the base class's `as_json` method to include the `resourceType` attribute specific to the FHIRAbstractResource class. \n\nNo parameters are accepted. The method returns a dictionary containing the JSON representation of the resource, including the `resourceType`, which is defined as a class attribute (`resource_type`) set to 'FHIRAbstractResource'. This ensures that any serialization of the resource will include its type, which is essential for correctly identifying the resource in FHIR communications.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/plandefinition.py": "from . import domainresource\n\nclass PlanDefinition(domainresource.DomainResource):\n    \"\"\" The definition of a plan for a series of actions, independent of any\n    specific patient or context.\n    \n    This resource allows for the definition of various types of plans as a\n    sharable, consumable, and executable artifact. The resource is general\n    enough to support the description of a broad range of clinical artifacts\n    such as clinical decision support rules, order sets and protocols.\n    \"\"\"\n    resource_type = 'PlanDefinition'\n\n    def elementProperties(self):\n        js = super(PlanDefinition, self).elementProperties()\n        js.extend([('action', 'action', PlanDefinitionAction, True, None, False), ('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('description', 'description', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('goal', 'goal', PlanDefinitionGoal, True, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('library', 'library', str, True, None, False), ('name', 'name', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('status', 'status', str, False, None, True), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('subtitle', 'subtitle', str, False, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False), ('url', 'url', str, False, None, False), ('usage', 'usage', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass PlanDefinitionAction(backboneelement.BackboneElement):\n    \"\"\" Action defined by the plan.\n    \n    An action or group of actions to be taken as part of the plan.\n    \"\"\"\n    resource_type = 'PlanDefinitionAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' A sub-action.\\n        List of `PlanDefinitionAction` items (represented as `dict` in JSON). '\n        self.cardinalityBehavior = None\n        ' single | multiple.\\n        Type `str`. '\n        self.code = None\n        ' Code representing the meaning of the action or sub-actions.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.condition = None\n        ' Whether or not the action is applicable.\\n        List of `PlanDefinitionActionCondition` items (represented as `dict` in JSON). '\n        self.definitionCanonical = None\n        ' Description of the activity to be performed.\\n        Type `str`. '\n        self.definitionUri = None\n        ' Description of the activity to be performed.\\n        Type `str`. '\n        self.description = None\n        ' Brief description of the action.\\n        Type `str`. '\n        self.documentation = None\n        ' Supporting documentation for the intended performer of the action.\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.dynamicValue = None\n        ' Dynamic aspects of the definition.\\n        List of `PlanDefinitionActionDynamicValue` items (represented as `dict` in JSON). '\n        self.goalId = None\n        ' What goals this action supports.\\n        List of `str` items. '\n        self.groupingBehavior = None\n        ' visual-group | logical-group | sentence-group.\\n        Type `str`. '\n        self.input = None\n        ' Input data requirements.\\n        List of `DataRequirement` items (represented as `dict` in JSON). '\n        self.output = None\n        ' Output data definition.\\n        List of `DataRequirement` items (represented as `dict` in JSON). '\n        self.participant = None\n        ' Who should participate in the action.\\n        List of `PlanDefinitionActionParticipant` items (represented as `dict` in JSON). '\n        self.precheckBehavior = None\n        ' yes | no.\\n        Type `str`. '\n        self.prefix = None\n        ' User-visible prefix for the action (e.g. 1. or A.).\\n        Type `str`. '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.reason = None\n        ' Why the action should be performed.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.relatedAction = None\n        ' Relationship to another action.\\n        List of `PlanDefinitionActionRelatedAction` items (represented as `dict` in JSON). '\n        self.requiredBehavior = None\n        ' must | could | must-unless-documented.\\n        Type `str`. '\n        self.selectionBehavior = None\n        ' any | all | all-or-none | exactly-one | at-most-one | one-or-more.\\n        Type `str`. '\n        self.subjectCodeableConcept = None\n        ' Type of individual the action is focused on.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subjectReference = None\n        ' Type of individual the action is focused on.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.textEquivalent = None\n        ' Static text equivalent of the action, used if the dynamic aspects\\n        cannot be interpreted by the receiving system.\\n        Type `str`. '\n        self.timingAge = None\n        ' When the action should take place.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.timingDateTime = None\n        ' When the action should take place.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timingDuration = None\n        ' When the action should take place.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.timingPeriod = None\n        ' When the action should take place.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.timingRange = None\n        ' When the action should take place.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.timingTiming = None\n        ' When the action should take place.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.title = None\n        ' User-visible title.\\n        Type `str`. '\n        self.transform = None\n        ' Transform to apply the template.\\n        Type `str`. '\n        self.trigger = None\n        ' When the action should be triggered.\\n        List of `TriggerDefinition` items (represented as `dict` in JSON). '\n        self.type = None\n        ' create | update | remove | fire-event.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(PlanDefinitionAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionAction, self).elementProperties()\n        js.extend([('action', 'action', PlanDefinitionAction, True, None, False), ('cardinalityBehavior', 'cardinalityBehavior', str, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('condition', 'condition', PlanDefinitionActionCondition, True, None, False), ('definitionCanonical', 'definitionCanonical', str, False, 'definition', False), ('definitionUri', 'definitionUri', str, False, 'definition', False), ('description', 'description', str, False, None, False), ('documentation', 'documentation', relatedartifact.RelatedArtifact, True, None, False), ('dynamicValue', 'dynamicValue', PlanDefinitionActionDynamicValue, True, None, False), ('goalId', 'goalId', str, True, None, False), ('groupingBehavior', 'groupingBehavior', str, False, None, False), ('input', 'input', datarequirement.DataRequirement, True, None, False), ('output', 'output', datarequirement.DataRequirement, True, None, False), ('participant', 'participant', PlanDefinitionActionParticipant, True, None, False), ('precheckBehavior', 'precheckBehavior', str, False, None, False), ('prefix', 'prefix', str, False, None, False), ('priority', 'priority', str, False, None, False), ('reason', 'reason', codeableconcept.CodeableConcept, True, None, False), ('relatedAction', 'relatedAction', PlanDefinitionActionRelatedAction, True, None, False), ('requiredBehavior', 'requiredBehavior', str, False, None, False), ('selectionBehavior', 'selectionBehavior', str, False, None, False), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('textEquivalent', 'textEquivalent', str, False, None, False), ('timingAge', 'timingAge', age.Age, False, 'timing', False), ('timingDateTime', 'timingDateTime', fhirdatetime.FHIRDateTime, False, 'timing', False), ('timingDuration', 'timingDuration', duration.Duration, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('timingRange', 'timingRange', range.Range, False, 'timing', False), ('timingTiming', 'timingTiming', timing.Timing, False, 'timing', False), ('title', 'title', str, False, None, False), ('transform', 'transform', str, False, None, False), ('trigger', 'trigger', triggerdefinition.TriggerDefinition, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass PlanDefinitionActionCondition(backboneelement.BackboneElement):\n    \"\"\" Whether or not the action is applicable.\n    \n    An expression that describes applicability criteria or start/stop\n    conditions for the action.\n    \"\"\"\n    resource_type = 'PlanDefinitionActionCondition'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.expression = None\n        ' Boolean-valued expression.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.kind = None\n        ' applicability | start | stop.\\n        Type `str`. '\n        super(PlanDefinitionActionCondition, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionActionCondition, self).elementProperties()\n        js.extend([('expression', 'expression', expression.Expression, False, None, False), ('kind', 'kind', str, False, None, True)])\n        return js\n\nclass PlanDefinitionActionDynamicValue(backboneelement.BackboneElement):\n    \"\"\" Dynamic aspects of the definition.\n    \n    Customizations that should be applied to the statically defined resource.\n    For example, if the dosage of a medication must be computed based on the\n    patient's weight, a customization would be used to specify an expression\n    that calculated the weight, and the path on the resource that would contain\n    the result.\n    \"\"\"\n    resource_type = 'PlanDefinitionActionDynamicValue'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.expression = None\n        ' An expression that provides the dynamic value for the customization.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.path = None\n        ' The path to the element to be set dynamically.\\n        Type `str`. '\n        super(PlanDefinitionActionDynamicValue, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionActionDynamicValue, self).elementProperties()\n        js.extend([('expression', 'expression', expression.Expression, False, None, False), ('path', 'path', str, False, None, False)])\n        return js\n\nclass PlanDefinitionActionParticipant(backboneelement.BackboneElement):\n    \"\"\" Who should participate in the action.\n    \n    Indicates who should participate in performing the action described.\n    \"\"\"\n    resource_type = 'PlanDefinitionActionParticipant'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.role = None\n        ' E.g. Nurse, Surgeon, Parent.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.type = None\n        ' patient | practitioner | related-person | device.\\n        Type `str`. '\n        super(PlanDefinitionActionParticipant, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionActionParticipant, self).elementProperties()\n        js.extend([('role', 'role', codeableconcept.CodeableConcept, False, None, False), ('type', 'type', str, False, None, True)])\n        return js\n\nclass PlanDefinitionActionRelatedAction(backboneelement.BackboneElement):\n    \"\"\" Relationship to another action.\n    \n    A relationship to another action such as \"before\" or \"30-60 minutes after\n    start of\".\n    \"\"\"\n    resource_type = 'PlanDefinitionActionRelatedAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.actionId = None\n        ' What action is this related to.\\n        Type `str`. '\n        self.offsetDuration = None\n        ' Time offset for the relationship.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.offsetRange = None\n        ' Time offset for the relationship.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.relationship = None\n        ' before-start | before | before-end | concurrent-with-start |\\n        concurrent | concurrent-with-end | after-start | after | after-end.\\n        Type `str`. '\n        super(PlanDefinitionActionRelatedAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionActionRelatedAction, self).elementProperties()\n        js.extend([('actionId', 'actionId', str, False, None, True), ('offsetDuration', 'offsetDuration', duration.Duration, False, 'offset', False), ('offsetRange', 'offsetRange', range.Range, False, 'offset', False), ('relationship', 'relationship', str, False, None, True)])\n        return js\n\nclass PlanDefinitionGoal(backboneelement.BackboneElement):\n    \"\"\" What the plan is trying to accomplish.\n    \n    Goals that describe what the activities within the plan are intended to\n    achieve. For example, weight loss, restoring an activity of daily living,\n    obtaining herd immunity via immunization, meeting a process improvement\n    objective, etc.\n    \"\"\"\n    resource_type = 'PlanDefinitionGoal'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.addresses = None\n        ' What does the goal address.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.category = None\n        ' E.g. Treatment, dietary, behavioral.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.description = None\n        ' Code or text describing the goal.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.documentation = None\n        ' Supporting documentation for the goal.\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' high-priority | medium-priority | low-priority.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.start = None\n        ' When goal pursuit begins.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.target = None\n        ' Target outcome for the goal.\\n        List of `PlanDefinitionGoalTarget` items (represented as `dict` in JSON). '\n        super(PlanDefinitionGoal, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionGoal, self).elementProperties()\n        js.extend([('addresses', 'addresses', codeableconcept.CodeableConcept, True, None, False), ('category', 'category', codeableconcept.CodeableConcept, False, None, False), ('description', 'description', codeableconcept.CodeableConcept, False, None, True), ('documentation', 'documentation', relatedartifact.RelatedArtifact, True, None, False), ('priority', 'priority', codeableconcept.CodeableConcept, False, None, False), ('start', 'start', codeableconcept.CodeableConcept, False, None, False), ('target', 'target', PlanDefinitionGoalTarget, True, None, False)])\n        return js\n\nclass PlanDefinitionGoalTarget(backboneelement.BackboneElement):\n    \"\"\" Target outcome for the goal.\n    \n    Indicates what should be done and within what timeframe.\n    \"\"\"\n    resource_type = 'PlanDefinitionGoalTarget'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.detailCodeableConcept = None\n        ' The target value to be achieved.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.detailQuantity = None\n        ' The target value to be achieved.\\n        Type `Quantity` (represented as `dict` in JSON). '\n        self.detailRange = None\n        ' The target value to be achieved.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.due = None\n        ' Reach goal within.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.measure = None\n        ' The parameter whose value is to be tracked.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(PlanDefinitionGoalTarget, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(PlanDefinitionGoalTarget, self).elementProperties()\n        js.extend([('detailCodeableConcept', 'detailCodeableConcept', codeableconcept.CodeableConcept, False, 'detail', False), ('detailQuantity', 'detailQuantity', quantity.Quantity, False, 'detail', False), ('detailRange', 'detailRange', range.Range, False, 'detail', False), ('due', 'due', duration.Duration, False, None, False), ('measure', 'measure', codeableconcept.CodeableConcept, False, None, False)])\n        return js\nfrom . import age\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import datarequirement\nfrom . import duration\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import quantity\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing\nfrom . import triggerdefinition\nfrom . import usagecontext",
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}