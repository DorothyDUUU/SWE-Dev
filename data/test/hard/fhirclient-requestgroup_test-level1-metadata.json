{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-requestgroup_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/requestgroup_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import requestgroup\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass RequestGroupTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"RequestGroup\", js[\"resourceType\"])\n        return requestgroup.RequestGroup(js)\n    \n    def testRequestGroup1(self):\n        inst = self.instantiate_from(\"requestgroup-kdn5-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a RequestGroup instance\")\n        self.implRequestGroup1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"RequestGroup\", js[\"resourceType\"])\n        inst2 = requestgroup.RequestGroup(js)\n        self.implRequestGroup1(inst2)\n    \n    def implRequestGroup1(self, inst):\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger, 1)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger, 8)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].id, \"action-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].textEquivalent, \"Gemcitabine 1250 mg/m\u00b2 IV over 30 minutes on days 1 and 8\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url, \"day\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger, 1)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].url, \"http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].id, \"action-2\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId, \"action-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship, \"concurrent-with-start\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].textEquivalent, \"CARBOplatin AUC 5 IV over 30 minutes on Day 1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].id, \"cycle-definition-1\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].textEquivalent, \"21-day cycle for 6 cycles\")\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.count, 6)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.duration, 21)\n        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.durationUnit, \"d\")\n        self.assertEqual(inst.action[0].action[0].action[0].groupingBehavior, \"sentence-group\")\n        self.assertEqual(inst.action[0].action[0].action[0].selectionBehavior, \"exactly-one\")\n        self.assertEqual(inst.action[0].action[0].selectionBehavior, \"all\")\n        self.assertEqual(inst.action[0].selectionBehavior, \"exactly-one\")\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2017-03-06T17:31:00Z\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2017-03-06T17:31:00Z\")\n        self.assertEqual(inst.contained[0].id, \"1111\")\n        self.assertEqual(inst.contained[1].id, \"2222\")\n        self.assertEqual(inst.id, \"kdn5-example\")\n        self.assertEqual(inst.identifier[0].value, \"requestgroup-kdn5\")\n        self.assertEqual(inst.instantiatesCanonical[0], \"PlanDefinition/KDN5\")\n        self.assertEqual(inst.intent, \"plan\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Administer gemcitabine and carboplatin.</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n    \n    def testRequestGroup2(self):\n        inst = self.instantiate_from(\"requestgroup-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a RequestGroup instance\")\n        self.implRequestGroup2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"RequestGroup\", js[\"resourceType\"])\n        inst2 = requestgroup.RequestGroup(js)\n        self.implRequestGroup2(inst2)\n    \n    def implRequestGroup2(self, inst):\n        self.assertEqual(inst.action[0].action[0].description, \"Administer medication 1\")\n        self.assertEqual(inst.action[0].action[0].id, \"medication-action-1\")\n        self.assertEqual(inst.action[0].action[0].type.coding[0].code, \"create\")\n        self.assertEqual(inst.action[0].action[1].description, \"Administer medication 2\")\n        self.assertEqual(inst.action[0].action[1].id, \"medication-action-2\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].actionId, \"medication-action-1\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.unit, \"h\")\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.value, 1)\n        self.assertEqual(inst.action[0].action[1].relatedAction[0].relationship, \"after-end\")\n        self.assertEqual(inst.action[0].action[1].type.coding[0].code, \"create\")\n        self.assertEqual(inst.action[0].cardinalityBehavior, \"single\")\n        self.assertEqual(inst.action[0].description, \"Administer medications at the appropriate time\")\n        self.assertEqual(inst.action[0].groupingBehavior, \"logical-group\")\n        self.assertEqual(inst.action[0].precheckBehavior, \"yes\")\n        self.assertEqual(inst.action[0].prefix, \"1\")\n        self.assertEqual(inst.action[0].requiredBehavior, \"must\")\n        self.assertEqual(inst.action[0].selectionBehavior, \"all\")\n        self.assertEqual(inst.action[0].textEquivalent, \"Administer medication 1, followed an hour later by medication 2\")\n        self.assertEqual(inst.action[0].timingDateTime.datetime, FHIRDateTime(\"2017-03-06T19:00:00Z\").datetime)\n        self.assertEqual(inst.action[0].timingDateTime.as_json(), \"2017-03-06T19:00:00Z\")\n        self.assertEqual(inst.action[0].title, \"Administer Medications\")\n        self.assertEqual(inst.authoredOn.datetime, FHIRDateTime(\"2017-03-06T17:31:00Z\").datetime)\n        self.assertEqual(inst.authoredOn.as_json(), \"2017-03-06T17:31:00Z\")\n        self.assertEqual(inst.contained[0].id, \"medicationrequest-1\")\n        self.assertEqual(inst.contained[1].id, \"medicationrequest-2\")\n        self.assertEqual(inst.groupIdentifier.system, \"http://example.org/treatment-group\")\n        self.assertEqual(inst.groupIdentifier.value, \"00001\")\n        self.assertEqual(inst.id, \"example\")\n        self.assertEqual(inst.identifier[0].value, \"requestgroup-1\")\n        self.assertEqual(inst.intent, \"plan\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.note[0].text, \"Additional notes about the request group\")\n        self.assertEqual(inst.priority, \"routine\")\n        self.assertEqual(inst.reasonCode[0].text, \"Treatment\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.div, \"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Example RequestGroup illustrating related actions to administer medications in sequence with time delay.</div>\")\n        self.assertEqual(inst.text.status, \"generated\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/requestgroup.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/RequestGroup).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass RequestGroup(domainresource.DomainResource):\n    \"\"\" A group of related requests.\n    \n    A group of related requests that can be used to capture intended activities\n    that have inter-dependencies such as \"give this medication after that one\".\n    \"\"\"\n    \n    resource_type = \"RequestGroup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" Proposed actions, if any.\n        List of `RequestGroupAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Device or practitioner that authored the request group.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.authoredOn = None\n        \"\"\" When the request group was authored.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.basedOn = None\n        \"\"\" Fulfills plan, proposal, or order.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.code = None\n        \"\"\" What's being requested/ordered.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.encounter = None\n        \"\"\" Created as part of.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.groupIdentifier = None\n        \"\"\" Composite request this is part of.\n        Type `Identifier` (represented as `dict` in JSON). \"\"\"\n        \n        self.identifier = None\n        \"\"\" Business identifier.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.instantiatesCanonical = None\n        \"\"\" Instantiates FHIR protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.instantiatesUri = None\n        \"\"\" Instantiates external protocol or definition.\n        List of `str` items. \"\"\"\n        \n        self.intent = None\n        \"\"\" proposal | plan | directive | order | original-order | reflex-order\n        | filler-order | instance-order | option.\n        Type `str`. \"\"\"\n        \n        self.note = None\n        \"\"\" Additional notes about the response.\n        List of `Annotation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.reasonCode = None\n        \"\"\" Why the request group is needed.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reasonReference = None\n        \"\"\" Why the request group is needed.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.replaces = None\n        \"\"\" Request(s) replaced by this request.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | on-hold | revoked | completed | entered-in-error |\n        unknown.\n        Type `str`. \"\"\"\n        \n        self.subject = None\n        \"\"\" Who the request group is about.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        super(RequestGroup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroup, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", RequestGroupAction, True, None, False),\n            (\"author\", \"author\", fhirreference.FHIRReference, False, None, False),\n            (\"authoredOn\", \"authoredOn\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"basedOn\", \"basedOn\", fhirreference.FHIRReference, True, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"encounter\", \"encounter\", fhirreference.FHIRReference, False, None, False),\n            (\"groupIdentifier\", \"groupIdentifier\", identifier.Identifier, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"instantiatesCanonical\", \"instantiatesCanonical\", str, True, None, False),\n            (\"instantiatesUri\", \"instantiatesUri\", str, True, None, False),\n            (\"intent\", \"intent\", str, False, None, True),\n            (\"note\", \"note\", annotation.Annotation, True, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"reasonCode\", \"reasonCode\", codeableconcept.CodeableConcept, True, None, False),\n            (\"reasonReference\", \"reasonReference\", fhirreference.FHIRReference, True, None, False),\n            (\"replaces\", \"replaces\", fhirreference.FHIRReference, True, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subject\", \"subject\", fhirreference.FHIRReference, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass RequestGroupAction(backboneelement.BackboneElement):\n    \"\"\" Proposed actions, if any.\n    \n    The actions, if any, produced by the evaluation of the artifact.\n    \"\"\"\n    \n    resource_type = \"RequestGroupAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.action = None\n        \"\"\" Sub action.\n        List of `RequestGroupAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.cardinalityBehavior = None\n        \"\"\" single | multiple.\n        Type `str`. \"\"\"\n        \n        self.code = None\n        \"\"\" Code representing the meaning of the action or sub-actions.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.condition = None\n        \"\"\" Whether or not the action is applicable.\n        List of `RequestGroupActionCondition` items (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Short description of the action.\n        Type `str`. \"\"\"\n        \n        self.documentation = None\n        \"\"\" Supporting documentation for the intended performer of the action.\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.groupingBehavior = None\n        \"\"\" visual-group | logical-group | sentence-group.\n        Type `str`. \"\"\"\n        \n        self.participant = None\n        \"\"\" Who should perform the action.\n        List of `FHIRReference` items (represented as `dict` in JSON). \"\"\"\n        \n        self.precheckBehavior = None\n        \"\"\" yes | no.\n        Type `str`. \"\"\"\n        \n        self.prefix = None\n        \"\"\" User-visible prefix for the action (e.g. 1. or A.).\n        Type `str`. \"\"\"\n        \n        self.priority = None\n        \"\"\" routine | urgent | asap | stat.\n        Type `str`. \"\"\"\n        \n        self.relatedAction = None\n        \"\"\" Relationship to another action.\n        List of `RequestGroupActionRelatedAction` items (represented as `dict` in JSON). \"\"\"\n        \n        self.requiredBehavior = None\n        \"\"\" must | could | must-unless-documented.\n        Type `str`. \"\"\"\n        \n        self.resource = None\n        \"\"\" The target of the action.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.selectionBehavior = None\n        \"\"\" any | all | all-or-none | exactly-one | at-most-one | one-or-more.\n        Type `str`. \"\"\"\n        \n        self.textEquivalent = None\n        \"\"\" Static text equivalent of the action, used if the dynamic aspects\n        cannot be interpreted by the receiving system.\n        Type `str`. \"\"\"\n        \n        self.timingAge = None\n        \"\"\" When the action should take place.\n        Type `Age` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingDateTime = None\n        \"\"\" When the action should take place.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.timingDuration = None\n        \"\"\" When the action should take place.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingPeriod = None\n        \"\"\" When the action should take place.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingRange = None\n        \"\"\" When the action should take place.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.timingTiming = None\n        \"\"\" When the action should take place.\n        Type `Timing` (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" User-visible title.\n        Type `str`. \"\"\"\n        \n        self.type = None\n        \"\"\" create | update | remove | fire-event.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        super(RequestGroupAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroupAction, self).elementProperties()\n        js.extend([\n            (\"action\", \"action\", RequestGroupAction, True, None, False),\n            (\"cardinalityBehavior\", \"cardinalityBehavior\", str, False, None, False),\n            (\"code\", \"code\", codeableconcept.CodeableConcept, True, None, False),\n            (\"condition\", \"condition\", RequestGroupActionCondition, True, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"documentation\", \"documentation\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"groupingBehavior\", \"groupingBehavior\", str, False, None, False),\n            (\"participant\", \"participant\", fhirreference.FHIRReference, True, None, False),\n            (\"precheckBehavior\", \"precheckBehavior\", str, False, None, False),\n            (\"prefix\", \"prefix\", str, False, None, False),\n            (\"priority\", \"priority\", str, False, None, False),\n            (\"relatedAction\", \"relatedAction\", RequestGroupActionRelatedAction, True, None, False),\n            (\"requiredBehavior\", \"requiredBehavior\", str, False, None, False),\n            (\"resource\", \"resource\", fhirreference.FHIRReference, False, None, False),\n            (\"selectionBehavior\", \"selectionBehavior\", str, False, None, False),\n            (\"textEquivalent\", \"textEquivalent\", str, False, None, False),\n            (\"timingAge\", \"timingAge\", age.Age, False, \"timing\", False),\n            (\"timingDateTime\", \"timingDateTime\", fhirdatetime.FHIRDateTime, False, \"timing\", False),\n            (\"timingDuration\", \"timingDuration\", duration.Duration, False, \"timing\", False),\n            (\"timingPeriod\", \"timingPeriod\", period.Period, False, \"timing\", False),\n            (\"timingRange\", \"timingRange\", range.Range, False, \"timing\", False),\n            (\"timingTiming\", \"timingTiming\", timing.Timing, False, \"timing\", False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, False, None, False),\n        ])\n        return js\n\n\nclass RequestGroupActionCondition(backboneelement.BackboneElement):\n    \"\"\" Whether or not the action is applicable.\n    \n    An expression that describes applicability criteria, or start/stop\n    conditions for the action.\n    \"\"\"\n    \n    resource_type = \"RequestGroupActionCondition\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.expression = None\n        \"\"\" Boolean-valued expression.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.kind = None\n        \"\"\" applicability | start | stop.\n        Type `str`. \"\"\"\n        \n        super(RequestGroupActionCondition, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroupActionCondition, self).elementProperties()\n        js.extend([\n            (\"expression\", \"expression\", expression.Expression, False, None, False),\n            (\"kind\", \"kind\", str, False, None, True),\n        ])\n        return js\n\n\nclass RequestGroupActionRelatedAction(backboneelement.BackboneElement):\n    \"\"\" Relationship to another action.\n    \n    A relationship to another action such as \"before\" or \"30-60 minutes after\n    start of\".\n    \"\"\"\n    \n    resource_type = \"RequestGroupActionRelatedAction\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.actionId = None\n        \"\"\" What action this is related to.\n        Type `str`. \"\"\"\n        \n        self.offsetDuration = None\n        \"\"\" Time offset for the relationship.\n        Type `Duration` (represented as `dict` in JSON). \"\"\"\n        \n        self.offsetRange = None\n        \"\"\" Time offset for the relationship.\n        Type `Range` (represented as `dict` in JSON). \"\"\"\n        \n        self.relationship = None\n        \"\"\" before-start | before | before-end | concurrent-with-start |\n        concurrent | concurrent-with-end | after-start | after | after-end.\n        Type `str`. \"\"\"\n        \n        super(RequestGroupActionRelatedAction, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(RequestGroupActionRelatedAction, self).elementProperties()\n        js.extend([\n            (\"actionId\", \"actionId\", str, False, None, True),\n            (\"offsetDuration\", \"offsetDuration\", duration.Duration, False, \"offset\", False),\n            (\"offsetRange\", \"offsetRange\", range.Range, False, \"offset\", False),\n            (\"relationship\", \"relationship\", str, False, None, True),\n        ])\n        return js\n\n\nfrom . import age\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import duration\nfrom . import expression\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string that was used to create this FHIRDate instance. If the instance was initialized with a valid JSON date string (stored in `origval`), this method will return that string. If `origval` is `None`, it will return the ISO 8601 string representation of the date (via the `isostring` property). \n\nThere are no input parameters for this method. The expected return value is either a string representing the original JSON date input or the ISO 8601 formatted date string. This method leverages the `isostring` property to ensure a consistent output format when the original JSON is unavailable.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string that was used to create this FHIRDate instance. If the instance was initialized with a valid JSON date string (stored in `origval`), this method will return that string. If `origval` is `None`, it will return the ISO 8601 string representation of the date (via the `isostring` property). \n\nThere are no input parameters for this method. The expected return value is either a string representing the original JSON date input or the ISO 8601 formatted date string. This method leverages the `isostring` property to ensure a consistent output format when the original JSON is unavailable.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/requestgroup.py": {
      "RequestGroup.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initializes a RequestGroup resource instance, representing a group of related requests that capture intended activities with inter-dependencies, such as medication orders. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing the initial property values for the RequestGroup instance. This is expected to follow the structure outlined in the FHIR standard.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError during initialization. If False, such errors may be ignored.\n\nAttributes initialized include:\n- action: Suggested actions (List of `RequestGroupAction`).\n- author: The author of the request group (Type `FHIRReference`).\n- authoredOn: Date/time the request group was authored (Type `FHIRDateTime`).\n- basedOn: References to plans or proposals fulfilled by this group (List of `FHIRReference`).\n- code: The nature of the request (Type `CodeableConcept`).\n- encounter: Related encounter (Type `FHIRReference`).\n- groupIdentifier: Identifier for the composite request group (Type `Identifier`).\n- identifier: Business identifiers (List of `Identifier`).\n- instantiatesCanonical: References to FHIR protocols defined canonically (List of `str`).\n- instantiatesUri: References to external protocols or definitions (List of `str`).\n- intent: Describes the intent of the request (Type `str`).\n- note: Additional notes regarding the request group (List of `Annotation`).\n- priority: Urgency type for the request (Type `str`).\n- reasonCode: Reasons for the request group (List of `CodeableConcept`).\n- reasonReference: References for the reasons of the request (List of `FHIRReference`).\n- replaces: Prior requests replaced by this group (List of `FHIRReference`).\n- status: Current status of the request group (Type `str`).\n- subject: The subject of the request group (Type `FHIRReference`).\n\nThis class extends `domainresource.DomainResource`, ensuring that its elements align with the FHIR structure definitions.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.action = None\n        ' Proposed actions, if any.\\n        List of `RequestGroupAction` items (represented as `dict` in JSON). '\n        self.author = None\n        ' Device or practitioner that authored the request group.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.authoredOn = None\n        ' When the request group was authored.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.basedOn = None\n        ' Fulfills plan, proposal, or order.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.code = None\n        \" What's being requested/ordered.\\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\n        self.encounter = None\n        ' Created as part of.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.groupIdentifier = None\n        ' Composite request this is part of.\\n        Type `Identifier` (represented as `dict` in JSON). '\n        self.identifier = None\n        ' Business identifier.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.instantiatesCanonical = None\n        ' Instantiates FHIR protocol or definition.\\n        List of `str` items. '\n        self.instantiatesUri = None\n        ' Instantiates external protocol or definition.\\n        List of `str` items. '\n        self.intent = None\n        ' proposal | plan | directive | order | original-order | reflex-order\\n        | filler-order | instance-order | option.\\n        Type `str`. '\n        self.note = None\n        ' Additional notes about the response.\\n        List of `Annotation` items (represented as `dict` in JSON). '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.reasonCode = None\n        ' Why the request group is needed.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.reasonReference = None\n        ' Why the request group is needed.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.replaces = None\n        ' Request(s) replaced by this request.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | on-hold | revoked | completed | entered-in-error |\\n        unknown.\\n        Type `str`. '\n        self.subject = None\n        ' Who the request group is about.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        super(RequestGroup, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initializes a RequestGroup resource instance, representing a group of related requests that capture intended activities with inter-dependencies, such as medication orders. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing the initial property values for the RequestGroup instance. This is expected to follow the structure outlined in the FHIR standard.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError during initialization. If False, such errors may be ignored.\n\nAttributes initialized include:\n- action: Suggested actions (List of `RequestGroupAction`).\n- author: The author of the request group (Type `FHIRReference`).\n- authoredOn: Date/time the request group was authored (Type `FHIRDateTime`).\n- basedOn: References to plans or proposals fulfilled by this group (List of `FHIRReference`).\n- code: The nature of the request (Type `CodeableConcept`).\n- encounter: Related encounter (Type `FHIRReference`).\n- groupIdentifier: Identifier for the composite request group (Type `Identifier`).\n- identifier: Business identifiers (List of `Identifier`).\n- instantiatesCanonical: References to FHIR protocols defined canonically (List of `str`).\n- instantiatesUri: References to external protocols or definitions (List of `str`).\n- intent: Describes the intent of the request (Type `str`).\n- note: Additional notes regarding the request group (List of `Annotation`).\n- priority: Urgency type for the request (Type `str`).\n- reasonCode: Reasons for the request group (List of `CodeableConcept`).\n- reasonReference: References for the reasons of the request (List of `FHIRReference`).\n- replaces: Prior requests replaced by this group (List of `FHIRReference`).\n- status: Current status of the request group (Type `str`).\n- subject: The subject of the request group (Type `FHIRReference`).\n\nThis class extends `domainresource.DomainResource`, ensuring that its elements align with the FHIR structure definitions.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class RequestGroup(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a FHIRDateTime instance, which is a subclass of FHIRDate for handling FHIR-compatible datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the datetime in FHIR format. If provided, it will initialize the instance via the superclass.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A datetime object representing the parsed JSON value. Initially set to None until a valid FHIR datetime string is parsed.\n\nThe constructor invokes the superclass __init__ method, allowing it to handle the FHIRDate JSON parsing and ensuring compatibility with instances of FHIRDate. No specific constants are used in this method; however, the class relies on class-level constants defined in FHIRDate for datetime formatting and validation.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializes a FHIRDateTime instance, which is a subclass of FHIRDate for handling FHIR-compatible datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the datetime in FHIR format. If provided, it will initialize the instance via the superclass.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A datetime object representing the parsed JSON value. Initially set to None until a valid FHIR datetime string is parsed.\n\nThe constructor invokes the superclass __init__ method, allowing it to handle the FHIRDate JSON parsing and ensuring compatibility with instances of FHIRDate. No specific constants are used in this method; however, the class relies on class-level constants defined in FHIRDate for datetime formatting and validation.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method calls the superclass's `as_json` method to build the base structure, then adds the resource type under the key 'resourceType'. The `resource_type` is a class-level attribute that indicates the type of FHIR resource being represented. This function does not take any parameters and returns a dictionary that includes the resource's attributes along with its type.\n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including 'resourceType'.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method calls the superclass's `as_json` method to build the base structure, then adds the resource type under the key 'resourceType'. The `resource_type` is a class-level attribute that indicates the type of FHIR resource being represented. This function does not take any parameters and returns a dictionary that includes the resource's attributes along with its type.\n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including 'resourceType'.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__init__": {
          "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
          "docstring": "",
          "signature": "def __init__(self, jsonval: Union[str, None]=None):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/requestgroup_test.py:RequestGroupTests:testRequestGroup1": {
      "tests/models/requestgroup_test.py:RequestGroupTests:instantiate_from": {
        "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/requestgroup_test.py:RequestGroupTests:implRequestGroup1": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/requestgroup_test.py:RequestGroupTests:instantiate_from": {
      "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/requestgroup_test.py:RequestGroupTests:testRequestGroup2": {
      "tests/models/requestgroup_test.py:RequestGroupTests:instantiate_from": {
        "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/requestgroup_test.py:RequestGroupTests:implRequestGroup2": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/requestgroup.py:RequestGroup:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/requestgroup.py:RequestGroup:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {},
                      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-requestgroup_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 requestgroup.py\n            \u2514\u2500\u2500 RequestGroup.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module facilitates the validation, testing, and instantiation of FHIR RequestGroup resources, a key component of the FHIR specification used to represent groups of actions or requests in healthcare workflows. It enables the creation and manipulation of RequestGroup instances by parsing JSON representations and verifying their structural and semantic correctness against FHIR standards. The module supports use cases such as defining complex care plans, medication schedules, or clinical workflows that require multiple related actions with specified timing, dependencies, and behaviors. By providing a robust framework for testing and ensuring data integrity, the module streamlines the development and validation of interoperable healthcare applications utilizing FHIR resources.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string that was used to create this FHIRDate instance. If the instance was initialized with a valid JSON date string (stored in `origval`), this method will return that string. If `origval` is `None`, it will return the ISO 8601 string representation of the date (via the `isostring` property). \n\nThere are no input parameters for this method. The expected return value is either a string representing the original JSON date input or the ISO 8601 formatted date string. This method leverages the `isostring` property to ensure a consistent output format when the original JSON is unavailable.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/requestgroup.py\n\n- CLASS METHOD: RequestGroup.__init__\n  - CLASS SIGNATURE: class RequestGroup(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a RequestGroup resource instance, representing a group of related requests that capture intended activities with inter-dependencies, such as medication orders. \n\nParameters:\n- jsondict (dict, optional): A dictionary containing the initial property values for the RequestGroup instance. This is expected to follow the structure outlined in the FHIR standard.\n- strict (bool, optional): If True (default), invalid properties will raise a TypeError during initialization. If False, such errors may be ignored.\n\nAttributes initialized include:\n- action: Suggested actions (List of `RequestGroupAction`).\n- author: The author of the request group (Type `FHIRReference`).\n- authoredOn: Date/time the request group was authored (Type `FHIRDateTime`).\n- basedOn: References to plans or proposals fulfilled by this group (List of `FHIRReference`).\n- code: The nature of the request (Type `CodeableConcept`).\n- encounter: Related encounter (Type `FHIRReference`).\n- groupIdentifier: Identifier for the composite request group (Type `Identifier`).\n- identifier: Business identifiers (List of `Identifier`).\n- instantiatesCanonical: References to FHIR protocols defined canonically (List of `str`).\n- instantiatesUri: References to external protocols or definitions (List of `str`).\n- intent: Describes the intent of the request (Type `str`).\n- note: Additional notes regarding the request group (List of `Annotation`).\n- priority: Urgency type for the request (Type `str`).\n- reasonCode: Reasons for the request group (List of `CodeableConcept`).\n- reasonReference: References for the reasons of the request (List of `FHIRReference`).\n- replaces: Prior requests replaced by this group (List of `FHIRReference`).\n- status: Current status of the request group (Type `str`).\n- subject: The subject of the request group (Type `FHIRReference`).\n\nThis class extends `domainresource.DomainResource`, ensuring that its elements align with the FHIR structure definitions.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a FHIRDateTime instance, which is a subclass of FHIRDate for handling FHIR-compatible datetime values in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing the datetime in FHIR format. If provided, it will initialize the instance via the superclass.\n\nAttributes:\n- datetime (Union[datetime.datetime, None]): A datetime object representing the parsed JSON value. Initially set to None until a valid FHIR datetime string is parsed.\n\nThe constructor invokes the superclass __init__ method, allowing it to handle the FHIRDate JSON parsing and ensuring compatibility with instances of FHIRDate. No specific constants are used in this method; however, the class relies on class-level constants defined in FHIRDate for datetime formatting and validation.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the FHIRAbstractResource instance into a JSON-compatible dictionary.\n\nThis method calls the superclass's `as_json` method to build the base structure, then adds the resource type under the key 'resourceType'. The `resource_type` is a class-level attribute that indicates the type of FHIR resource being represented. This function does not take any parameters and returns a dictionary that includes the resource's attributes along with its type.\n\nReturns:\n    dict: A JSON representation of the FHIRAbstractResource instance, including 'resourceType'.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None]=None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/requestgroup.py": "from . import domainresource\n\nclass RequestGroup(domainresource.DomainResource):\n    \"\"\" A group of related requests.\n    \n    A group of related requests that can be used to capture intended activities\n    that have inter-dependencies such as \"give this medication after that one\".\n    \"\"\"\n    resource_type = 'RequestGroup'\n\n    def elementProperties(self):\n        js = super(RequestGroup, self).elementProperties()\n        js.extend([('action', 'action', RequestGroupAction, True, None, False), ('author', 'author', fhirreference.FHIRReference, False, None, False), ('authoredOn', 'authoredOn', fhirdatetime.FHIRDateTime, False, None, False), ('basedOn', 'basedOn', fhirreference.FHIRReference, True, None, False), ('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('encounter', 'encounter', fhirreference.FHIRReference, False, None, False), ('groupIdentifier', 'groupIdentifier', identifier.Identifier, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('instantiatesCanonical', 'instantiatesCanonical', str, True, None, False), ('instantiatesUri', 'instantiatesUri', str, True, None, False), ('intent', 'intent', str, False, None, True), ('note', 'note', annotation.Annotation, True, None, False), ('priority', 'priority', str, False, None, False), ('reasonCode', 'reasonCode', codeableconcept.CodeableConcept, True, None, False), ('reasonReference', 'reasonReference', fhirreference.FHIRReference, True, None, False), ('replaces', 'replaces', fhirreference.FHIRReference, True, None, False), ('status', 'status', str, False, None, True), ('subject', 'subject', fhirreference.FHIRReference, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass RequestGroupAction(backboneelement.BackboneElement):\n    \"\"\" Proposed actions, if any.\n    \n    The actions, if any, produced by the evaluation of the artifact.\n    \"\"\"\n    resource_type = 'RequestGroupAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.action = None\n        ' Sub action.\\n        List of `RequestGroupAction` items (represented as `dict` in JSON). '\n        self.cardinalityBehavior = None\n        ' single | multiple.\\n        Type `str`. '\n        self.code = None\n        ' Code representing the meaning of the action or sub-actions.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.condition = None\n        ' Whether or not the action is applicable.\\n        List of `RequestGroupActionCondition` items (represented as `dict` in JSON). '\n        self.description = None\n        ' Short description of the action.\\n        Type `str`. '\n        self.documentation = None\n        ' Supporting documentation for the intended performer of the action.\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.groupingBehavior = None\n        ' visual-group | logical-group | sentence-group.\\n        Type `str`. '\n        self.participant = None\n        ' Who should perform the action.\\n        List of `FHIRReference` items (represented as `dict` in JSON). '\n        self.precheckBehavior = None\n        ' yes | no.\\n        Type `str`. '\n        self.prefix = None\n        ' User-visible prefix for the action (e.g. 1. or A.).\\n        Type `str`. '\n        self.priority = None\n        ' routine | urgent | asap | stat.\\n        Type `str`. '\n        self.relatedAction = None\n        ' Relationship to another action.\\n        List of `RequestGroupActionRelatedAction` items (represented as `dict` in JSON). '\n        self.requiredBehavior = None\n        ' must | could | must-unless-documented.\\n        Type `str`. '\n        self.resource = None\n        ' The target of the action.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.selectionBehavior = None\n        ' any | all | all-or-none | exactly-one | at-most-one | one-or-more.\\n        Type `str`. '\n        self.textEquivalent = None\n        ' Static text equivalent of the action, used if the dynamic aspects\\n        cannot be interpreted by the receiving system.\\n        Type `str`. '\n        self.timingAge = None\n        ' When the action should take place.\\n        Type `Age` (represented as `dict` in JSON). '\n        self.timingDateTime = None\n        ' When the action should take place.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.timingDuration = None\n        ' When the action should take place.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.timingPeriod = None\n        ' When the action should take place.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.timingRange = None\n        ' When the action should take place.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.timingTiming = None\n        ' When the action should take place.\\n        Type `Timing` (represented as `dict` in JSON). '\n        self.title = None\n        ' User-visible title.\\n        Type `str`. '\n        self.type = None\n        ' create | update | remove | fire-event.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        super(RequestGroupAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(RequestGroupAction, self).elementProperties()\n        js.extend([('action', 'action', RequestGroupAction, True, None, False), ('cardinalityBehavior', 'cardinalityBehavior', str, False, None, False), ('code', 'code', codeableconcept.CodeableConcept, True, None, False), ('condition', 'condition', RequestGroupActionCondition, True, None, False), ('description', 'description', str, False, None, False), ('documentation', 'documentation', relatedartifact.RelatedArtifact, True, None, False), ('groupingBehavior', 'groupingBehavior', str, False, None, False), ('participant', 'participant', fhirreference.FHIRReference, True, None, False), ('precheckBehavior', 'precheckBehavior', str, False, None, False), ('prefix', 'prefix', str, False, None, False), ('priority', 'priority', str, False, None, False), ('relatedAction', 'relatedAction', RequestGroupActionRelatedAction, True, None, False), ('requiredBehavior', 'requiredBehavior', str, False, None, False), ('resource', 'resource', fhirreference.FHIRReference, False, None, False), ('selectionBehavior', 'selectionBehavior', str, False, None, False), ('textEquivalent', 'textEquivalent', str, False, None, False), ('timingAge', 'timingAge', age.Age, False, 'timing', False), ('timingDateTime', 'timingDateTime', fhirdatetime.FHIRDateTime, False, 'timing', False), ('timingDuration', 'timingDuration', duration.Duration, False, 'timing', False), ('timingPeriod', 'timingPeriod', period.Period, False, 'timing', False), ('timingRange', 'timingRange', range.Range, False, 'timing', False), ('timingTiming', 'timingTiming', timing.Timing, False, 'timing', False), ('title', 'title', str, False, None, False), ('type', 'type', codeableconcept.CodeableConcept, False, None, False)])\n        return js\n\nclass RequestGroupActionCondition(backboneelement.BackboneElement):\n    \"\"\" Whether or not the action is applicable.\n    \n    An expression that describes applicability criteria, or start/stop\n    conditions for the action.\n    \"\"\"\n    resource_type = 'RequestGroupActionCondition'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.expression = None\n        ' Boolean-valued expression.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.kind = None\n        ' applicability | start | stop.\\n        Type `str`. '\n        super(RequestGroupActionCondition, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(RequestGroupActionCondition, self).elementProperties()\n        js.extend([('expression', 'expression', expression.Expression, False, None, False), ('kind', 'kind', str, False, None, True)])\n        return js\n\nclass RequestGroupActionRelatedAction(backboneelement.BackboneElement):\n    \"\"\" Relationship to another action.\n    \n    A relationship to another action such as \"before\" or \"30-60 minutes after\n    start of\".\n    \"\"\"\n    resource_type = 'RequestGroupActionRelatedAction'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.actionId = None\n        ' What action this is related to.\\n        Type `str`. '\n        self.offsetDuration = None\n        ' Time offset for the relationship.\\n        Type `Duration` (represented as `dict` in JSON). '\n        self.offsetRange = None\n        ' Time offset for the relationship.\\n        Type `Range` (represented as `dict` in JSON). '\n        self.relationship = None\n        ' before-start | before | before-end | concurrent-with-start |\\n        concurrent | concurrent-with-end | after-start | after | after-end.\\n        Type `str`. '\n        super(RequestGroupActionRelatedAction, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(RequestGroupActionRelatedAction, self).elementProperties()\n        js.extend([('actionId', 'actionId', str, False, None, True), ('offsetDuration', 'offsetDuration', duration.Duration, False, 'offset', False), ('offsetRange', 'offsetRange', range.Range, False, 'offset', False), ('relationship', 'relationship', str, False, None, True)])\n        return js\nfrom . import age\nfrom . import annotation\nfrom . import codeableconcept\nfrom . import duration\nfrom . import expression\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import range\nfrom . import relatedartifact\nfrom . import timing",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}