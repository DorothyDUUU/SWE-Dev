{
  "dir_path": "/app/fhirclient",
  "package_name": "fhirclient",
  "sample_name": "fhirclient-measure_test",
  "src_dir": "fhirclient/",
  "test_dir": "tests/",
  "test_file": "tests/models/measure_test.py",
  "test_code": "#  Generated from FHIR 4.0.1-9346c8cc45, SMART Health IT.\n\nimport os\nimport io\nimport unittest\nimport json\nfrom fhirclient.models import measure\nfrom fhirclient.models.fhirdate import FHIRDate\nfrom fhirclient.models.fhirdatetime import FHIRDateTime\nfrom fhirclient.models.fhirinstant import FHIRInstant\nfrom fhirclient.models.fhirtime import FHIRTime\n\n\nclass MeasureTests(unittest.TestCase):\n    def instantiate_from(self, filename):\n        datadir = os.path.join(os.path.dirname(__file__), '..', 'data', 'examples')\n        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:\n            js = json.load(handle)\n            self.assertEqual(\"Measure\", js[\"resourceType\"])\n        return measure.Measure(js)\n    \n    def testMeasure1(self):\n        inst = self.instantiate_from(\"measure-component-b-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Measure instance\")\n        self.implMeasure1(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Measure\", js[\"resourceType\"])\n        inst2 = measure.Measure(js)\n        self.implMeasure1(inst2)\n    \n    def implMeasure1(self, inst):\n        self.assertEqual(inst.group[0].id, \"Main\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].criteria.expression, \"Initial Population\")\n        self.assertEqual(inst.group[0].population[0].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[1].criteria.expression, \"Denominator\")\n        self.assertEqual(inst.group[0].population[1].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[2].criteria.expression, \"Numerator\")\n        self.assertEqual(inst.group[0].population[2].criteria.language, \"text/cql\")\n        self.assertEqual(inst.id, \"component-b-example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.scoring.coding[0].code, \"proportion\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Screening for Depression\")\n    \n    def testMeasure2(self):\n        inst = self.instantiate_from(\"measure-cms146-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Measure instance\")\n        self.implMeasure2(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Measure\", js[\"resourceType\"])\n        inst2 = measure.Measure(js)\n        self.implMeasure2(inst2)\n    \n    def implMeasure2(self, inst):\n        self.assertEqual(inst.approvalDate.date, FHIRDate(\"2016-01-01\").date)\n        self.assertEqual(inst.approvalDate.as_json(), \"2016-01-01\")\n        self.assertEqual(inst.author[0].name, \"National Committee for Quality Assurance\")\n        self.assertEqual(inst.contact[0].telecom[0].system, \"url\")\n        self.assertEqual(inst.contact[0].telecom[0].value, \"http://www.ncqa.org/\")\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2017-03-10\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2017-03-10\")\n        self.assertEqual(inst.description, \"Percentage of children 3-18 years of age who were diagnosed with pharyngitis, ordered an antibiotic and received a group A streptococcus (strep) test for the episode.\")\n        self.assertEqual(inst.effectivePeriod.end.datetime, FHIRDateTime(\"2017-12-31\").datetime)\n        self.assertEqual(inst.effectivePeriod.end.as_json(), \"2017-12-31\")\n        self.assertEqual(inst.effectivePeriod.start.datetime, FHIRDateTime(\"2017-01-01\").datetime)\n        self.assertEqual(inst.effectivePeriod.start.as_json(), \"2017-01-01\")\n        self.assertTrue(inst.experimental)\n        self.assertEqual(inst.group[0].id, \"CMS146-group-1\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].criteria.expression, \"CMS146.InInitialPopulation\")\n        self.assertEqual(inst.group[0].population[0].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[1].criteria.expression, \"CMS146.InNumerator\")\n        self.assertEqual(inst.group[0].population[1].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[2].criteria.expression, \"CMS146.InDenominator\")\n        self.assertEqual(inst.group[0].population[2].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[3].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[0].population[3].criteria.expression, \"CMS146.InDenominatorExclusions\")\n        self.assertEqual(inst.group[0].population[3].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].stratifier[0].code.text, \"stratifier-ages-up-to-9\")\n        self.assertEqual(inst.group[0].stratifier[0].criteria.expression, \"CMS146.AgesUpToNine\")\n        self.assertEqual(inst.group[0].stratifier[0].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].stratifier[1].code.text, \"stratifier-ages-10-plus\")\n        self.assertEqual(inst.group[0].stratifier[1].criteria.expression, \"CMS146.AgesTenPlus\")\n        self.assertEqual(inst.group[0].stratifier[1].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].stratifier[2].code.text, \"stratifier-gender\")\n        self.assertEqual(inst.group[0].stratifier[2].criteria.expression, \"Patient.gender\")\n        self.assertEqual(inst.group[0].stratifier[2].criteria.language, \"text/fhirpath\")\n        self.assertEqual(inst.guidance, \"This is an episode of care measure that examines all eligible episodes for the patient during the measurement period. If the patient has more than one episode, include all episodes in the measure\")\n        self.assertEqual(inst.id, \"measure-cms146-example\")\n        self.assertEqual(inst.identifier[0].system, \"http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/cms\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"146\")\n        self.assertEqual(inst.identifier[1].system, \"http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/nqf\")\n        self.assertEqual(inst.identifier[1].use, \"official\")\n        self.assertEqual(inst.identifier[1].value, \"0002\")\n        self.assertEqual(inst.improvementNotation.coding[0].code, \"increase\")\n        self.assertEqual(inst.improvementNotation.coding[0].system, \"http://terminology.hl7.org/CodeSystem/measure-improvement-notation\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].code, \"US\")\n        self.assertEqual(inst.jurisdiction[0].coding[0].system, \"urn:iso:std:iso:3166\")\n        self.assertEqual(inst.lastReviewDate.date, FHIRDate(\"2016-09-01\").date)\n        self.assertEqual(inst.lastReviewDate.as_json(), \"2016-09-01\")\n        self.assertEqual(inst.library[0], \"Library/library-cms146-example\")\n        self.assertEqual(inst.name, \"CMS146\")\n        self.assertEqual(inst.publisher, \"National Committee for Quality Assurance\")\n        self.assertEqual(inst.purpose, \"Measure of children with a group A streptococcus test in the 7-day period from 3 days prior through 3 days after the diagnosis of pharyngitis\")\n        self.assertEqual(inst.relatedArtifact[0].citation, \"Linder, J.A., D.W. Bates, G.M. Lee, J.A. Finkelstein. 2005. _Antibiotic treatment of children with sore throat._ JAMA 294(18):2315-2322. \")\n        self.assertEqual(inst.relatedArtifact[0].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[1].citation, \"Infectious Diseases Society of America. 2012. _Clinical Practice Guideline for the Diagnosis and Management of Group A Streptococcal Pharyngitis: 2012 Update._ \")\n        self.assertEqual(inst.relatedArtifact[1].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[2].type, \"documentation\")\n        self.assertEqual(inst.scoring.coding[0].code, \"proportion\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.supplementalData[0].code.text, \"supplemental-data-gender\")\n        self.assertEqual(inst.supplementalData[0].criteria.expression, \"Patient.gender\")\n        self.assertEqual(inst.supplementalData[0].criteria.language, \"text/fhirpath\")\n        self.assertEqual(inst.supplementalData[1].code.text, \"supplemental-data-deceased\")\n        self.assertEqual(inst.supplementalData[1].criteria.expression, \"deceasedBoolean\")\n        self.assertEqual(inst.supplementalData[1].criteria.language, \"text/fhirpath\")\n        self.assertEqual(inst.text.status, \"additional\")\n        self.assertEqual(inst.title, \"Appropriate Testing for Children with Pharyngitis\")\n        self.assertEqual(inst.topic[0].coding[0].code, \"57024-2\")\n        self.assertEqual(inst.topic[0].coding[0].system, \"http://loinc.org\")\n        self.assertEqual(inst.type[0].coding[0].code, \"process\")\n        self.assertEqual(inst.url, \"http://hl7.org/fhir/Measure/measure-cms146-example\")\n        self.assertEqual(inst.useContext[0].code.code, \"program\")\n        self.assertEqual(inst.useContext[0].valueCodeableConcept.text, \"eligibile-provider\")\n        self.assertEqual(inst.useContext[1].code.code, \"age\")\n        self.assertEqual(inst.useContext[1].code.system, \"http://terminology.hl7.org/CodeSystem/usage-context-type\")\n        self.assertEqual(inst.useContext[1].valueRange.high.unit, \"a\")\n        self.assertEqual(inst.useContext[1].valueRange.high.value, 18)\n        self.assertEqual(inst.useContext[1].valueRange.low.unit, \"a\")\n        self.assertEqual(inst.useContext[1].valueRange.low.value, 3)\n        self.assertEqual(inst.version, \"1.0.0\")\n    \n    def testMeasure3(self):\n        inst = self.instantiate_from(\"measure-component-a-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Measure instance\")\n        self.implMeasure3(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Measure\", js[\"resourceType\"])\n        inst2 = measure.Measure(js)\n        self.implMeasure3(inst2)\n    \n    def implMeasure3(self, inst):\n        self.assertEqual(inst.group[0].id, \"Main\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].criteria.expression, \"Initial Population\")\n        self.assertEqual(inst.group[0].population[0].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[1].criteria.expression, \"Denominator\")\n        self.assertEqual(inst.group[0].population[1].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[2].criteria.expression, \"Numerator\")\n        self.assertEqual(inst.group[0].population[2].criteria.language, \"text/cql\")\n        self.assertEqual(inst.id, \"component-a-example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.scoring.coding[0].code, \"proportion\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Screening for Alcohol Misuse\")\n    \n    def testMeasure4(self):\n        inst = self.instantiate_from(\"measure-predecessor-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Measure instance\")\n        self.implMeasure4(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Measure\", js[\"resourceType\"])\n        inst2 = measure.Measure(js)\n        self.implMeasure4(inst2)\n    \n    def implMeasure4(self, inst):\n        self.assertEqual(inst.date.datetime, FHIRDateTime(\"2014-03-08\").datetime)\n        self.assertEqual(inst.date.as_json(), \"2014-03-08\")\n        self.assertEqual(inst.description, \"Exclusive breastfeeding measure of outcomes for exclusive breastmilk feeding of newborns.\")\n        self.assertEqual(inst.group[0].id, \"PopulationGroup1\")\n        self.assertEqual(inst.group[0].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[0].population[0].criteria.expression, \"InitialPopulation1\")\n        self.assertEqual(inst.group[0].population[0].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[1].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[0].population[1].criteria.expression, \"Denominator1\")\n        self.assertEqual(inst.group[0].population[1].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[2].code.coding[0].code, \"denominator-exclusions\")\n        self.assertEqual(inst.group[0].population[2].criteria.expression, \"DenominatorExclusions1\")\n        self.assertEqual(inst.group[0].population[2].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[0].population[3].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[0].population[3].criteria.expression, \"Numerator1\")\n        self.assertEqual(inst.group[0].population[3].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[1].id, \"PopulationGroup2\")\n        self.assertEqual(inst.group[1].population[0].code.coding[0].code, \"initial-population\")\n        self.assertEqual(inst.group[1].population[0].criteria.expression, \"InitialPopulation2\")\n        self.assertEqual(inst.group[1].population[0].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[1].population[1].code.coding[0].code, \"denominator\")\n        self.assertEqual(inst.group[1].population[1].criteria.expression, \"Denominator2\")\n        self.assertEqual(inst.group[1].population[1].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[1].population[2].code.coding[0].code, \"denominator-exclusion\")\n        self.assertEqual(inst.group[1].population[2].criteria.expression, \"DenominatorExclusions2\")\n        self.assertEqual(inst.group[1].population[2].criteria.language, \"text/cql\")\n        self.assertEqual(inst.group[1].population[3].code.coding[0].code, \"numerator\")\n        self.assertEqual(inst.group[1].population[3].criteria.expression, \"Numerator2\")\n        self.assertEqual(inst.group[1].population[3].criteria.language, \"text/cql\")\n        self.assertEqual(inst.id, \"measure-predecessor-example\")\n        self.assertEqual(inst.identifier[0].use, \"official\")\n        self.assertEqual(inst.identifier[0].value, \"exclusive-breastfeeding-measure\")\n        self.assertEqual(inst.improvementNotation.coding[0].code, \"increase\")\n        self.assertEqual(inst.improvementNotation.coding[0].system, \"http://terminology.hl7.org/CodeSystem/measure-improvement-notation\")\n        self.assertEqual(inst.library[0], \"Library/library-exclusive-breastfeeding-cqm-logic\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.purpose, \"Measure of newborns who were fed breast milk only since birth\")\n        self.assertEqual(inst.relatedArtifact[0].citation, \"American Academy of Pediatrics. (2005). Section on Breastfeeding. Policy Statement:Breastfeeding and the Use of Human Milk. Pediatrics.115:496-506.\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[2].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[3].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[4].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[5].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[6].citation, \"Kramer, M.S. & Kakuma, R. (2002).Optimal duration of exclusive breastfeeding. [107 refs] Cochrane Database of Systematic Reviews. (1):CD003517.\")\n        self.assertEqual(inst.relatedArtifact[6].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[7].citation, \"Petrova, A., Hegyi, T., & Mehta, R. (2007). Maternal race/ethnicity and one-month exclusive breastfeeding in association with the in-hospital feeding modality. Breastfeeding Medicine. 2(2):92-8.\")\n        self.assertEqual(inst.relatedArtifact[7].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[8].type, \"documentation\")\n        self.assertEqual(inst.relatedArtifact[9].type, \"documentation\")\n        self.assertEqual(inst.scoring.coding[0].code, \"proportion\")\n        self.assertEqual(inst.status, \"active\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Exclusive Breastfeeding Measure\")\n        self.assertEqual(inst.topic[0].text, \"Exclusive Breastfeeding\")\n        self.assertEqual(inst.type[0].coding[0].code, \"process\")\n        self.assertEqual(inst.version, \"4.0.1\")\n    \n    def testMeasure5(self):\n        inst = self.instantiate_from(\"measure-composite-example.json\")\n        self.assertIsNotNone(inst, \"Must have instantiated a Measure instance\")\n        self.implMeasure5(inst)\n        \n        js = inst.as_json()\n        self.assertEqual(\"Measure\", js[\"resourceType\"])\n        inst2 = measure.Measure(js)\n        self.implMeasure5(inst2)\n    \n    def implMeasure5(self, inst):\n        self.assertEqual(inst.compositeScoring.coding[0].code, \"opportunity\")\n        self.assertEqual(inst.id, \"composite-example\")\n        self.assertEqual(inst.meta.tag[0].code, \"HTEST\")\n        self.assertEqual(inst.meta.tag[0].display, \"test health data\")\n        self.assertEqual(inst.meta.tag[0].system, \"http://terminology.hl7.org/CodeSystem/v3-ActReason\")\n        self.assertEqual(inst.relatedArtifact[0].resource, \"Measure/component-a-example\")\n        self.assertEqual(inst.relatedArtifact[0].type, \"composed-of\")\n        self.assertEqual(inst.relatedArtifact[1].resource, \"Measure/component-b-example\")\n        self.assertEqual(inst.relatedArtifact[1].type, \"composed-of\")\n        self.assertEqual(inst.scoring.coding[0].code, \"proportion\")\n        self.assertEqual(inst.status, \"draft\")\n        self.assertEqual(inst.text.status, \"generated\")\n        self.assertEqual(inst.title, \"Behavioral Assessment Composite Measure\")\n\n",
  "GT_file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\n# 2014-2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError(\"Expecting string when initializing {}, but got {}\"\n                    .format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError(\"does not match expected format\")\n            self.date = self._from_string(jsonval)\n\n        self.origval: Union[str, None] = jsonval\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            # Keep these two fields in sync\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, \"date\", value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n\n        raise TypeError(\"`cls.with_json()` only takes string or list of strings, but you provided {}\"\n            .format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n\n    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance.\"\"\"\n        if self.origval is not None:\n            return self.origval\n        return self.isostring\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for date\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?\")\n    _FIELD = \"date\"\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        # Note that `value` has already been regex-certified by this point,\n        # so we don't have to handle really wild strings.\n        if len(value) < 10:\n            pieces = value.split(\"-\")\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        # Until we depend on Python 3.11+, manually handle Z\n        value = value.replace(\"Z\", \"+00:00\")\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        # We can get away with such relaxed replacement because we are already regex-certified\n        # and \":60\" can't show up anywhere but seconds.\n        return value.replace(\":60\", \":59\")\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)\n",
    "fhirclient/models/measure.py": "# Generated from FHIR 4.0.1-9346c8cc45 (http://hl7.org/fhir/StructureDefinition/Measure).\n# 2024, SMART Health IT.\n\n\nfrom . import domainresource\n\nclass Measure(domainresource.DomainResource):\n    \"\"\" A quality measure definition.\n    \n    The Measure resource provides the definition of a quality measure.\n    \"\"\"\n    \n    resource_type = \"Measure\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.approvalDate = None\n        \"\"\" When the measure was approved by publisher.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.author = None\n        \"\"\" Who authored the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.clinicalRecommendationStatement = None\n        \"\"\" Summary of clinical guidelines.\n        Type `str`. \"\"\"\n        \n        self.compositeScoring = None\n        \"\"\" opportunity | all-or-nothing | linear | weighted.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.contact = None\n        \"\"\" Contact details for the publisher.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.copyright = None\n        \"\"\" Use and/or publishing restrictions.\n        Type `str`. \"\"\"\n        \n        self.date = None\n        \"\"\" Date last changed.\n        Type `FHIRDateTime` (represented as `str` in JSON). \"\"\"\n        \n        self.definition = None\n        \"\"\" Defined terms used in the measure documentation.\n        List of `str` items. \"\"\"\n        \n        self.description = None\n        \"\"\" Natural language description of the measure.\n        Type `str`. \"\"\"\n        \n        self.disclaimer = None\n        \"\"\" Disclaimer for use of the measure or its referenced content.\n        Type `str`. \"\"\"\n        \n        self.editor = None\n        \"\"\" Who edited the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.effectivePeriod = None\n        \"\"\" When the measure is expected to be used.\n        Type `Period` (represented as `dict` in JSON). \"\"\"\n        \n        self.endorser = None\n        \"\"\" Who endorsed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.experimental = None\n        \"\"\" For testing purposes, not real usage.\n        Type `bool`. \"\"\"\n        \n        self.group = None\n        \"\"\" Population criteria group.\n        List of `MeasureGroup` items (represented as `dict` in JSON). \"\"\"\n        \n        self.guidance = None\n        \"\"\" Additional guidance for implementers.\n        Type `str`. \"\"\"\n        \n        self.identifier = None\n        \"\"\" Additional identifier for the measure.\n        List of `Identifier` items (represented as `dict` in JSON). \"\"\"\n        \n        self.improvementNotation = None\n        \"\"\" increase | decrease.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.jurisdiction = None\n        \"\"\" Intended jurisdiction for measure (if applicable).\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.lastReviewDate = None\n        \"\"\" When the measure was last reviewed.\n        Type `FHIRDate` (represented as `str` in JSON). \"\"\"\n        \n        self.library = None\n        \"\"\" Logic used by the measure.\n        List of `str` items. \"\"\"\n        \n        self.name = None\n        \"\"\" Name for this measure (computer friendly).\n        Type `str`. \"\"\"\n        \n        self.publisher = None\n        \"\"\" Name of the publisher (organization or individual).\n        Type `str`. \"\"\"\n        \n        self.purpose = None\n        \"\"\" Why this measure is defined.\n        Type `str`. \"\"\"\n        \n        self.rateAggregation = None\n        \"\"\" How is rate aggregation performed for this measure.\n        Type `str`. \"\"\"\n        \n        self.rationale = None\n        \"\"\" Detailed description of why the measure exists.\n        Type `str`. \"\"\"\n        \n        self.relatedArtifact = None\n        \"\"\" Additional documentation, citations, etc..\n        List of `RelatedArtifact` items (represented as `dict` in JSON). \"\"\"\n        \n        self.reviewer = None\n        \"\"\" Who reviewed the content.\n        List of `ContactDetail` items (represented as `dict` in JSON). \"\"\"\n        \n        self.riskAdjustment = None\n        \"\"\" How risk adjustment is applied for this measure.\n        Type `str`. \"\"\"\n        \n        self.scoring = None\n        \"\"\" proportion | ratio | continuous-variable | cohort.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.status = None\n        \"\"\" draft | active | retired | unknown.\n        Type `str`. \"\"\"\n        \n        self.subjectCodeableConcept = None\n        \"\"\" E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\n        Device.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.subjectReference = None\n        \"\"\" E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\n        Device.\n        Type `FHIRReference` (represented as `dict` in JSON). \"\"\"\n        \n        self.subtitle = None\n        \"\"\" Subordinate title of the measure.\n        Type `str`. \"\"\"\n        \n        self.supplementalData = None\n        \"\"\" What other data should be reported with the measure.\n        List of `MeasureSupplementalData` items (represented as `dict` in JSON). \"\"\"\n        \n        self.title = None\n        \"\"\" Name for this measure (human friendly).\n        Type `str`. \"\"\"\n        \n        self.topic = None\n        \"\"\" The category of the measure, such as Education, Treatment,\n        Assessment, etc..\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.type = None\n        \"\"\" process | outcome | structure | patient-reported-outcome |\n        composite.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        self.url = None\n        \"\"\" Canonical identifier for this measure, represented as a URI\n        (globally unique).\n        Type `str`. \"\"\"\n        \n        self.usage = None\n        \"\"\" Describes the clinical usage of the measure.\n        Type `str`. \"\"\"\n        \n        self.useContext = None\n        \"\"\" The context that the content is intended to support.\n        List of `UsageContext` items (represented as `dict` in JSON). \"\"\"\n        \n        self.version = None\n        \"\"\" Business version of the measure.\n        Type `str`. \"\"\"\n        \n        super(Measure, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(Measure, self).elementProperties()\n        js.extend([\n            (\"approvalDate\", \"approvalDate\", fhirdate.FHIRDate, False, None, False),\n            (\"author\", \"author\", contactdetail.ContactDetail, True, None, False),\n            (\"clinicalRecommendationStatement\", \"clinicalRecommendationStatement\", str, False, None, False),\n            (\"compositeScoring\", \"compositeScoring\", codeableconcept.CodeableConcept, False, None, False),\n            (\"contact\", \"contact\", contactdetail.ContactDetail, True, None, False),\n            (\"copyright\", \"copyright\", str, False, None, False),\n            (\"date\", \"date\", fhirdatetime.FHIRDateTime, False, None, False),\n            (\"definition\", \"definition\", str, True, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"disclaimer\", \"disclaimer\", str, False, None, False),\n            (\"editor\", \"editor\", contactdetail.ContactDetail, True, None, False),\n            (\"effectivePeriod\", \"effectivePeriod\", period.Period, False, None, False),\n            (\"endorser\", \"endorser\", contactdetail.ContactDetail, True, None, False),\n            (\"experimental\", \"experimental\", bool, False, None, False),\n            (\"group\", \"group\", MeasureGroup, True, None, False),\n            (\"guidance\", \"guidance\", str, False, None, False),\n            (\"identifier\", \"identifier\", identifier.Identifier, True, None, False),\n            (\"improvementNotation\", \"improvementNotation\", codeableconcept.CodeableConcept, False, None, False),\n            (\"jurisdiction\", \"jurisdiction\", codeableconcept.CodeableConcept, True, None, False),\n            (\"lastReviewDate\", \"lastReviewDate\", fhirdate.FHIRDate, False, None, False),\n            (\"library\", \"library\", str, True, None, False),\n            (\"name\", \"name\", str, False, None, False),\n            (\"publisher\", \"publisher\", str, False, None, False),\n            (\"purpose\", \"purpose\", str, False, None, False),\n            (\"rateAggregation\", \"rateAggregation\", str, False, None, False),\n            (\"rationale\", \"rationale\", str, False, None, False),\n            (\"relatedArtifact\", \"relatedArtifact\", relatedartifact.RelatedArtifact, True, None, False),\n            (\"reviewer\", \"reviewer\", contactdetail.ContactDetail, True, None, False),\n            (\"riskAdjustment\", \"riskAdjustment\", str, False, None, False),\n            (\"scoring\", \"scoring\", codeableconcept.CodeableConcept, False, None, False),\n            (\"status\", \"status\", str, False, None, True),\n            (\"subjectCodeableConcept\", \"subjectCodeableConcept\", codeableconcept.CodeableConcept, False, \"subject\", False),\n            (\"subjectReference\", \"subjectReference\", fhirreference.FHIRReference, False, \"subject\", False),\n            (\"subtitle\", \"subtitle\", str, False, None, False),\n            (\"supplementalData\", \"supplementalData\", MeasureSupplementalData, True, None, False),\n            (\"title\", \"title\", str, False, None, False),\n            (\"topic\", \"topic\", codeableconcept.CodeableConcept, True, None, False),\n            (\"type\", \"type\", codeableconcept.CodeableConcept, True, None, False),\n            (\"url\", \"url\", str, False, None, False),\n            (\"usage\", \"usage\", str, False, None, False),\n            (\"useContext\", \"useContext\", usagecontext.UsageContext, True, None, False),\n            (\"version\", \"version\", str, False, None, False),\n        ])\n        return js\n\n\nfrom . import backboneelement\n\nclass MeasureGroup(backboneelement.BackboneElement):\n    \"\"\" Population criteria group.\n    \n    A group of population criteria for the measure.\n    \"\"\"\n    \n    resource_type = \"MeasureGroup\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Meaning of the group.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" Summary description.\n        Type `str`. \"\"\"\n        \n        self.population = None\n        \"\"\" Population criteria.\n        List of `MeasureGroupPopulation` items (represented as `dict` in JSON). \"\"\"\n        \n        self.stratifier = None\n        \"\"\" Stratifier criteria for the measure.\n        List of `MeasureGroupStratifier` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureGroup, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureGroup, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n            (\"population\", \"population\", MeasureGroupPopulation, True, None, False),\n            (\"stratifier\", \"stratifier\", MeasureGroupStratifier, True, None, False),\n        ])\n        return js\n\n\nclass MeasureGroupPopulation(backboneelement.BackboneElement):\n    \"\"\" Population criteria.\n    \n    A population criteria for the measure.\n    \"\"\"\n    \n    resource_type = \"MeasureGroupPopulation\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" initial-population | numerator | numerator-exclusion | denominator\n        | denominator-exclusion | denominator-exception | measure-\n        population | measure-population-exclusion | measure-observation.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.criteria = None\n        \"\"\" The criteria that defines this population.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" The human readable description of this population criteria.\n        Type `str`. \"\"\"\n        \n        super(MeasureGroupPopulation, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureGroupPopulation, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"criteria\", \"criteria\", expression.Expression, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n        ])\n        return js\n\n\nclass MeasureGroupStratifier(backboneelement.BackboneElement):\n    \"\"\" Stratifier criteria for the measure.\n    \n    The stratifier criteria for the measure report, specified as either the\n    name of a valid CQL expression defined within a referenced library or a\n    valid FHIR Resource Path.\n    \"\"\"\n    \n    resource_type = \"MeasureGroupStratifier\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Meaning of the stratifier.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.component = None\n        \"\"\" Stratifier criteria component for the measure.\n        List of `MeasureGroupStratifierComponent` items (represented as `dict` in JSON). \"\"\"\n        \n        self.criteria = None\n        \"\"\" How the measure should be stratified.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" The human readable description of this stratifier.\n        Type `str`. \"\"\"\n        \n        super(MeasureGroupStratifier, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureGroupStratifier, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"component\", \"component\", MeasureGroupStratifierComponent, True, None, False),\n            (\"criteria\", \"criteria\", expression.Expression, False, None, False),\n            (\"description\", \"description\", str, False, None, False),\n        ])\n        return js\n\n\nclass MeasureGroupStratifierComponent(backboneelement.BackboneElement):\n    \"\"\" Stratifier criteria component for the measure.\n    \n    A component of the stratifier criteria for the measure report, specified as\n    either the name of a valid CQL expression defined within a referenced\n    library or a valid FHIR Resource Path.\n    \"\"\"\n    \n    resource_type = \"MeasureGroupStratifierComponent\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Meaning of the stratifier component.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.criteria = None\n        \"\"\" Component of how the measure should be stratified.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" The human readable description of this stratifier component.\n        Type `str`. \"\"\"\n        \n        super(MeasureGroupStratifierComponent, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureGroupStratifierComponent, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"criteria\", \"criteria\", expression.Expression, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n        ])\n        return js\n\n\nclass MeasureSupplementalData(backboneelement.BackboneElement):\n    \"\"\" What other data should be reported with the measure.\n    \n    The supplemental data criteria for the measure report, specified as either\n    the name of a valid CQL expression within a referenced library, or a valid\n    FHIR Resource Path.\n    \"\"\"\n    \n    resource_type = \"MeasureSupplementalData\"\n    \n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.code = None\n        \"\"\" Meaning of the supplemental data.\n        Type `CodeableConcept` (represented as `dict` in JSON). \"\"\"\n        \n        self.criteria = None\n        \"\"\" Expression describing additional data to be reported.\n        Type `Expression` (represented as `dict` in JSON). \"\"\"\n        \n        self.description = None\n        \"\"\" The human readable description of this supplemental data.\n        Type `str`. \"\"\"\n        \n        self.usage = None\n        \"\"\" supplemental-data | risk-adjustment-factor.\n        List of `CodeableConcept` items (represented as `dict` in JSON). \"\"\"\n        \n        super(MeasureSupplementalData, self).__init__(jsondict=jsondict, strict=strict)\n    \n    def elementProperties(self):\n        js = super(MeasureSupplementalData, self).elementProperties()\n        js.extend([\n            (\"code\", \"code\", codeableconcept.CodeableConcept, False, None, False),\n            (\"criteria\", \"criteria\", expression.Expression, False, None, True),\n            (\"description\", \"description\", str, False, None, False),\n            (\"usage\", \"usage\", codeableconcept.CodeableConcept, True, None, False),\n        ])\n        return js\n\n\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext\n",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\n# 2024, SMART Health IT.\n\nimport datetime\nimport re\nfrom typing import Any, Union\n\nfrom .fhirdate import FHIRDate\n\n\n# This inherits from FHIRDate as a matter of backwards compatibility.\n# (in case anyone was doing isinstance(obj, FHIRDate))\n# Next time we bump the major version, we can stop that and also drop the\n# backwards-compatible 'date' alias. R4-QUIRK\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __init__(self, jsonval: Union[str, None] = None):\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)\n\n    ##################################\n    # Private properties and methods #\n    ##################################\n\n    # Pulled from spec for datetime\n    _REGEX = re.compile(r\"([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?\")\n    _FIELD = \"datetime\"\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)\n",
    "fhirclient/models/fhirabstractresource.py": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n#  Base class for FHIR resources.\n#  2014, SMART Health IT.\n\nfrom . import fhirabstractbase\n\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n    \n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        \"\"\" The server the instance was read from. \"\"\"\n        \n        # raise if \"resourceType\" does not match\n        if jsondict is not None and 'resourceType' in jsondict \\\n            and jsondict['resourceType'] != self.resource_type:\n            raise Exception(\"Attempting to instantiate {} with resource data that defines a resourceType of \\\"{}\\\"\"\n                .format(self.__class__, jsondict['resourceType']))\n        \n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n    \n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception(\"Cannot use this method with anything but a JSON dictionary, got {}\"\n                .format(jsondict))\n        \n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n    \n    def as_json(self):\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js\n    \n    \n    # MARK: Handling Paths\n    \n    def relativeBase(self):\n        return self.__class__.resource_type\n    \n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return \"{}/{}\".format(self.relativeBase(), self.id)\n    \n    \n    # MARK: - Server Connection\n    \n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n    \n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception(\"Cannot read resource without remote id\")\n        \n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        \n        return instance\n    \n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception(\"Cannot read resource without REST path\")\n        if server is None:\n            raise Exception(\"Cannot read resource without server instance\")\n        \n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = (\"batch\", \"transaction\")\n\n        if self.resource_type == \"Bundle\" and self.type in root_post_types:\n            return None\n\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot create a resource without a server\")\n        if self.id:\n            raise Exception(\"This resource already has an id, cannot create\")\n\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot update a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot update a resource that does not have an id\")\n        \n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception(\"Cannot delete a resource that does not have a server\")\n        if not self.id:\n            raise Exception(\"Cannot delete a resource that does not have an id\")\n        \n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n    \n    \n    # MARK: - Search\n    \n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n    \n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\n\n\nfrom . import fhirsearch\nfrom . import fhirelementfactory\n"
  },
  "GT_src_dict": {
    "fhirclient/models/fhirdate.py": {
      "FHIRDate.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes an instance of the FHIRDate class, which represents a FHIR date in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR date in ISO 8601 format. If None, initializes a date value to None. If provided, must be a string that matches a specific regex pattern defined by _REGEX, which ensures it adheres to the expected date format.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format as enforced by _REGEX.\n\nAttributes:\n- date: A datetime object representing the parsed date from jsonval. It is initialized to None if jsonval is not provided.\n- origval: Stores the original string value of jsonval passed during object creation.\n\nConstants:\n- _REGEX: A regular expression pattern that validates the format of the FHIR date strings. It is used to ensure that the input string correctly represents a date in accordance with the FHIR specification.\"\"\"\n        self.date: Union[datetime.date, datetime.datetime, datetime.time, None] = None\n        if jsonval is not None:\n            if not isinstance(jsonval, str):\n                raise TypeError('Expecting string when initializing {}, but got {}'.format(type(self), type(jsonval)))\n            if not self._REGEX.fullmatch(jsonval):\n                raise ValueError('does not match expected format')\n            self.date = self._from_string(jsonval)\n        self.origval: Union[str, None] = jsonval",
        "docstring": "Initializes an instance of the FHIRDate class, which represents a FHIR date in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR date in ISO 8601 format. If None, initializes a date value to None. If provided, must be a string that matches a specific regex pattern defined by _REGEX, which ensures it adheres to the expected date format.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format as enforced by _REGEX.\n\nAttributes:\n- date: A datetime object representing the parsed date from jsonval. It is initialized to None if jsonval is not provided.\n- origval: Stores the original string value of jsonval passed during object creation.\n\nConstants:\n- _REGEX: A regular expression pattern that validates the format of the FHIR date strings. It is used to ensure that the input string correctly represents a date in accordance with the FHIR specification.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      },
      "FHIRDate.as_json": {
        "code": "    def as_json(self) -> Union[str, None]:\n        \"\"\"Returns the original JSON string used to create this instance of FHIRDate, or a standardized ISO 8601 string representation of the date if the original JSON is not available. The method first checks the instance attribute `origval`, which stores the original JSON string. If `origval` is not `None`, it is returned directly. Otherwise, the method calls the `isostring` property to generate and return the ISO 8601 compliant date string, which may convert partial dates to a full date representation. No input parameters are required, and the return value can be either a string or `None`. This method is important for serialization, allowing original input retention or standardized output as needed. The `isostring` property uses the `date` attribute, an instance of `datetime.date`, to generate the ISO string format.\"\"\"\n        'Returns the original JSON string used to create this instance.'\n        if self.origval is not None:\n            return self.origval\n        return self.isostring",
        "docstring": "Returns the original JSON string used to create this instance of FHIRDate, or a standardized ISO 8601 string representation of the date if the original JSON is not available. The method first checks the instance attribute `origval`, which stores the original JSON string. If `origval` is not `None`, it is returned directly. Otherwise, the method calls the `isostring` property to generate and return the ISO 8601 compliant date string, which may convert partial dates to a full date representation. No input parameters are required, and the return value can be either a string or `None`. This method is important for serialization, allowing original input retention or standardized output as needed. The `isostring` property uses the `date` attribute, an instance of `datetime.date`, to generate the ISO string format.",
        "signature": "def as_json(self) -> Union[str, None]:",
        "type": "Method",
        "class_signature": "class FHIRDate:"
      }
    },
    "fhirclient/models/measure.py": {
      "Measure.__init__": {
        "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\"Initialize a Measure resource, which defines a quality measure's specifics and metadata.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the properties of the Measure. This allows for the direct mapping of JSON data to the class attributes.\n- strict (bool, optional): If set to True (default), the method will raise a FHIRValidationError for any invalid variables during initialization.\n\nAttributes:\n- approvalDate: The date when the measure was approved by the publisher.\n- author: A list of ContactDetail entries representing the authors of the content.\n- clinicalRecommendationStatement: A summary of clinical guidelines related to the measure.\n- compositeScoring: Defines how the measure's scoring is aggregated.\n- contact: A list of ContactDetail entries offering contact information for the publisher.\n- copyright: Any use or publishing restrictions for the measure.\n- date: The date when the measure was last modified.\n- definition: Terms defined in the measure documentation.\n- description: A human-readable description of the measure.\n- disclaimer: A disclaimer regarding the measure or referenced content.\n- editor, endorser, reviewer: Metadata indicating individuals or organizations involved with the measure.\n- effectivePeriod: The time period during which the measure is effective.\n- experimental: Indicates if the measure is for testing purposes.\n- group: A collection of MeasureGroup entries defining population criteria.\n- guidance: Additional context or guidance for implementers.\n- identifier: A collection of identifiers associated with the measure.\n- improvementNotation: Indicates whether the measure's score should increase or decrease.\n- jurisdiction: The geographic area relevant to the measure.\n- lastReviewDate: The date when the measure was last reviewed.\n- library: References to libraries with logic used by the measure.\n- name, publisher, purpose, rateAggregation, rationale, scoring, status, subjectCodeableConcept, subjectReference, subtitle, title, topic, type, url, usage, useContext, version: Various metadata and categorization attributes relevant to the measure.\n\nThis class inherits from the DomainResource class, which provides foundational properties and methods required by all FHIR resources.\"\"\"\n        ' Initialize all valid properties.\\n        \\n        :raises: FHIRValidationError on validation errors, unless strict is False\\n        :param dict jsondict: A JSON dictionary to use for initialization\\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\\n        '\n        self.approvalDate = None\n        ' When the measure was approved by publisher.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.author = None\n        ' Who authored the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.clinicalRecommendationStatement = None\n        ' Summary of clinical guidelines.\\n        Type `str`. '\n        self.compositeScoring = None\n        ' opportunity | all-or-nothing | linear | weighted.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.contact = None\n        ' Contact details for the publisher.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.copyright = None\n        ' Use and/or publishing restrictions.\\n        Type `str`. '\n        self.date = None\n        ' Date last changed.\\n        Type `FHIRDateTime` (represented as `str` in JSON). '\n        self.definition = None\n        ' Defined terms used in the measure documentation.\\n        List of `str` items. '\n        self.description = None\n        ' Natural language description of the measure.\\n        Type `str`. '\n        self.disclaimer = None\n        ' Disclaimer for use of the measure or its referenced content.\\n        Type `str`. '\n        self.editor = None\n        ' Who edited the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.effectivePeriod = None\n        ' When the measure is expected to be used.\\n        Type `Period` (represented as `dict` in JSON). '\n        self.endorser = None\n        ' Who endorsed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.experimental = None\n        ' For testing purposes, not real usage.\\n        Type `bool`. '\n        self.group = None\n        ' Population criteria group.\\n        List of `MeasureGroup` items (represented as `dict` in JSON). '\n        self.guidance = None\n        ' Additional guidance for implementers.\\n        Type `str`. '\n        self.identifier = None\n        ' Additional identifier for the measure.\\n        List of `Identifier` items (represented as `dict` in JSON). '\n        self.improvementNotation = None\n        ' increase | decrease.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.jurisdiction = None\n        ' Intended jurisdiction for measure (if applicable).\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.lastReviewDate = None\n        ' When the measure was last reviewed.\\n        Type `FHIRDate` (represented as `str` in JSON). '\n        self.library = None\n        ' Logic used by the measure.\\n        List of `str` items. '\n        self.name = None\n        ' Name for this measure (computer friendly).\\n        Type `str`. '\n        self.publisher = None\n        ' Name of the publisher (organization or individual).\\n        Type `str`. '\n        self.purpose = None\n        ' Why this measure is defined.\\n        Type `str`. '\n        self.rateAggregation = None\n        ' How is rate aggregation performed for this measure.\\n        Type `str`. '\n        self.rationale = None\n        ' Detailed description of why the measure exists.\\n        Type `str`. '\n        self.relatedArtifact = None\n        ' Additional documentation, citations, etc..\\n        List of `RelatedArtifact` items (represented as `dict` in JSON). '\n        self.reviewer = None\n        ' Who reviewed the content.\\n        List of `ContactDetail` items (represented as `dict` in JSON). '\n        self.riskAdjustment = None\n        ' How risk adjustment is applied for this measure.\\n        Type `str`. '\n        self.scoring = None\n        ' proportion | ratio | continuous-variable | cohort.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.status = None\n        ' draft | active | retired | unknown.\\n        Type `str`. '\n        self.subjectCodeableConcept = None\n        ' E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\\n        Device.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.subjectReference = None\n        ' E.g. Patient, Practitioner, RelatedPerson, Organization, Location,\\n        Device.\\n        Type `FHIRReference` (represented as `dict` in JSON). '\n        self.subtitle = None\n        ' Subordinate title of the measure.\\n        Type `str`. '\n        self.supplementalData = None\n        ' What other data should be reported with the measure.\\n        List of `MeasureSupplementalData` items (represented as `dict` in JSON). '\n        self.title = None\n        ' Name for this measure (human friendly).\\n        Type `str`. '\n        self.topic = None\n        ' The category of the measure, such as Education, Treatment,\\n        Assessment, etc..\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.type = None\n        ' process | outcome | structure | patient-reported-outcome |\\n        composite.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        self.url = None\n        ' Canonical identifier for this measure, represented as a URI\\n        (globally unique).\\n        Type `str`. '\n        self.usage = None\n        ' Describes the clinical usage of the measure.\\n        Type `str`. '\n        self.useContext = None\n        ' The context that the content is intended to support.\\n        List of `UsageContext` items (represented as `dict` in JSON). '\n        self.version = None\n        ' Business version of the measure.\\n        Type `str`. '\n        super(Measure, self).__init__(jsondict=jsondict, strict=strict)",
        "docstring": "Initialize a Measure resource, which defines a quality measure's specifics and metadata.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the properties of the Measure. This allows for the direct mapping of JSON data to the class attributes.\n- strict (bool, optional): If set to True (default), the method will raise a FHIRValidationError for any invalid variables during initialization.\n\nAttributes:\n- approvalDate: The date when the measure was approved by the publisher.\n- author: A list of ContactDetail entries representing the authors of the content.\n- clinicalRecommendationStatement: A summary of clinical guidelines related to the measure.\n- compositeScoring: Defines how the measure's scoring is aggregated.\n- contact: A list of ContactDetail entries offering contact information for the publisher.\n- copyright: Any use or publishing restrictions for the measure.\n- date: The date when the measure was last modified.\n- definition: Terms defined in the measure documentation.\n- description: A human-readable description of the measure.\n- disclaimer: A disclaimer regarding the measure or referenced content.\n- editor, endorser, reviewer: Metadata indicating individuals or organizations involved with the measure.\n- effectivePeriod: The time period during which the measure is effective.\n- experimental: Indicates if the measure is for testing purposes.\n- group: A collection of MeasureGroup entries defining population criteria.\n- guidance: Additional context or guidance for implementers.\n- identifier: A collection of identifiers associated with the measure.\n- improvementNotation: Indicates whether the measure's score should increase or decrease.\n- jurisdiction: The geographic area relevant to the measure.\n- lastReviewDate: The date when the measure was last reviewed.\n- library: References to libraries with logic used by the measure.\n- name, publisher, purpose, rateAggregation, rationale, scoring, status, subjectCodeableConcept, subjectReference, subtitle, title, topic, type, url, usage, useContext, version: Various metadata and categorization attributes relevant to the measure.\n\nThis class inherits from the DomainResource class, which provides foundational properties and methods required by all FHIR resources.",
        "signature": "def __init__(self, jsondict=None, strict=True):",
        "type": "Method",
        "class_signature": "class Measure(domainresource.DomainResource):"
      }
    },
    "fhirclient/models/fhirdatetime.py": {
      "FHIRDateTime.__init__": {
        "code": "    def __init__(self, jsonval: Union[str, None]=None):\n        \"\"\"Initializes a new instance of the FHIRDateTime class, which is a convenience wrapper for handling FHIR datetime fields in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in ISO 8601 format. If None, a new instance is created without a specific datetime value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Initializes as None and will hold a datetime object if a valid jsonval is provided. This attribute may represent either naive or aware datetime instances, depending on the content of jsonval.\n\nThis constructor calls the superclass (FHIRDate) initializer to ensure proper setup for the object, enabling it to handle the original JSON input. The superclass may define additional properties and behaviors related to FHIR dates.\"\"\"\n        self.datetime: Union[datetime.datetime, None] = None\n        super().__init__(jsonval)",
        "docstring": "Initializes a new instance of the FHIRDateTime class, which is a convenience wrapper for handling FHIR datetime fields in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in ISO 8601 format. If None, a new instance is created without a specific datetime value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Initializes as None and will hold a datetime object if a valid jsonval is provided. This attribute may represent either naive or aware datetime instances, depending on the content of jsonval.\n\nThis constructor calls the superclass (FHIRDate) initializer to ensure proper setup for the object, enabling it to handle the original JSON input. The superclass may define additional properties and behaviors related to FHIR dates.",
        "signature": "def __init__(self, jsonval: Union[str, None]=None):",
        "type": "Method",
        "class_signature": "class FHIRDateTime(FHIRDate):"
      }
    },
    "fhirclient/models/fhirabstractresource.py": {
      "FHIRAbstractResource.as_json": {
        "code": "    def as_json(self):\n        \"\"\"Converts the current instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the resource type in the output. It adds the 'resourceType' key with the value of `self.resource_type`, which is a class-level attribute indicating the specific type of FHIR resource being represented (defaulting to 'FHIRAbstractResource').\n\n:return: A dictionary representation of the resource instance, including the 'resourceType' key.\"\"\"\n        js = super(FHIRAbstractResource, self).as_json()\n        js['resourceType'] = self.resource_type\n        return js",
        "docstring": "Converts the current instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the resource type in the output. It adds the 'resourceType' key with the value of `self.resource_type`, which is a class-level attribute indicating the specific type of FHIR resource being represented (defaulting to 'FHIRAbstractResource').\n\n:return: A dictionary representation of the resource instance, including the 'resourceType' key.",
        "signature": "def as_json(self):",
        "type": "Method",
        "class_signature": "class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):"
      }
    }
  },
  "dependency_dict": {
    "fhirclient/models/measure.py:Measure:__init__": {
      "fhirclient/models/domainresource.py": {
        "DomainResource.__init__": {
          "code": "    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        \n        self.contained = None\n        \"\"\" Contained, inline Resources.\n        List of `Resource` items (represented as `dict` in JSON). \"\"\"\n        \n        self.extension = None\n        \"\"\" Additional content defined by implementations.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.modifierExtension = None\n        \"\"\" Extensions that cannot be ignored.\n        List of `Extension` items (represented as `dict` in JSON). \"\"\"\n        \n        self.text = None\n        \"\"\" Text summary of the resource, for human interpretation.\n        Type `Narrative` (represented as `dict` in JSON). \"\"\"\n        \n        super(DomainResource, self).__init__(jsondict=jsondict, strict=strict)",
          "docstring": "Initialize all valid properties.\n\n:raises: FHIRValidationError on validation errors, unless strict is False\n:param dict jsondict: A JSON dictionary to use for initialization\n:param bool strict: If True (the default), invalid variables will raise a TypeError",
          "signature": "def __init__(self, jsondict=None, strict=True):",
          "type": "Method",
          "class_signature": "class DomainResource(resource.Resource):"
        }
      }
    },
    "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
      "fhirclient/models/fhirabstractbase.py": {
        "FHIRAbstractBase.as_json": {
          "code": "    def as_json(self):\n        \"\"\" Serializes to JSON by inspecting `elementProperties()` and creating\n        a JSON dictionary of all registered properties. Checks:\n        \n        - whether required properties are not None (and lists not empty)\n        - whether not-None properties are of the correct type\n        \n        :raises: FHIRValidationError if properties have the wrong type or if\n            required properties are empty\n        :returns: A validated dict object that can be JSON serialized\n        \"\"\"\n        js = {}\n        errs = []\n        \n        # JSONify all registered properties\n        found = set()\n        nonoptionals = set()\n        for name, jsname, typ, is_list, of_many, not_optional in self.elementProperties():\n            if not_optional:\n                nonoptionals.add(of_many or jsname)\n            \n            err = None\n            value = getattr(self, name)\n            if value is None:\n                continue\n            \n            if is_list:\n                if not isinstance(value, list):\n                   err = TypeError(\"Expecting property \\\"{}\\\" on {} to be list, but is {}\"\n                       .format(name, type(self), type(value)))\n                elif len(value) > 0:\n                    if not self._matches_type(value[0], typ):\n                        err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                            .format(name, type(self), typ, type(value[0])))\n                    else:\n                        lst = []\n                        for v in value:\n                            try:\n                                lst.append(v.as_json() if hasattr(v, 'as_json') else v)\n                            except FHIRValidationError as e:\n                                err = e.prefixed(str(len(lst))).prefixed(name)\n                        found.add(of_many or jsname)\n                        js[jsname] = lst\n            else:\n                if not self._matches_type(value, typ):\n                    err = TypeError(\"Expecting property \\\"{}\\\" on {} to be {}, but is {}\"\n                        .format(name, type(self), typ, type(value)))\n                else:\n                    try:\n                        found.add(of_many or jsname)\n                        js[jsname] = value.as_json() if hasattr(value, 'as_json') else value\n                    except FHIRValidationError as e:\n                        err = e.prefixed(name)\n            \n            if err is not None:\n                errs.append(err if isinstance(err, FHIRValidationError) else FHIRValidationError([err], name))\n        \n        # any missing non-optionals?\n        if len(nonoptionals - found) > 0:\n            for nonop in nonoptionals - found:\n                errs.append(KeyError(\"Property \\\"{}\\\" on {} is not optional, you must provide a value for it\"\n                    .format(nonop, self)))\n        \n        if len(errs) > 0:\n            raise FHIRValidationError(errs)\n        return js",
          "docstring": "Serializes to JSON by inspecting `elementProperties()` and creating\na JSON dictionary of all registered properties. Checks:\n\n- whether required properties are not None (and lists not empty)\n- whether not-None properties are of the correct type\n\n:raises: FHIRValidationError if properties have the wrong type or if\n    required properties are empty\n:returns: A validated dict object that can be JSON serialized",
          "signature": "def as_json(self):",
          "type": "Method",
          "class_signature": "class FHIRAbstractBase(object):"
        }
      }
    },
    "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        },
        "FHIRDate._from_string": {
          "code": "    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
          "docstring": "",
          "signature": "def _from_string(value: str) -> Any:",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    },
    "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
      "fhirclient/models/fhirdate.py": {
        "FHIRDate.__setattr__": {
          "code": "    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)",
          "docstring": "",
          "signature": "def __setattr__(self, prop, value):",
          "type": "Method",
          "class_signature": "class FHIRDate:"
        }
      }
    }
  },
  "call_tree": {
    "tests/models/measure_test.py:MeasureTests:testMeasure1": {
      "tests/models/measure_test.py:MeasureTests:instantiate_from": {
        "fhirclient/models/measure.py:Measure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
                    "fhirclient/models/measure.py:Measure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measure_test.py:MeasureTests:implMeasure1": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/fhirabstractbase.py:FHIRValidationError:FHIRValidationError": {},
          "fhirclient/models/measure.py:Measure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/measure.py:Measure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measure.py:Measure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measure_test.py:MeasureTests:instantiate_from": {
      "fhirclient/models/measure.py:Measure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measure.py:Measure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measure_test.py:MeasureTests:testMeasure2": {
      "tests/models/measure_test.py:MeasureTests:instantiate_from": {
        "fhirclient/models/measure.py:Measure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/measure.py:Measure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measure_test.py:MeasureTests:implMeasure2": {
        "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:_from_string": {
            "fhirclient/models/fhirdate.py:FHIRDate:_parse_date": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {},
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        }
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/measure.py:Measure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/measure.py:Measure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measure.py:Measure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdate.py:FHIRDate:__init__": {},
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measure_test.py:MeasureTests:testMeasure3": {
      "tests/models/measure_test.py:MeasureTests:instantiate_from": {
        "fhirclient/models/measure.py:Measure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/measure.py:Measure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measure_test.py:MeasureTests:implMeasure3": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/measure.py:Measure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/measure.py:Measure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measure.py:Measure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measure_test.py:MeasureTests:testMeasure4": {
      "tests/models/measure_test.py:MeasureTests:instantiate_from": {
        "fhirclient/models/measure.py:Measure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/measure.py:Measure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    },
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                      "fhirclient/models/fhirdate.py:FHIRDate:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measure_test.py:MeasureTests:implMeasure4": {
        "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {
          "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "[ignored_or_cut_off]": "..."
            }
          },
          "fhirclient/models/fhirdate.py:FHIRDate:__init__": {
            "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
              "fhirclient/models/fhirdate.py:FHIRDate:__setattr__": {
                "[ignored_or_cut_off]": "..."
              }
            },
            "fhirclient/models/fhirdatetime.py:FHIRDateTime:_from_string": {
              "fhirclient/models/fhirdate.py:FHIRDate:_parse_datetime": {
                "fhirclient/models/fhirdate.py:FHIRDate:_strip_leap_seconds": {},
                "fhirclient/models/fhirdate.py:FHIRDate:_parse_partial": {}
              }
            }
          }
        },
        "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
      },
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/measure.py:Measure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          },
          "fhirclient/models/fhirdate.py:FHIRDate:as_json": {}
        }
      },
      "fhirclient/models/measure.py:Measure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measure.py:Measure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  },
                  "fhirclient/models/fhirdate.py:FHIRDate:with_json_and_owner": {
                    "fhirclient/models/fhirdate.py:FHIRDate:with_json": {
                      "fhirclient/models/fhirdatetime.py:FHIRDateTime:__init__": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tests/models/measure_test.py:MeasureTests:testMeasure5": {
      "tests/models/measure_test.py:MeasureTests:instantiate_from": {
        "fhirclient/models/measure.py:Measure:__init__": {
          "fhirclient/models/domainresource.py:DomainResource:__init__": {
            "fhirclient/models/resource.py:Resource:__init__": {
              "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                    "fhirclient/models/measure.py:Measure:elementProperties": {
                      "fhirclient/models/domainresource.py:DomainResource:elementProperties": {}
                    },
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tests/models/measure_test.py:MeasureTests:implMeasure5": {},
      "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:as_json": {
        "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
          "fhirclient/models/measure.py:Measure:elementProperties": {
            "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
              "fhirclient/models/resource.py:Resource:elementProperties": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:elementProperties": {}
              }
            }
          },
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
          "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:as_json": {
            "[ignored_or_cut_off]": "..."
          }
        }
      },
      "fhirclient/models/measure.py:Measure:__init__": {
        "fhirclient/models/domainresource.py:DomainResource:__init__": {
          "fhirclient/models/resource.py:Resource:__init__": {
            "fhirclient/models/fhirabstractresource.py:FHIRAbstractResource:__init__": {
              "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:__init__": {
                "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:update_with_json": {
                  "fhirclient/models/measure.py:Measure:elementProperties": {
                    "fhirclient/models/domainresource.py:DomainResource:elementProperties": {
                      "fhirclient/models/resource.py:Resource:elementProperties": {}
                    }
                  },
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_matches_type": {},
                  "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json_and_owner": {
                    "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:with_json": {
                      "fhirclient/models/fhirabstractbase.py:FHIRAbstractBase:_with_json_dict": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "PRD": "# PROJECT NAME: fhirclient-measure_test\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 fhirclient/\n    \u2514\u2500\u2500 models/\n        \u251c\u2500\u2500 fhirabstractresource.py\n        \u2502   \u2514\u2500\u2500 FHIRAbstractResource.as_json\n        \u251c\u2500\u2500 fhirdate.py\n        \u2502   \u251c\u2500\u2500 FHIRDate.__init__\n        \u2502   \u2514\u2500\u2500 FHIRDate.as_json\n        \u251c\u2500\u2500 fhirdatetime.py\n        \u2502   \u2514\u2500\u2500 FHIRDateTime.__init__\n        \u2514\u2500\u2500 measure.py\n            \u2514\u2500\u2500 Measure.__init__\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module is designed to validate and test compliance of FHIR Measure resources within the SMART Health IT ecosystem using the HL7 FHIR v4.0.1 framework. It focuses on loading, parsing, and verifying the structural and logical integrity of Measure definitions, ensuring adherence to FHIR standards for healthcare quality measures. By supporting detailed validation of key attributes such as population criteria, scoring methods, stratifiers, metadata, and improvement notations, the module enables developers and stakeholders to test and maintain the accuracy and reliability of clinical quality measure implementations. This facilitates streamlined development, accurate assessment of quality benchmarks, and improved conformance to healthcare interoperability standards.\n\n## FILE 1: fhirclient/models/fhirdate.py\n\n- CLASS METHOD: FHIRDate.__init__\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the FHIRDate class, which represents a FHIR date in Python.\n\nParameters:\n- jsonval (Union[str, None]): A string representing the FHIR date in ISO 8601 format. If None, initializes a date value to None. If provided, must be a string that matches a specific regex pattern defined by _REGEX, which ensures it adheres to the expected date format.\n\nRaises:\n- TypeError: If jsonval is not a string.\n- ValueError: If jsonval does not match the expected date format as enforced by _REGEX.\n\nAttributes:\n- date: A datetime object representing the parsed date from jsonval. It is initialized to None if jsonval is not provided.\n- origval: Stores the original string value of jsonval passed during object creation.\n\nConstants:\n- _REGEX: A regular expression pattern that validates the format of the FHIR date strings. It is used to ensure that the input string correctly represents a date in accordance with the FHIR specification.\n\"\"\"\n```\n\n- CLASS METHOD: FHIRDate.as_json\n  - CLASS SIGNATURE: class FHIRDate:\n  - SIGNATURE: def as_json(self) -> Union[str, None]:\n  - DOCSTRING: \n```python\n\"\"\"\nReturns the original JSON string used to create this instance of FHIRDate, or a standardized ISO 8601 string representation of the date if the original JSON is not available. The method first checks the instance attribute `origval`, which stores the original JSON string. If `origval` is not `None`, it is returned directly. Otherwise, the method calls the `isostring` property to generate and return the ISO 8601 compliant date string, which may convert partial dates to a full date representation. No input parameters are required, and the return value can be either a string or `None`. This method is important for serialization, allowing original input retention or standardized output as needed. The `isostring` property uses the `date` attribute, an instance of `datetime.date`, to generate the ISO string format.\n\"\"\"\n```\n\n## FILE 2: fhirclient/models/measure.py\n\n- CLASS METHOD: Measure.__init__\n  - CLASS SIGNATURE: class Measure(domainresource.DomainResource):\n  - SIGNATURE: def __init__(self, jsondict=None, strict=True):\n  - DOCSTRING: \n```python\n\"\"\"\nInitialize a Measure resource, which defines a quality measure's specifics and metadata.\n\nParameters:\n- jsondict (dict, optional): A JSON dictionary used for initializing the properties of the Measure. This allows for the direct mapping of JSON data to the class attributes.\n- strict (bool, optional): If set to True (default), the method will raise a FHIRValidationError for any invalid variables during initialization.\n\nAttributes:\n- approvalDate: The date when the measure was approved by the publisher.\n- author: A list of ContactDetail entries representing the authors of the content.\n- clinicalRecommendationStatement: A summary of clinical guidelines related to the measure.\n- compositeScoring: Defines how the measure's scoring is aggregated.\n- contact: A list of ContactDetail entries offering contact information for the publisher.\n- copyright: Any use or publishing restrictions for the measure.\n- date: The date when the measure was last modified.\n- definition: Terms defined in the measure documentation.\n- description: A human-readable description of the measure.\n- disclaimer: A disclaimer regarding the measure or referenced content.\n- editor, endorser, reviewer: Metadata indicating individuals or organizations involved with the measure.\n- effectivePeriod: The time period during which the measure is effective.\n- experimental: Indicates if the measure is for testing purposes.\n- group: A collection of MeasureGroup entries defining population criteria.\n- guidance: Additional context or guidance for implementers.\n- identifier: A collection of identifiers associated with the measure.\n- improvementNotation: Indicates whether the measure's score should increase or decrease.\n- jurisdiction: The geographic area relevant to the measure.\n- lastReviewDate: The date when the measure was last reviewed.\n- library: References to libraries with logic used by the measure.\n- name, publisher, purpose, rateAggregation, rationale, scoring, status, subjectCodeableConcept, subjectReference, subtitle, title, topic, type, url, usage, useContext, version: Various metadata and categorization attributes relevant to the measure.\n\nThis class inherits from the DomainResource class, which provides foundational properties and methods required by all FHIR resources.\n\"\"\"\n```\n\n## FILE 3: fhirclient/models/fhirdatetime.py\n\n- CLASS METHOD: FHIRDateTime.__init__\n  - CLASS SIGNATURE: class FHIRDateTime(FHIRDate):\n  - SIGNATURE: def __init__(self, jsonval: Union[str, None]=None):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes a new instance of the FHIRDateTime class, which is a convenience wrapper for handling FHIR datetime fields in Python.\n\nParameters:\n- jsonval (Union[str, None]): An optional string representing a FHIR datetime in ISO 8601 format. If None, a new instance is created without a specific datetime value.\n\nAttributes:\n- self.datetime (Union[datetime.datetime, None]): Initializes as None and will hold a datetime object if a valid jsonval is provided. This attribute may represent either naive or aware datetime instances, depending on the content of jsonval.\n\nThis constructor calls the superclass (FHIRDate) initializer to ensure proper setup for the object, enabling it to handle the original JSON input. The superclass may define additional properties and behaviors related to FHIR dates.\n\"\"\"\n```\n\n## FILE 4: fhirclient/models/fhirabstractresource.py\n\n- CLASS METHOD: FHIRAbstractResource.as_json\n  - CLASS SIGNATURE: class FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n  - SIGNATURE: def as_json(self):\n  - DOCSTRING: \n```python\n\"\"\"\nConverts the current instance of FHIRAbstractResource to a JSON-compatible dictionary.\n\nThis method overrides the `as_json` method from the superclass `FHIRAbstractBase` to include the resource type in the output. It adds the 'resourceType' key with the value of `self.resource_type`, which is a class-level attribute indicating the specific type of FHIR resource being represented (defaulting to 'FHIRAbstractResource').\n\n:return: A dictionary representation of the resource instance, including the 'resourceType' key.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "fhirclient/models/fhirdate.py": "\"\"\"Facilitate working with FHIR dates and times.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\n\nclass FHIRDate:\n    \"\"\"\n    A convenience class for working with FHIR dates in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#date\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      dates using the earliest possible time (in this example, \"2024-01-01\") because Python's\n      date class does not support partial dates.\n\n    If such compromise is not useful for you, avoid using the `date` or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    For backwards-compatibility reasons, this class is the parent class of FHIRDateTime,\n    FHIRInstant, and FHIRTime. But they are all separate concepts and in a future major release,\n    they should be split into entirely separate classes.\n\n    Public properties:\n    - `date`: datetime.date representing the JSON value\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n\n    def __setattr__(self, prop, value):\n        if prop in {'date', self._FIELD}:\n            self.origval = None\n            object.__setattr__(self, self._FIELD, value)\n            object.__setattr__(self, 'date', value)\n        else:\n            object.__setattr__(self, prop, value)\n\n    @property\n    def isostring(self) -> Union[str, None]:\n        \"\"\"\n        Returns a standardized ISO 8601 version of the Python representation of the FHIR JSON.\n\n        Note that this may not be a fully accurate version of the input JSON.\n        In particular, it will convert partial dates like \"2024\" to full dates like \"2024-01-01\".\n        It will also normalize the timezone, if present.\n        \"\"\"\n        if self.date is None:\n            return None\n        return self.date.isoformat()\n\n    @classmethod\n    def with_json(cls, jsonobj: Union[str, list]):\n        \"\"\" Initialize a date from an ISO date string.\n        \"\"\"\n        if isinstance(jsonobj, str):\n            return cls(jsonobj)\n        if isinstance(jsonobj, list):\n            return [cls(jsonval) for jsonval in jsonobj]\n        raise TypeError('`cls.with_json()` only takes string or list of strings, but you provided {}'.format(type(jsonobj)))\n\n    @classmethod\n    def with_json_and_owner(cls, jsonobj: Union[str, list], owner):\n        \"\"\" Added for compatibility reasons to FHIRElement; \"owner\" is\n        discarded.\n        \"\"\"\n        return cls.with_json(jsonobj)\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?')\n    _FIELD = 'date'\n\n    @staticmethod\n    def _parse_partial(value: str, cls):\n        \"\"\"\n        Handle partial dates like 1970 or 1980-12.\n\n        FHIR allows them, but Python's datetime classes do not natively parse them.\n        \"\"\"\n        if len(value) < 10:\n            pieces = value.split('-')\n            if len(pieces) == 1:\n                return cls(int(pieces[0]), 1, 1)\n            else:\n                return cls(int(pieces[0]), int(pieces[1]), 1)\n        return cls.fromisoformat(value)\n\n    @staticmethod\n    def _parse_date(value: str) -> datetime.date:\n        return FHIRDate._parse_partial(value, datetime.date)\n\n    @staticmethod\n    def _parse_datetime(value: str) -> datetime.datetime:\n        value = value.replace('Z', '+00:00')\n        value = FHIRDate._strip_leap_seconds(value)\n        return FHIRDate._parse_partial(value, datetime.datetime)\n\n    @staticmethod\n    def _parse_time(value: str) -> datetime.time:\n        value = FHIRDate._strip_leap_seconds(value)\n        return datetime.time.fromisoformat(value)\n\n    @staticmethod\n    def _strip_leap_seconds(value: str) -> str:\n        \"\"\"\n        Manually ignore leap seconds by clamping the seconds value to 59.\n\n        Python native times don't support them (at the time of this writing, but also watch\n        https://bugs.python.org/issue23574). For example, the stdlib's datetime.fromtimestamp()\n        also clamps to 59 if the system gives it leap seconds.\n\n        But FHIR allows leap seconds and says receiving code SHOULD accept them,\n        so we should be graceful enough to at least not throw a ValueError,\n        even though we can't natively represent the most-correct time.\n        \"\"\"\n        return value.replace(':60', ':59')\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_date(value)",
    "fhirclient/models/measure.py": "from . import domainresource\n\nclass Measure(domainresource.DomainResource):\n    \"\"\" A quality measure definition.\n    \n    The Measure resource provides the definition of a quality measure.\n    \"\"\"\n    resource_type = 'Measure'\n\n    def elementProperties(self):\n        js = super(Measure, self).elementProperties()\n        js.extend([('approvalDate', 'approvalDate', fhirdate.FHIRDate, False, None, False), ('author', 'author', contactdetail.ContactDetail, True, None, False), ('clinicalRecommendationStatement', 'clinicalRecommendationStatement', str, False, None, False), ('compositeScoring', 'compositeScoring', codeableconcept.CodeableConcept, False, None, False), ('contact', 'contact', contactdetail.ContactDetail, True, None, False), ('copyright', 'copyright', str, False, None, False), ('date', 'date', fhirdatetime.FHIRDateTime, False, None, False), ('definition', 'definition', str, True, None, False), ('description', 'description', str, False, None, False), ('disclaimer', 'disclaimer', str, False, None, False), ('editor', 'editor', contactdetail.ContactDetail, True, None, False), ('effectivePeriod', 'effectivePeriod', period.Period, False, None, False), ('endorser', 'endorser', contactdetail.ContactDetail, True, None, False), ('experimental', 'experimental', bool, False, None, False), ('group', 'group', MeasureGroup, True, None, False), ('guidance', 'guidance', str, False, None, False), ('identifier', 'identifier', identifier.Identifier, True, None, False), ('improvementNotation', 'improvementNotation', codeableconcept.CodeableConcept, False, None, False), ('jurisdiction', 'jurisdiction', codeableconcept.CodeableConcept, True, None, False), ('lastReviewDate', 'lastReviewDate', fhirdate.FHIRDate, False, None, False), ('library', 'library', str, True, None, False), ('name', 'name', str, False, None, False), ('publisher', 'publisher', str, False, None, False), ('purpose', 'purpose', str, False, None, False), ('rateAggregation', 'rateAggregation', str, False, None, False), ('rationale', 'rationale', str, False, None, False), ('relatedArtifact', 'relatedArtifact', relatedartifact.RelatedArtifact, True, None, False), ('reviewer', 'reviewer', contactdetail.ContactDetail, True, None, False), ('riskAdjustment', 'riskAdjustment', str, False, None, False), ('scoring', 'scoring', codeableconcept.CodeableConcept, False, None, False), ('status', 'status', str, False, None, True), ('subjectCodeableConcept', 'subjectCodeableConcept', codeableconcept.CodeableConcept, False, 'subject', False), ('subjectReference', 'subjectReference', fhirreference.FHIRReference, False, 'subject', False), ('subtitle', 'subtitle', str, False, None, False), ('supplementalData', 'supplementalData', MeasureSupplementalData, True, None, False), ('title', 'title', str, False, None, False), ('topic', 'topic', codeableconcept.CodeableConcept, True, None, False), ('type', 'type', codeableconcept.CodeableConcept, True, None, False), ('url', 'url', str, False, None, False), ('usage', 'usage', str, False, None, False), ('useContext', 'useContext', usagecontext.UsageContext, True, None, False), ('version', 'version', str, False, None, False)])\n        return js\nfrom . import backboneelement\n\nclass MeasureGroup(backboneelement.BackboneElement):\n    \"\"\" Population criteria group.\n    \n    A group of population criteria for the measure.\n    \"\"\"\n    resource_type = 'MeasureGroup'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Meaning of the group.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.description = None\n        ' Summary description.\\n        Type `str`. '\n        self.population = None\n        ' Population criteria.\\n        List of `MeasureGroupPopulation` items (represented as `dict` in JSON). '\n        self.stratifier = None\n        ' Stratifier criteria for the measure.\\n        List of `MeasureGroupStratifier` items (represented as `dict` in JSON). '\n        super(MeasureGroup, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureGroup, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('description', 'description', str, False, None, False), ('population', 'population', MeasureGroupPopulation, True, None, False), ('stratifier', 'stratifier', MeasureGroupStratifier, True, None, False)])\n        return js\n\nclass MeasureGroupPopulation(backboneelement.BackboneElement):\n    \"\"\" Population criteria.\n    \n    A population criteria for the measure.\n    \"\"\"\n    resource_type = 'MeasureGroupPopulation'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' initial-population | numerator | numerator-exclusion | denominator\\n        | denominator-exclusion | denominator-exception | measure-\\n        population | measure-population-exclusion | measure-observation.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.criteria = None\n        ' The criteria that defines this population.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.description = None\n        ' The human readable description of this population criteria.\\n        Type `str`. '\n        super(MeasureGroupPopulation, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureGroupPopulation, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('criteria', 'criteria', expression.Expression, False, None, True), ('description', 'description', str, False, None, False)])\n        return js\n\nclass MeasureGroupStratifier(backboneelement.BackboneElement):\n    \"\"\" Stratifier criteria for the measure.\n    \n    The stratifier criteria for the measure report, specified as either the\n    name of a valid CQL expression defined within a referenced library or a\n    valid FHIR Resource Path.\n    \"\"\"\n    resource_type = 'MeasureGroupStratifier'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Meaning of the stratifier.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.component = None\n        ' Stratifier criteria component for the measure.\\n        List of `MeasureGroupStratifierComponent` items (represented as `dict` in JSON). '\n        self.criteria = None\n        ' How the measure should be stratified.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.description = None\n        ' The human readable description of this stratifier.\\n        Type `str`. '\n        super(MeasureGroupStratifier, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureGroupStratifier, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('component', 'component', MeasureGroupStratifierComponent, True, None, False), ('criteria', 'criteria', expression.Expression, False, None, False), ('description', 'description', str, False, None, False)])\n        return js\n\nclass MeasureGroupStratifierComponent(backboneelement.BackboneElement):\n    \"\"\" Stratifier criteria component for the measure.\n    \n    A component of the stratifier criteria for the measure report, specified as\n    either the name of a valid CQL expression defined within a referenced\n    library or a valid FHIR Resource Path.\n    \"\"\"\n    resource_type = 'MeasureGroupStratifierComponent'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Meaning of the stratifier component.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.criteria = None\n        ' Component of how the measure should be stratified.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.description = None\n        ' The human readable description of this stratifier component.\\n        Type `str`. '\n        super(MeasureGroupStratifierComponent, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureGroupStratifierComponent, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('criteria', 'criteria', expression.Expression, False, None, True), ('description', 'description', str, False, None, False)])\n        return js\n\nclass MeasureSupplementalData(backboneelement.BackboneElement):\n    \"\"\" What other data should be reported with the measure.\n    \n    The supplemental data criteria for the measure report, specified as either\n    the name of a valid CQL expression within a referenced library, or a valid\n    FHIR Resource Path.\n    \"\"\"\n    resource_type = 'MeasureSupplementalData'\n\n    def __init__(self, jsondict=None, strict=True):\n        \"\"\" Initialize all valid properties.\n        \n        :raises: FHIRValidationError on validation errors, unless strict is False\n        :param dict jsondict: A JSON dictionary to use for initialization\n        :param bool strict: If True (the default), invalid variables will raise a TypeError\n        \"\"\"\n        self.code = None\n        ' Meaning of the supplemental data.\\n        Type `CodeableConcept` (represented as `dict` in JSON). '\n        self.criteria = None\n        ' Expression describing additional data to be reported.\\n        Type `Expression` (represented as `dict` in JSON). '\n        self.description = None\n        ' The human readable description of this supplemental data.\\n        Type `str`. '\n        self.usage = None\n        ' supplemental-data | risk-adjustment-factor.\\n        List of `CodeableConcept` items (represented as `dict` in JSON). '\n        super(MeasureSupplementalData, self).__init__(jsondict=jsondict, strict=strict)\n\n    def elementProperties(self):\n        js = super(MeasureSupplementalData, self).elementProperties()\n        js.extend([('code', 'code', codeableconcept.CodeableConcept, False, None, False), ('criteria', 'criteria', expression.Expression, False, None, True), ('description', 'description', str, False, None, False), ('usage', 'usage', codeableconcept.CodeableConcept, True, None, False)])\n        return js\nfrom . import codeableconcept\nfrom . import contactdetail\nfrom . import expression\nfrom . import fhirdate\nfrom . import fhirdatetime\nfrom . import fhirreference\nfrom . import identifier\nfrom . import period\nfrom . import relatedartifact\nfrom . import usagecontext",
    "fhirclient/models/fhirdatetime.py": "\"\"\"Facilitate working with FHIR time fields.\"\"\"\nimport datetime\nimport re\nfrom typing import Any, Union\nfrom .fhirdate import FHIRDate\n\nclass FHIRDateTime(FHIRDate):\n    \"\"\"\n    A convenience class for working with FHIR datetimes in Python.\n\n    http://hl7.org/fhir/R4/datatypes.html#datetime\n\n    Converting to a Python representation does require some compromises:\n    - This class will convert partial dates (\"reduced precision dates\") like \"2024\" into full\n      naive datetimes using the earliest possible time (in this example, \"2024-01-01T00:00:00\")\n      because Python's datetime class does not support partial dates.\n    - FHIR allows arbitrary sub-second precision, but Python only holds microseconds.\n    - Leap seconds (:60) will be changed to the 59th second (:59) because Python's time classes\n      do not support leap seconds.\n\n    If such compromise is not useful for you, avoid using the `date`, `datetime`, or `isostring`\n    properties and just use the `as_json()` method in order to work with the original,\n    exact string.\n\n    Public properties:\n    - `datetime`: datetime.datetime representing the JSON value (naive or aware)\n    - `date`: backwards-compatibility alias for `datetime`\n    - `isostring`: an ISO 8601 string version of the above Python object\n\n    Public methods:\n    - `as_json`: returns the original JSON used to construct the instance\n    \"\"\"\n    _REGEX = re.compile('([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\\\.[0-9]+)?(Z|(\\\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?')\n    _FIELD = 'datetime'\n\n    @staticmethod\n    def _from_string(value: str) -> Any:\n        return FHIRDate._parse_datetime(value)",
    "fhirclient/models/fhirabstractresource.py": "from . import fhirabstractbase\n\nclass FHIRAbstractResource(fhirabstractbase.FHIRAbstractBase):\n    \"\"\" Extends the FHIRAbstractBase with server talking capabilities.\n    \"\"\"\n    resource_type = 'FHIRAbstractResource'\n\n    def __init__(self, jsondict=None, strict=True):\n        self._server = None\n        ' The server the instance was read from. '\n        if jsondict is not None and 'resourceType' in jsondict and (jsondict['resourceType'] != self.resource_type):\n            raise Exception('Attempting to instantiate {} with resource data that defines a resourceType of \"{}\"'.format(self.__class__, jsondict['resourceType']))\n        super(FHIRAbstractResource, self).__init__(jsondict=jsondict, strict=strict)\n\n    @classmethod\n    def _with_json_dict(cls, jsondict):\n        \"\"\" Overridden to use a factory if called when \"resourceType\" is\n        defined in the JSON but does not match the receiver's resource_type.\n        \"\"\"\n        if not isinstance(jsondict, dict):\n            raise Exception('Cannot use this method with anything but a JSON dictionary, got {}'.format(jsondict))\n        res_type = jsondict.get('resourceType')\n        if res_type and res_type != cls.resource_type:\n            return fhirelementfactory.FHIRElementFactory.instantiate(res_type, jsondict)\n        return super(FHIRAbstractResource, cls)._with_json_dict(jsondict)\n\n    def relativeBase(self):\n        return self.__class__.resource_type\n\n    def relativePath(self):\n        if self.id is None:\n            return self.relativeBase()\n        return '{}/{}'.format(self.relativeBase(), self.id)\n\n    @property\n    def origin_server(self):\n        \"\"\" Walks the owner hierarchy until it finds an owner with a server.\n        \"\"\"\n        server = self._server\n        owner = self._owner\n        while server is None and owner is not None:\n            server = getattr(owner, '_server', None)\n            owner = owner._owner\n        return server\n\n    @origin_server.setter\n    def origin_server(self, server):\n        \"\"\" Sets the server on an element. \"\"\"\n        self._server = server\n\n    @classmethod\n    def read(cls, rem_id, server):\n        \"\"\" Read the resource with the given id from the given server. The\n        passed-in server instance must support a `request_json()` method call,\n        taking a relative path as first (and only mandatory) argument.\n        \n        :param str rem_id: The id of the resource on the remote server\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not rem_id:\n            raise Exception('Cannot read resource without remote id')\n        path = '{}/{}'.format(cls.resource_type, rem_id)\n        instance = cls.read_from(path, server)\n        instance._local_id = rem_id\n        return instance\n\n    @classmethod\n    def read_from(cls, path, server):\n        \"\"\" Requests data from the given REST path on the server and creates\n        an instance of the receiving class.\n        \n        :param str path: The REST path to read from\n        :param FHIRServer server: An instance of a FHIR server or compatible class\n        :returns: An instance of the receiving class\n        \"\"\"\n        if not path:\n            raise Exception('Cannot read resource without REST path')\n        if server is None:\n            raise Exception('Cannot read resource without server instance')\n        ret = server.request_json(path)\n        instance = cls(jsondict=ret)\n        instance.origin_server = server\n        return instance\n\n    def createPath(self):\n        \"\"\" Get the endpoint on the server for creating the resource.\n\n        :returns: The resource endpoint or None for the root endpoint\n        \"\"\"\n        root_post_types = ('batch', 'transaction')\n        if self.resource_type == 'Bundle' and self.type in root_post_types:\n            return None\n        return self.relativeBase()\n\n    def create(self, server):\n        \"\"\" Attempt to create the receiver on the given server, using a POST\n        command.\n        \n        :param FHIRServer server: The server to create the receiver on\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot create a resource without a server')\n        if self.id:\n            raise Exception('This resource already has an id, cannot create')\n        ret = srv.post_json(self.createPath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def update(self, server=None):\n        \"\"\" Update the receiver's representation on the given server, issuing\n        a PUT command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot update a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot update a resource that does not have an id')\n        ret = srv.put_json(self.relativePath(), self.as_json())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def delete(self, server=None):\n        \"\"\" Delete the receiver from the given server with a DELETE command.\n        \n        :param FHIRServer server: The server to update the receiver on;\n            optional, will use the instance's `server` if needed.\n        :returns: None or the response JSON on success\n        \"\"\"\n        srv = server or self.origin_server\n        if srv is None:\n            raise Exception('Cannot delete a resource that does not have a server')\n        if not self.id:\n            raise Exception('Cannot delete a resource that does not have an id')\n        ret = srv.delete_json(self.relativePath())\n        if len(ret.text) > 0:\n            return ret.json()\n        return None\n\n    def search(self, struct=None):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct, with \"$type\" and \"id\" added.\n        \n        :param dict struct: An optional search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        if struct is None:\n            struct = {'$type': self.__class__.resource_type}\n        if self._local_id is not None or self.id is not None:\n            struct['id'] = self._local_id or self.id\n        return self.__class__.where(struct)\n\n    @classmethod\n    def where(cls, struct):\n        \"\"\" Search can be started via a dictionary containing a search\n        construct.\n        \n        Calling this method with a search struct will return a `FHIRSearch`\n        object representing the search struct\n        \n        :param dict struct: A search structure\n        :returns: A FHIRSearch instance\n        \"\"\"\n        return fhirsearch.FHIRSearch(cls, struct)\nfrom . import fhirsearch\nfrom . import fhirelementfactory"
  }
}