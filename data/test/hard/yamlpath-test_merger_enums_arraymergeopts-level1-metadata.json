{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_merger_enums_arraymergeopts",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_merger_enums_arraymergeopts.py",
  "test_code": "import pytest\n\nfrom yamlpath.merger.enums.arraymergeopts import (\n\tArrayMergeOpts)\n\n\nclass Test_merger_enums_arraymergeopts():\n\t\"\"\"Tests for the ArrayMergeOpts enumeration.\"\"\"\n\n\tdef test_get_names(self):\n\t\tassert ArrayMergeOpts.get_names() == [\n\t\t\t\"ALL\",\n\t\t\t\"LEFT\",\n\t\t\t\"RIGHT\",\n\t\t\t\"UNIQUE\",\n\t\t]\n\n\tdef test_get_choices(self):\n\t\tassert ArrayMergeOpts.get_choices() == [\n\t\t\t\"all\",\n\t\t\t\"left\",\n\t\t\t\"right\",\n\t\t\t\"unique\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"ALL\", ArrayMergeOpts.ALL),\n\t\t(\"LEFT\", ArrayMergeOpts.LEFT),\n\t\t(\"RIGHT\", ArrayMergeOpts.RIGHT),\n\t\t(\"UNIQUE\", ArrayMergeOpts.UNIQUE),\n\t])\n\tdef test_from_str(self, input, output):\n\t\tassert output == ArrayMergeOpts.from_str(input)\n\n\tdef test_from_str_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tArrayMergeOpts.from_str(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/merger/enums/arraymergeopts.py": "\"\"\"\nImplements the ArrayMergeOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass ArrayMergeOpts(Enum):\n    \"\"\"\n    Supported Array (AKA: List) Merge Options.\n\n    Options include:\n\n    `ALL`\n        All RHS Arrays elements are appended to LHS Arrays (no deduplication).\n\n    `LEFT`\n        LHS Arrays are not overwritten/appended by RHS Arrays (no merge).\n\n    `RIGHT`\n        RHS Arrays fully replace LHS Arrays (no merge).\n\n    `UNIQUE`\n        Only unique RHS Array elements are appended to LHS Arrays (merge).\n    \"\"\"\n\n    ALL = auto()\n    LEFT = auto()\n    RIGHT = auto()\n    UNIQUE = auto()\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all upper-cased entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in ArrayMergeOpts]\n\n    @staticmethod\n    def get_choices() -> List[str]:\n        \"\"\"\n        Get all entry names with symbolic representations for this enumeration.\n\n        All returned entries are lower-cased.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Lower-case names and symbols from this\n            enumeration\n\n        Raises:  N/A\n        \"\"\"\n        names = [l.lower() for l in ArrayMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices\n\n    @staticmethod\n    def from_str(name: str) -> \"ArrayMergeOpts\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. name (str) The name to convert\n\n        Returns:  (ArrayMergeOpts) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values\n        \"\"\"\n        check: str = str(name).upper()\n        if check in ArrayMergeOpts.get_names():\n            return ArrayMergeOpts[check]\n        raise NameError(\n            \"ArrayMergeOpts has no such item:  {}\"\n            .format(name))\n"
  },
  "GT_src_dict": {
    "yamlpath/merger/enums/arraymergeopts.py": {
      "ArrayMergeOpts.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Retrieve all entry names from the ArrayMergeOpts enumeration in upper case.\n\nThis static method returns a list of strings representing the names of the enumeration members, converted to upper case. It does not take any parameters and does not raise any exceptions. The names returned are derived from the `ArrayMergeOpts` class, which defines the enumeration options for array merging behaviors, including the options `ALL`, `LEFT`, `RIGHT`, and `UNIQUE`.\"\"\"\n        '\\n        Get all upper-cased entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in ArrayMergeOpts]",
        "docstring": "Retrieve all entry names from the ArrayMergeOpts enumeration in upper case.\n\nThis static method returns a list of strings representing the names of the enumeration members, converted to upper case. It does not take any parameters and does not raise any exceptions. The names returned are derived from the `ArrayMergeOpts` class, which defines the enumeration options for array merging behaviors, including the options `ALL`, `LEFT`, `RIGHT`, and `UNIQUE`.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class ArrayMergeOpts(Enum):"
      },
      "ArrayMergeOpts.get_choices": {
        "code": "    def get_choices() -> List[str]:\n        \"\"\"Get all entry names for this enumeration in lower-case.\n\nThis method retrieves the names of all members of the `ArrayMergeOpts` enumeration, converts them to lower-case, and ensures uniqueness. It relies on the `get_names` static method to obtain the upper-cased names before processing. The resulting list is sorted alphabetically.\n\nReturns:\n    List[str]: A sorted list of unique, lower-cased names corresponding to the enumeration members.\n\nRaises:\n    N/A\"\"\"\n        '\\n        Get all entry names with symbolic representations for this enumeration.\\n\\n        All returned entries are lower-cased.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Lower-case names and symbols from this\\n            enumeration\\n\\n        Raises:  N/A\\n        '\n        names = [l.lower() for l in ArrayMergeOpts.get_names()]\n        choices = list(set(names))\n        choices.sort()\n        return choices",
        "docstring": "Get all entry names for this enumeration in lower-case.\n\nThis method retrieves the names of all members of the `ArrayMergeOpts` enumeration, converts them to lower-case, and ensures uniqueness. It relies on the `get_names` static method to obtain the upper-cased names before processing. The resulting list is sorted alphabetically.\n\nReturns:\n    List[str]: A sorted list of unique, lower-cased names corresponding to the enumeration members.\n\nRaises:\n    N/A",
        "signature": "def get_choices() -> List[str]:",
        "type": "Method",
        "class_signature": "class ArrayMergeOpts(Enum):"
      },
      "ArrayMergeOpts.from_str": {
        "code": "    def from_str(name: str) -> 'ArrayMergeOpts':\n        \"\"\"Convert a string representation of an enumeration value to the corresponding `ArrayMergeOpts` member.\n\nParameters:\n    name (str): The string name of the enumeration member to convert.\n\nReturns:\n    ArrayMergeOpts: The enumeration member corresponding to the provided string name.\n\nRaises:\n    NameError: If the string does not match any valid enumeration names.\n\nThis method utilizes `ArrayMergeOpts.get_names()` to retrieve the list of valid enumeration names, converting the input string to uppercase for comparison. If a match is found, the corresponding enumeration value is returned; otherwise, a `NameError` is raised to indicate the absence of the specified name in the enumeration.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. name (str) The name to convert\\n\\n        Returns:  (ArrayMergeOpts) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values\\n        \"\n        check: str = str(name).upper()\n        if check in ArrayMergeOpts.get_names():\n            return ArrayMergeOpts[check]\n        raise NameError('ArrayMergeOpts has no such item:  {}'.format(name))",
        "docstring": "Convert a string representation of an enumeration value to the corresponding `ArrayMergeOpts` member.\n\nParameters:\n    name (str): The string name of the enumeration member to convert.\n\nReturns:\n    ArrayMergeOpts: The enumeration member corresponding to the provided string name.\n\nRaises:\n    NameError: If the string does not match any valid enumeration names.\n\nThis method utilizes `ArrayMergeOpts.get_names()` to retrieve the list of valid enumeration names, converting the input string to uppercase for comparison. If a match is found, the corresponding enumeration value is returned; otherwise, a `NameError` is raised to indicate the absence of the specified name in the enumeration.",
        "signature": "def from_str(name: str) -> 'ArrayMergeOpts':",
        "type": "Method",
        "class_signature": "class ArrayMergeOpts(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:get_choices": {},
    "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:from_str": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_merger_enums_arraymergeopts\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 merger/\n        \u2514\u2500\u2500 enums/\n            \u2514\u2500\u2500 arraymergeopts.py\n                \u251c\u2500\u2500 ArrayMergeOpts.from_str\n                \u251c\u2500\u2500 ArrayMergeOpts.get_choices\n                \u2514\u2500\u2500 ArrayMergeOpts.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThis module is designed to validate and test the functionality of the `ArrayMergeOpts` enumeration, which defines and manages various options for merging arrays. It ensures that the enumeration provides consistent and reliable methods to retrieve option names, retrieve display choices, and convert string inputs into corresponding enumeration values. By offering robust testing and validation, the module reinforces the integrity of the array merge options, reducing potential errors in scenarios where these configurations are critical. This solves the problem of ensuring predictable and accurate behavior when handling array merge logic, streamlining development and improving reliability in systems that depend on these merge operations.\n\n## FILE 1: yamlpath/merger/enums/arraymergeopts.py\n\n- CLASS METHOD: ArrayMergeOpts.from_str\n  - CLASS SIGNATURE: class ArrayMergeOpts(Enum):\n  - SIGNATURE: def from_str(name: str) -> 'ArrayMergeOpts':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string representation of an enumeration value to the corresponding `ArrayMergeOpts` member.\n\nParameters:\n    name (str): The string name of the enumeration member to convert.\n\nReturns:\n    ArrayMergeOpts: The enumeration member corresponding to the provided string name.\n\nRaises:\n    NameError: If the string does not match any valid enumeration names.\n\nThis method utilizes `ArrayMergeOpts.get_names()` to retrieve the list of valid enumeration names, converting the input string to uppercase for comparison. If a match is found, the corresponding enumeration value is returned; otherwise, a `NameError` is raised to indicate the absence of the specified name in the enumeration.\n\"\"\"\n```\n\n- CLASS METHOD: ArrayMergeOpts.get_names\n  - CLASS SIGNATURE: class ArrayMergeOpts(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nRetrieve all entry names from the ArrayMergeOpts enumeration in upper case.\n\nThis static method returns a list of strings representing the names of the enumeration members, converted to upper case. It does not take any parameters and does not raise any exceptions. The names returned are derived from the `ArrayMergeOpts` class, which defines the enumeration options for array merging behaviors, including the options `ALL`, `LEFT`, `RIGHT`, and `UNIQUE`.\n\"\"\"\n```\n\n- CLASS METHOD: ArrayMergeOpts.get_choices\n  - CLASS SIGNATURE: class ArrayMergeOpts(Enum):\n  - SIGNATURE: def get_choices() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all entry names for this enumeration in lower-case.\n\nThis method retrieves the names of all members of the `ArrayMergeOpts` enumeration, converts them to lower-case, and ensures uniqueness. It relies on the `get_names` static method to obtain the upper-cased names before processing. The resulting list is sorted alphabetically.\n\nReturns:\n    List[str]: A sorted list of unique, lower-cased names corresponding to the enumeration members.\n\nRaises:\n    N/A\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/merger/enums/arraymergeopts.py": "\"\"\"\nImplements the ArrayMergeOpts enumeration.\n\nCopyright 2020 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass ArrayMergeOpts(Enum):\n    \"\"\"\n    Supported Array (AKA: List) Merge Options.\n\n    Options include:\n\n    `ALL`\n        All RHS Arrays elements are appended to LHS Arrays (no deduplication).\n\n    `LEFT`\n        LHS Arrays are not overwritten/appended by RHS Arrays (no merge).\n\n    `RIGHT`\n        RHS Arrays fully replace LHS Arrays (no merge).\n\n    `UNIQUE`\n        Only unique RHS Array elements are appended to LHS Arrays (merge).\n    \"\"\"\n    ALL = auto()\n    LEFT = auto()\n    RIGHT = auto()\n    UNIQUE = auto()"
  },
  "call_tree": {
    "tests/test_merger_enums_arraymergeopts.py:Test_merger_enums_arraymergeopts:test_get_names": {
      "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:get_names": {}
    },
    "tests/test_merger_enums_arraymergeopts.py:Test_merger_enums_arraymergeopts:test_get_choices": {
      "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:get_choices": {
        "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_arraymergeopts.py:Test_merger_enums_arraymergeopts:test_from_str": {
      "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:from_str": {
        "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:get_names": {}
      }
    },
    "tests/test_merger_enums_arraymergeopts.py:Test_merger_enums_arraymergeopts:test_from_str_nameerror": {
      "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:from_str": {
        "yamlpath/merger/enums/arraymergeopts.py:ArrayMergeOpts:get_names": {}
      }
    }
  }
}