{
  "dir_path": "/app/ncclient",
  "package_name": "ncclient",
  "sample_name": "ncclient-test_hpcomware",
  "src_dir": "ncclient/",
  "test_dir": "test/",
  "test_file": "modified_testcases/unit/devices/test_hpcomware.py",
  "test_code": "import unittest\nfrom ncclient.devices.hpcomware import *\nfrom ncclient.xml_ import *\n\n\nclass TestHpcomwareDevice(unittest.TestCase):\n\n    def setUp(self):\n        self.obj = HpcomwareDeviceHandler({'name': 'hpcomware'})\n\n    def test_get_xml_base_namespace_dict(self):\n        expected = {None: BASE_NS_1_0}\n        self.assertDictEqual(expected, self.obj.get_xml_base_namespace_dict())\n\n    def test_get_xml_extra_prefix_kwargs(self):\n        expected = {'nsmap': {'data': 'http://www.hp.com/netconf/data:1.0',\n                              'config': 'http://www.hp.com/netconf/config:1.0',\n                              None: 'urn:ietf:params:xml:ns:netconf:base:1.0'}}\n        self.assertDictEqual(expected, self.obj.get_xml_extra_prefix_kwargs())\n\n    def test_add_additional_operations(self):\n        expected = dict()\n        expected['cli_display'] = DisplayCommand\n        expected['cli_config'] = ConfigCommand\n        expected['action'] = Action\n        expected['save'] = Save\n        expected['rollback'] = Rollback\n        self.assertDictEqual(expected, self.obj.add_additional_operations())\n",
  "GT_file_code": {
    "ncclient/transport/errors.py": "# Copyright 2009 Shikhar Bhushan\n# Copyright 2014 Leonidas Poulopoulos\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom ncclient import NCClientError\n\nclass TransportError(NCClientError):\n    pass\n\nclass SessionError(NCClientError):\n    pass\n\nclass AuthenticationError(TransportError):\n    pass\n\nclass PermissionError(TransportError):\n    pass\n\nclass SessionCloseError(TransportError):\n\n    def __init__(self, in_buf, out_buf=None):\n        msg = 'Unexpected session close'\n        if in_buf:\n            msg += '\\nIN_BUFFER: `%s`' % in_buf\n        if out_buf:\n            msg += ' OUT_BUFFER: `%s`' % out_buf\n        SSHError.__init__(self, msg)\n\nclass SSHError(TransportError):\n    pass\n\nclass SSHUnknownHostError(SSHError):\n\n    def __init__(self, host, fingerprint):\n        SSHError.__init__(self, 'Unknown host key [%s] for [%s]' % (fingerprint, host))\n        self.host = host\n        self.fingerprint = fingerprint\n\nclass NetconfFramingError(TransportError):\n    pass\n\n\nclass TLSError(TransportError):\n    pass\n\nclass UnixSocketError (TransportError):\n    pass\n",
    "ncclient/devices/hpcomware.py": "from ncclient.xml_ import BASE_NS_1_0\nfrom .default import DefaultDeviceHandler\nfrom ncclient.operations.third_party.hpcomware.rpc import DisplayCommand, ConfigCommand, Action, Rollback, Save\n\nclass HpcomwareDeviceHandler(DefaultDeviceHandler):\n\n    def __init__(self, device_params):\n        super(HpcomwareDeviceHandler, self).__init__(device_params)\n\n    def get_xml_base_namespace_dict(self):\n        \"\"\"\n        Base namespace needs a None key.\n\n        See 'nsmap' argument for lxml's Element().\n\n        \"\"\"\n        return {None: BASE_NS_1_0}\n\n    def get_xml_extra_prefix_kwargs(self):\n        \"\"\"\n        Return keyword arguments per request, which are applied to Element().\n\n        Mostly, this is a dictionary containing the \"nsmap\" key.\n\n        See 'nsmap' argument for lxml's Element().\n\n        \"\"\"\n        d = {\n                \"data\": \"http://www.hp.com/netconf/data:1.0\",\n                \"config\": \"http://www.hp.com/netconf/config:1.0\",\n            }\n        d.update(self.get_xml_base_namespace_dict())\n        return {\"nsmap\": d}\n\n    def add_additional_operations(self):\n        addtl = {}\n        addtl['cli_display'] = DisplayCommand\n        addtl['cli_config'] = ConfigCommand\n        addtl['action'] = Action\n        addtl['rollback'] = Rollback\n        addtl['save'] = Save\n        return addtl\n"
  },
  "GT_src_dict": {
    "ncclient/transport/errors.py": {},
    "ncclient/devices/hpcomware.py": {
      "HpcomwareDeviceHandler.__init__": {
        "code": "    def __init__(self, device_params):\n        \"\"\"Initializes an instance of the HpcomwareDeviceHandler class, which is a specialized handler for managing HP Comware devices within a network context. This constructor calls the parent class's initializer, DefaultDeviceHandler, to set up the device parameters.\n\nParameters:\n- device_params (dict): A dictionary containing parameters required to connect and interact with the HP Comware device.\n\nThis method does not return any values but sets up the instance for further operations relevant to HP Comware devices, leveraging the functionality provided by the inherited DefaultDeviceHandler class.\"\"\"\n        super(HpcomwareDeviceHandler, self).__init__(device_params)",
        "docstring": "Initializes an instance of the HpcomwareDeviceHandler class, which is a specialized handler for managing HP Comware devices within a network context. This constructor calls the parent class's initializer, DefaultDeviceHandler, to set up the device parameters.\n\nParameters:\n- device_params (dict): A dictionary containing parameters required to connect and interact with the HP Comware device.\n\nThis method does not return any values but sets up the instance for further operations relevant to HP Comware devices, leveraging the functionality provided by the inherited DefaultDeviceHandler class.",
        "signature": "def __init__(self, device_params):",
        "type": "Method",
        "class_signature": "class HpcomwareDeviceHandler(DefaultDeviceHandler):"
      },
      "HpcomwareDeviceHandler.get_xml_base_namespace_dict": {
        "code": "    def get_xml_base_namespace_dict(self):\n        \"\"\"Return a dictionary containing the base XML namespace for use in NETCONF operations. The dictionary includes a single key-value pair where the key is None, representing the absence of a prefix, and the value is defined by the constant BASE_NS_1_0 from the ncclient.xml_ module. This function is utilized for constructing XML elements with the appropriate namespace mapping required by the lxml library's Element() method.\"\"\"\n        \"\\n        Base namespace needs a None key.\\n\\n        See 'nsmap' argument for lxml's Element().\\n\\n        \"\n        return {None: BASE_NS_1_0}",
        "docstring": "Return a dictionary containing the base XML namespace for use in NETCONF operations. The dictionary includes a single key-value pair where the key is None, representing the absence of a prefix, and the value is defined by the constant BASE_NS_1_0 from the ncclient.xml_ module. This function is utilized for constructing XML elements with the appropriate namespace mapping required by the lxml library's Element() method.",
        "signature": "def get_xml_base_namespace_dict(self):",
        "type": "Method",
        "class_signature": "class HpcomwareDeviceHandler(DefaultDeviceHandler):"
      },
      "HpcomwareDeviceHandler.get_xml_extra_prefix_kwargs": {
        "code": "    def get_xml_extra_prefix_kwargs(self):\n        \"\"\"Return keyword arguments for XML requests, particularly for the 'nsmap' used in lxml's Element() function. This method constructs a dictionary containing specific namespace prefixes related to HP's Netconf configuration and data. \n\nIt initializes a dictionary `d` with two key-value pairs: \n- `\"data\"`: set to the URL for HP's Netconf data namespace (`\"http://www.hp.com/netconf/data:1.0\"`).\n- `\"config\"`: set to the URL for HP's Netconf config namespace (`\"http://www.hp.com/netconf/config:1.0\"`).\n\nIt then incorporates the base namespace dictionary obtained from `get_xml_base_namespace_dict()`, which provides an additional entry with a `None` key corresponding to `BASE_NS_1_0`. \n\nFinally, it returns a dictionary with the single key `\"nsmap\"` tied to the complete namespace dictionary. This method is mainly utilized when constructing XML elements that require the correct namespaces for interaction with HP Comware devices.\"\"\"\n        '\\n        Return keyword arguments per request, which are applied to Element().\\n\\n        Mostly, this is a dictionary containing the \"nsmap\" key.\\n\\n        See \\'nsmap\\' argument for lxml\\'s Element().\\n\\n        '\n        d = {'data': 'http://www.hp.com/netconf/data:1.0', 'config': 'http://www.hp.com/netconf/config:1.0'}\n        d.update(self.get_xml_base_namespace_dict())\n        return {'nsmap': d}",
        "docstring": "Return keyword arguments for XML requests, particularly for the 'nsmap' used in lxml's Element() function. This method constructs a dictionary containing specific namespace prefixes related to HP's Netconf configuration and data. \n\nIt initializes a dictionary `d` with two key-value pairs: \n- `\"data\"`: set to the URL for HP's Netconf data namespace (`\"http://www.hp.com/netconf/data:1.0\"`).\n- `\"config\"`: set to the URL for HP's Netconf config namespace (`\"http://www.hp.com/netconf/config:1.0\"`).\n\nIt then incorporates the base namespace dictionary obtained from `get_xml_base_namespace_dict()`, which provides an additional entry with a `None` key corresponding to `BASE_NS_1_0`. \n\nFinally, it returns a dictionary with the single key `\"nsmap\"` tied to the complete namespace dictionary. This method is mainly utilized when constructing XML elements that require the correct namespaces for interaction with HP Comware devices.",
        "signature": "def get_xml_extra_prefix_kwargs(self):",
        "type": "Method",
        "class_signature": "class HpcomwareDeviceHandler(DefaultDeviceHandler):"
      },
      "HpcomwareDeviceHandler.add_additional_operations": {
        "code": "    def add_additional_operations(self):\n        \"\"\"Returns a dictionary of additional operations specific to the Hpcomware device handler.\n\nThis method populates a dictionary with key-value pairs, where the keys are custom operation identifiers \n(`'cli_display'`, `'cli_config'`, `'action'`, `'rollback'`, and `'save'`), and the values are the corresponding \ncommand classes (`DisplayCommand`, `ConfigCommand`, `Action`, `Rollback`, and `Save`), imported from the \n`ncclient.operations.third_party.hpcomware.rpc` module. These command classes facilitate various device \noperations and interactions.\n\nReturns:\n    dict: A dictionary containing additional operations for managing the Hpcomware device, with specified \n    keys and their corresponding command classes.\"\"\"\n        addtl = {}\n        addtl['cli_display'] = DisplayCommand\n        addtl['cli_config'] = ConfigCommand\n        addtl['action'] = Action\n        addtl['rollback'] = Rollback\n        addtl['save'] = Save\n        return addtl",
        "docstring": "Returns a dictionary of additional operations specific to the Hpcomware device handler.\n\nThis method populates a dictionary with key-value pairs, where the keys are custom operation identifiers \n(`'cli_display'`, `'cli_config'`, `'action'`, `'rollback'`, and `'save'`), and the values are the corresponding \ncommand classes (`DisplayCommand`, `ConfigCommand`, `Action`, `Rollback`, and `Save`), imported from the \n`ncclient.operations.third_party.hpcomware.rpc` module. These command classes facilitate various device \noperations and interactions.\n\nReturns:\n    dict: A dictionary containing additional operations for managing the Hpcomware device, with specified \n    keys and their corresponding command classes.",
        "signature": "def add_additional_operations(self):",
        "type": "Method",
        "class_signature": "class HpcomwareDeviceHandler(DefaultDeviceHandler):"
      }
    }
  },
  "dependency_dict": {},
  "PRD": "# PROJECT NAME: ncclient-test_hpcomware\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 ncclient/\n    \u251c\u2500\u2500 devices/\n    \u2502   \u2514\u2500\u2500 hpcomware.py\n    \u2502       \u251c\u2500\u2500 HpcomwareDeviceHandler.__init__\n    \u2502       \u251c\u2500\u2500 HpcomwareDeviceHandler.add_additional_operations\n    \u2502       \u251c\u2500\u2500 HpcomwareDeviceHandler.get_xml_base_namespace_dict\n    \u2502       \u2514\u2500\u2500 HpcomwareDeviceHandler.get_xml_extra_prefix_kwargs\n    \u2514\u2500\u2500 transport/\n        \u2514\u2500\u2500 errors.py\n            \u2514\u2500\u2500 SessionCloseError.SessionCloseError\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides a framework for handling and interacting with HP Comware-based network devices via the Network Configuration Protocol (NETCONF). It enables robust namespace and XML operation management by exposing functionalities for retrieving XML namespace mappings and additional keyword arguments for NETCONF operations. The module also extends support for custom operations such as CLI display, configuration commands, and actions like save and rollback, tailored to the HP Comware device ecosystem. This functionality simplifies and standardizes the integration of HP Comware devices into automated network management workflows, reducing complexity for developers and users while ensuring reliable and consistent device interaction.\n\n## FILE 1: ncclient/transport/errors.py\n\n## FILE 2: ncclient/devices/hpcomware.py\n\n- CLASS METHOD: HpcomwareDeviceHandler.__init__\n  - CLASS SIGNATURE: class HpcomwareDeviceHandler(DefaultDeviceHandler):\n  - SIGNATURE: def __init__(self, device_params):\n  - DOCSTRING: \n```python\n\"\"\"\nInitializes an instance of the HpcomwareDeviceHandler class, which is a specialized handler for managing HP Comware devices within a network context. This constructor calls the parent class's initializer, DefaultDeviceHandler, to set up the device parameters.\n\nParameters:\n- device_params (dict): A dictionary containing parameters required to connect and interact with the HP Comware device.\n\nThis method does not return any values but sets up the instance for further operations relevant to HP Comware devices, leveraging the functionality provided by the inherited DefaultDeviceHandler class.\n\"\"\"\n```\n\n- CLASS METHOD: HpcomwareDeviceHandler.get_xml_base_namespace_dict\n  - CLASS SIGNATURE: class HpcomwareDeviceHandler(DefaultDeviceHandler):\n  - SIGNATURE: def get_xml_base_namespace_dict(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturn a dictionary containing the base XML namespace for use in NETCONF operations. The dictionary includes a single key-value pair where the key is None, representing the absence of a prefix, and the value is defined by the constant BASE_NS_1_0 from the ncclient.xml_ module. This function is utilized for constructing XML elements with the appropriate namespace mapping required by the lxml library's Element() method.\n\"\"\"\n```\n\n- CLASS METHOD: HpcomwareDeviceHandler.get_xml_extra_prefix_kwargs\n  - CLASS SIGNATURE: class HpcomwareDeviceHandler(DefaultDeviceHandler):\n  - SIGNATURE: def get_xml_extra_prefix_kwargs(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturn keyword arguments for XML requests, particularly for the 'nsmap' used in lxml's Element() function. This method constructs a dictionary containing specific namespace prefixes related to HP's Netconf configuration and data. \n\nIt initializes a dictionary `d` with two key-value pairs: \n- `\"data\"`: set to the URL for HP's Netconf data namespace (`\"http://www.hp.com/netconf/data:1.0\"`).\n- `\"config\"`: set to the URL for HP's Netconf config namespace (`\"http://www.hp.com/netconf/config:1.0\"`).\n\nIt then incorporates the base namespace dictionary obtained from `get_xml_base_namespace_dict()`, which provides an additional entry with a `None` key corresponding to `BASE_NS_1_0`. \n\nFinally, it returns a dictionary with the single key `\"nsmap\"` tied to the complete namespace dictionary. This method is mainly utilized when constructing XML elements that require the correct namespaces for interaction with HP Comware devices.\n\"\"\"\n```\n\n- CLASS METHOD: HpcomwareDeviceHandler.add_additional_operations\n  - CLASS SIGNATURE: class HpcomwareDeviceHandler(DefaultDeviceHandler):\n  - SIGNATURE: def add_additional_operations(self):\n  - DOCSTRING: \n```python\n\"\"\"\nReturns a dictionary of additional operations specific to the Hpcomware device handler.\n\nThis method populates a dictionary with key-value pairs, where the keys are custom operation identifiers \n(`'cli_display'`, `'cli_config'`, `'action'`, `'rollback'`, and `'save'`), and the values are the corresponding \ncommand classes (`DisplayCommand`, `ConfigCommand`, `Action`, `Rollback`, and `Save`), imported from the \n`ncclient.operations.third_party.hpcomware.rpc` module. These command classes facilitate various device \noperations and interactions.\n\nReturns:\n    dict: A dictionary containing additional operations for managing the Hpcomware device, with specified \n    keys and their corresponding command classes.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "ncclient/transport/errors.py": "from ncclient import NCClientError\n\nclass TransportError(NCClientError):\n    pass\n\nclass SessionError(NCClientError):\n    pass\n\nclass AuthenticationError(TransportError):\n    pass\n\nclass PermissionError(TransportError):\n    pass\n\nclass SessionCloseError(TransportError):\n\n    def __init__(self, in_buf, out_buf=None):\n        msg = 'Unexpected session close'\n        if in_buf:\n            msg += '\\nIN_BUFFER: `%s`' % in_buf\n        if out_buf:\n            msg += ' OUT_BUFFER: `%s`' % out_buf\n        SSHError.__init__(self, msg)\n\nclass SSHError(TransportError):\n    pass\n\nclass SSHUnknownHostError(SSHError):\n\n    def __init__(self, host, fingerprint):\n        SSHError.__init__(self, 'Unknown host key [%s] for [%s]' % (fingerprint, host))\n        self.host = host\n        self.fingerprint = fingerprint\n\nclass NetconfFramingError(TransportError):\n    pass\n\nclass TLSError(TransportError):\n    pass\n\nclass UnixSocketError(TransportError):\n    pass",
    "ncclient/devices/hpcomware.py": "from ncclient.xml_ import BASE_NS_1_0\nfrom .default import DefaultDeviceHandler\nfrom ncclient.operations.third_party.hpcomware.rpc import DisplayCommand, ConfigCommand, Action, Rollback, Save\n\nclass HpcomwareDeviceHandler(DefaultDeviceHandler):"
  },
  "call_tree": {
    "modified_testcases/unit/devices/test_hpcomware.py:TestHpcomwareDevice:setUp": {
      "ncclient/devices/hpcomware.py:HpcomwareDeviceHandler:__init__": {
        "ncclient/devices/default.py:DefaultDeviceHandler:__init__": {}
      }
    },
    "modified_testcases/unit/devices/test_hpcomware.py:TestHpcomwareDevice:test_add_additional_operations": {
      "ncclient/devices/hpcomware.py:HpcomwareDeviceHandler:add_additional_operations": {}
    },
    "modified_testcases/unit/devices/test_hpcomware.py:TestHpcomwareDevice:test_get_xml_base_namespace_dict": {
      "ncclient/devices/hpcomware.py:HpcomwareDeviceHandler:get_xml_base_namespace_dict": {}
    },
    "modified_testcases/unit/devices/test_hpcomware.py:TestHpcomwareDevice:test_get_xml_extra_prefix_kwargs": {
      "ncclient/devices/hpcomware.py:HpcomwareDeviceHandler:get_xml_extra_prefix_kwargs": {
        "ncclient/devices/hpcomware.py:HpcomwareDeviceHandler:get_xml_base_namespace_dict": {}
      }
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/test/unit/transport/test_ssh.py:TestSSH:test_run_receive_py3": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/test/unit/transport/test_ssh.py:TestSSH:test_run_receive_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/test/unit/transport/test_ssh.py:TestSSH:test_run_send_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/modified_testcases/unit/transport/test_ssh.py:TestSSH:test_run_receive_py3": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/modified_testcases/unit/transport/test_ssh.py:TestSSH:test_run_receive_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    },
    "/mnt/sfs_turbo/yaxindu/MAC/PackageDataset/app/ncclient-image/ncclient/modified_testcases/unit/transport/test_ssh.py:TestSSH:test_run_send_py2": {
      "ncclient/transport/errors.py:SessionCloseError:SessionCloseError": {}
    }
  }
}