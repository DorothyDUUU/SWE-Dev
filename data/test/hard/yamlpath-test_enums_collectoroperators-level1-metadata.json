{
  "dir_path": "/app/yamlpath",
  "package_name": "yamlpath",
  "sample_name": "yamlpath-test_enums_collectoroperators",
  "src_dir": "yamlpath/",
  "test_dir": "tests/",
  "test_file": "tests/test_enums_collectoroperators.py",
  "test_code": "import pytest\n\nfrom yamlpath.enums import CollectorOperators\n\n\nclass Test_enums_CollectorOperators():\n\t\"\"\"Tests for the CollectorOperators enumeration.\"\"\"\n\tdef test_get_names(self):\n\t\tassert CollectorOperators.get_names() == [\n\t\t\t\"ADDITION\",\n\t\t\t\"NONE\",\n\t\t\t\"SUBTRACTION\",\n\t\t\t\"INTERSECTION\",\n\t\t]\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(CollectorOperators.ADDITION, \"+\"),\n\t\t(CollectorOperators.NONE, \"\"),\n\t\t(CollectorOperators.SUBTRACTION, \"-\"),\n\t\t(CollectorOperators.INTERSECTION, \"&\"),\n\t])\n\tdef test_str(self, input, output):\n\t\tassert output == str(input)\n\n\t@pytest.mark.parametrize(\"input,output\", [\n\t\t(\"+\", CollectorOperators.ADDITION),\n\t\t(\"-\", CollectorOperators.SUBTRACTION),\n\t\t(\"&\", CollectorOperators.INTERSECTION),\n\t\t(\"ADDITION\", CollectorOperators.ADDITION),\n\t\t(\"NONE\", CollectorOperators.NONE),\n\t\t(\"SUBTRACTION\", CollectorOperators.SUBTRACTION),\n\t\t(\"INTERSECTION\", CollectorOperators.INTERSECTION),\n\t\t(CollectorOperators.ADDITION, CollectorOperators.ADDITION),\n\t\t(CollectorOperators.SUBTRACTION, CollectorOperators.SUBTRACTION),\n\t\t(CollectorOperators.INTERSECTION, CollectorOperators.INTERSECTION),\n\t\t(CollectorOperators.NONE, CollectorOperators.NONE),\n\t])\n\tdef test_from_operator(self, input, output):\n\t\tassert output == CollectorOperators.from_operator(input)\n\n\tdef test_from_operator_nameerror(self):\n\t\twith pytest.raises(NameError):\n\t\t\tCollectorOperators.from_operator(\"NO SUCH NAME\")\n",
  "GT_file_code": {
    "yamlpath/enums/collectoroperators.py": "\"\"\"\nImplements the CollectorOperators enumeration.\n\nCopyright 2019, 2020, 2021 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\n\nclass CollectorOperators(Enum):\n    \"\"\"\n    Supported Collector operators.\n\n    These identify how one Collector's results are to be combined with its\n    predecessor Collector, if there is one.  Operations include:\n\n    `NONE`\n        The Collector's results are not combined with its predecessor.\n        Instead, the Collector creates a new result derived from its position\n        with the data.\n\n    `ADDITION`\n        The Collector's results are concatenated with its immediate predecessor\n        Collector's results.  No effort is made to limit the resluting data to\n        unique values.\n\n    `SUBTRACTION`\n        The Collector's results are removed from its immediate predecessor\n        Collector's results.  Only exact matches are removed.\n\n    `INTERSECTION`\n        Only those elements which are common to both Collectors are returned.\n    \"\"\"\n\n    ADDITION = auto()\n    NONE = auto()\n    SUBTRACTION = auto()\n    INTERSECTION = auto()\n\n    def __str__(self) -> str:\n        \"\"\"Get a String representation of an employed value of this enum.\"\"\"\n        operator: str = ''\n        if self is CollectorOperators.ADDITION:\n            operator = '+'\n        elif self is CollectorOperators.SUBTRACTION:\n            operator = '-'\n        elif self is CollectorOperators.INTERSECTION:\n            operator = '&'\n        return operator\n\n    @staticmethod\n    def get_names() -> List[str]:\n        \"\"\"\n        Get all entry names for this enumeration.\n\n        Parameters:  N/A\n\n        Returns:  (List[str]) Upper-case names from this enumeration\n\n        Raises:  N/A\n        \"\"\"\n        return [entry.name.upper() for entry in CollectorOperators]\n\n    @staticmethod\n    def from_operator(operator: str) -> \"CollectorOperators\":\n        \"\"\"\n        Convert a string value to a value of this enumeration, if valid.\n\n        Parameters:\n            1. operator (str) The name to convert\n\n        Returns:  (CollectorOperators) the converted enumeration value\n\n        Raises:\n            - `NameError` when name doesn't match any enumeration values.\n        \"\"\"\n        if isinstance(operator, CollectorOperators):\n            return operator\n\n        check: str = str(operator).upper()\n\n        if check == '+':\n            check = \"ADDITION\"\n        elif check == '-':\n            check = \"SUBTRACTION\"\n        elif check == '&':\n            check = \"INTERSECTION\"\n\n        if check in CollectorOperators.get_names():\n            return CollectorOperators[check]\n        raise NameError(\n            \"CollectorOperators has no such item, {}.\".format(check))\n"
  },
  "GT_src_dict": {
    "yamlpath/enums/collectoroperators.py": {
      "CollectorOperators.__str__": {
        "code": "    def __str__(self) -> str:\n        \"\"\"Get a string representation of the CollectorOperators enumeration value.\n\nThis method provides a visual representation of the operator associated with the enum instance. It translates the enumeration members (ADDITION, SUBTRACTION, INTERSECTION) into corresponding symbols ('+', '-', '&'). If the instance does not match any defined operators, an empty string is returned.\n\nReturns:\n    str: The symbol representing the enum value, or an empty string if the instance does not correspond to any operator.\n\nDependencies:\n    - CollectorOperators: This method is part of the CollectorOperators enum, which defines operators for combining results from various Collectors.\"\"\"\n        'Get a String representation of an employed value of this enum.'\n        operator: str = ''\n        if self is CollectorOperators.ADDITION:\n            operator = '+'\n        elif self is CollectorOperators.SUBTRACTION:\n            operator = '-'\n        elif self is CollectorOperators.INTERSECTION:\n            operator = '&'\n        return operator",
        "docstring": "Get a string representation of the CollectorOperators enumeration value.\n\nThis method provides a visual representation of the operator associated with the enum instance. It translates the enumeration members (ADDITION, SUBTRACTION, INTERSECTION) into corresponding symbols ('+', '-', '&'). If the instance does not match any defined operators, an empty string is returned.\n\nReturns:\n    str: The symbol representing the enum value, or an empty string if the instance does not correspond to any operator.\n\nDependencies:\n    - CollectorOperators: This method is part of the CollectorOperators enum, which defines operators for combining results from various Collectors.",
        "signature": "def __str__(self) -> str:",
        "type": "Method",
        "class_signature": "class CollectorOperators(Enum):"
      },
      "CollectorOperators.get_names": {
        "code": "    def get_names() -> List[str]:\n        \"\"\"Get all entry names for the CollectorOperators enumeration in upper-case.\n\nThis static method retrieves the names of all enumerated values within the \nCollectorOperators class, returning them as a list of strings. It does not \naccept any parameters.\n\nReturns:\n    List[str]: A list of upper-case names corresponding to each enumeration \n    member defined in CollectorOperators, which are `ADDITION`, `NONE`, \n    `SUBTRACTION`, and `INTERSECTION`.\n\nThis method interacts with the enumeration members defined in the \nCollectorOperators class, leveraging the functionality of the Enum base \nclass to access their names.\"\"\"\n        '\\n        Get all entry names for this enumeration.\\n\\n        Parameters:  N/A\\n\\n        Returns:  (List[str]) Upper-case names from this enumeration\\n\\n        Raises:  N/A\\n        '\n        return [entry.name.upper() for entry in CollectorOperators]",
        "docstring": "Get all entry names for the CollectorOperators enumeration in upper-case.\n\nThis static method retrieves the names of all enumerated values within the \nCollectorOperators class, returning them as a list of strings. It does not \naccept any parameters.\n\nReturns:\n    List[str]: A list of upper-case names corresponding to each enumeration \n    member defined in CollectorOperators, which are `ADDITION`, `NONE`, \n    `SUBTRACTION`, and `INTERSECTION`.\n\nThis method interacts with the enumeration members defined in the \nCollectorOperators class, leveraging the functionality of the Enum base \nclass to access their names.",
        "signature": "def get_names() -> List[str]:",
        "type": "Method",
        "class_signature": "class CollectorOperators(Enum):"
      },
      "CollectorOperators.from_operator": {
        "code": "    def from_operator(operator: str) -> 'CollectorOperators':\n        \"\"\"Convert a string representation of an operator to its corresponding CollectorOperators enumeration value.\n\nParameters:\n    operator (str): A string representing the operator, which can be a full name (\"ADDITION\", \"SUBTRACTION\", \"INTERSECTION\") or a symbol ('+', '-', '&').\n\nReturns:\n    CollectorOperators: The matching enumeration value for the given operator string.\n\nRaises:\n    NameError: If the provided string does not correspond to any valid operator in the CollectorOperators enum.\n\nThis method uses the `get_names` method to verify the validity of the operator string against the enumeration values and converts it into uppercase for consistency. The method also checks if the input is already an instance of CollectorOperators, in which case it returns the input directly without conversion.\"\"\"\n        \"\\n        Convert a string value to a value of this enumeration, if valid.\\n\\n        Parameters:\\n            1. operator (str) The name to convert\\n\\n        Returns:  (CollectorOperators) the converted enumeration value\\n\\n        Raises:\\n            - `NameError` when name doesn't match any enumeration values.\\n        \"\n        if isinstance(operator, CollectorOperators):\n            return operator\n        check: str = str(operator).upper()\n        if check == '+':\n            check = 'ADDITION'\n        elif check == '-':\n            check = 'SUBTRACTION'\n        elif check == '&':\n            check = 'INTERSECTION'\n        if check in CollectorOperators.get_names():\n            return CollectorOperators[check]\n        raise NameError('CollectorOperators has no such item, {}.'.format(check))",
        "docstring": "Convert a string representation of an operator to its corresponding CollectorOperators enumeration value.\n\nParameters:\n    operator (str): A string representing the operator, which can be a full name (\"ADDITION\", \"SUBTRACTION\", \"INTERSECTION\") or a symbol ('+', '-', '&').\n\nReturns:\n    CollectorOperators: The matching enumeration value for the given operator string.\n\nRaises:\n    NameError: If the provided string does not correspond to any valid operator in the CollectorOperators enum.\n\nThis method uses the `get_names` method to verify the validity of the operator string against the enumeration values and converts it into uppercase for consistency. The method also checks if the input is already an instance of CollectorOperators, in which case it returns the input directly without conversion.",
        "signature": "def from_operator(operator: str) -> 'CollectorOperators':",
        "type": "Method",
        "class_signature": "class CollectorOperators(Enum):"
      }
    }
  },
  "dependency_dict": {
    "yamlpath/enums/collectoroperators.py:CollectorOperators:from_operator": {}
  },
  "PRD": "# PROJECT NAME: yamlpath-test_enums_collectoroperators\n\n# FOLDER STRUCTURE:\n```\n..\n\u2514\u2500\u2500 yamlpath/\n    \u2514\u2500\u2500 enums/\n        \u2514\u2500\u2500 collectoroperators.py\n            \u251c\u2500\u2500 CollectorOperators.__str__\n            \u251c\u2500\u2500 CollectorOperators.from_operator\n            \u2514\u2500\u2500 CollectorOperators.get_names\n```\n\n# IMPLEMENTATION REQUIREMENTS:\n## MODULE DESCRIPTION:\nThe module provides functionality for testing the `CollectorOperators` enumeration, which defines a set of operations used in data collection or manipulation contexts. It ensures that the enumeration correctly maps symbolic operators (e.g., \"+\", \"-\", \"&\") to their respective semantic meanings (e.g., ADDITION, SUBTRACTION, INTERSECTION) and validates bidirectional conversions between their string, symbolic, and enum representations. This module enables developers to reliably integrate and depend on the `CollectorOperators` enumeration in applications, ensuring consistent operator behavior and reducing the risk of misinterpretation or errors when performing data operations. By automating these validations, the module streamlines the development process and enforces robustness in systems that depend on structured operator mappings.\n\n## FILE 1: yamlpath/enums/collectoroperators.py\n\n- CLASS METHOD: CollectorOperators.__str__\n  - CLASS SIGNATURE: class CollectorOperators(Enum):\n  - SIGNATURE: def __str__(self) -> str:\n  - DOCSTRING: \n```python\n\"\"\"\nGet a string representation of the CollectorOperators enumeration value.\n\nThis method provides a visual representation of the operator associated with the enum instance. It translates the enumeration members (ADDITION, SUBTRACTION, INTERSECTION) into corresponding symbols ('+', '-', '&'). If the instance does not match any defined operators, an empty string is returned.\n\nReturns:\n    str: The symbol representing the enum value, or an empty string if the instance does not correspond to any operator.\n\nDependencies:\n    - CollectorOperators: This method is part of the CollectorOperators enum, which defines operators for combining results from various Collectors.\n\"\"\"\n```\n\n- CLASS METHOD: CollectorOperators.get_names\n  - CLASS SIGNATURE: class CollectorOperators(Enum):\n  - SIGNATURE: def get_names() -> List[str]:\n  - DOCSTRING: \n```python\n\"\"\"\nGet all entry names for the CollectorOperators enumeration in upper-case.\n\nThis static method retrieves the names of all enumerated values within the \nCollectorOperators class, returning them as a list of strings. It does not \naccept any parameters.\n\nReturns:\n    List[str]: A list of upper-case names corresponding to each enumeration \n    member defined in CollectorOperators, which are `ADDITION`, `NONE`, \n    `SUBTRACTION`, and `INTERSECTION`.\n\nThis method interacts with the enumeration members defined in the \nCollectorOperators class, leveraging the functionality of the Enum base \nclass to access their names.\n\"\"\"\n```\n\n- CLASS METHOD: CollectorOperators.from_operator\n  - CLASS SIGNATURE: class CollectorOperators(Enum):\n  - SIGNATURE: def from_operator(operator: str) -> 'CollectorOperators':\n  - DOCSTRING: \n```python\n\"\"\"\nConvert a string representation of an operator to its corresponding CollectorOperators enumeration value.\n\nParameters:\n    operator (str): A string representing the operator, which can be a full name (\"ADDITION\", \"SUBTRACTION\", \"INTERSECTION\") or a symbol ('+', '-', '&').\n\nReturns:\n    CollectorOperators: The matching enumeration value for the given operator string.\n\nRaises:\n    NameError: If the provided string does not correspond to any valid operator in the CollectorOperators enum.\n\nThis method uses the `get_names` method to verify the validity of the operator string against the enumeration values and converts it into uppercase for consistency. The method also checks if the input is already an instance of CollectorOperators, in which case it returns the input directly without conversion.\n\"\"\"\n```\n\n# TASK DESCRIPTION:\nIn this project, you need to implement the functions and methods listed above. The functions have been removed from the code but their docstrings remain.\nYour task is to:\n1. Read and understand the docstrings of each function/method\n2. Understand the dependencies and how they interact with the target functions\n3. Implement the functions/methods according to their docstrings and signatures\n4. Ensure your implementations work correctly with the rest of the codebase\n",
  "file_code": {
    "yamlpath/enums/collectoroperators.py": "\"\"\"\nImplements the CollectorOperators enumeration.\n\nCopyright 2019, 2020, 2021 William W. Kimball, Jr. MBA MSIS\n\"\"\"\nfrom enum import Enum, auto\nfrom typing import List\n\nclass CollectorOperators(Enum):\n    \"\"\"\n    Supported Collector operators.\n\n    These identify how one Collector's results are to be combined with its\n    predecessor Collector, if there is one.  Operations include:\n\n    `NONE`\n        The Collector's results are not combined with its predecessor.\n        Instead, the Collector creates a new result derived from its position\n        with the data.\n\n    `ADDITION`\n        The Collector's results are concatenated with its immediate predecessor\n        Collector's results.  No effort is made to limit the resluting data to\n        unique values.\n\n    `SUBTRACTION`\n        The Collector's results are removed from its immediate predecessor\n        Collector's results.  Only exact matches are removed.\n\n    `INTERSECTION`\n        Only those elements which are common to both Collectors are returned.\n    \"\"\"\n    ADDITION = auto()\n    NONE = auto()\n    SUBTRACTION = auto()\n    INTERSECTION = auto()"
  },
  "call_tree": {
    "tests/test_enums_collectoroperators.py:Test_enums_CollectorOperators:test_get_names": {
      "yamlpath/enums/collectoroperators.py:CollectorOperators:get_names": {}
    },
    "tests/test_enums_collectoroperators.py:Test_enums_CollectorOperators:test_str": {
      "yamlpath/enums/collectoroperators.py:CollectorOperators:__str__": {}
    },
    "tests/test_enums_collectoroperators.py:Test_enums_CollectorOperators:test_from_operator": {
      "yamlpath/enums/collectoroperators.py:CollectorOperators:from_operator": {
        "yamlpath/enums/collectoroperators.py:CollectorOperators:get_names": {}
      }
    },
    "tests/test_enums_collectoroperators.py:Test_enums_CollectorOperators:test_from_operator_nameerror": {
      "yamlpath/enums/collectoroperators.py:CollectorOperators:from_operator": {
        "yamlpath/enums/collectoroperators.py:CollectorOperators:get_names": {}
      }
    }
  }
}